{"version":3,"file":"ongoing_or_paused.a4ab7582d020b93ad6e3.js","mappings":"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","sources":["webpack://leancoffee-powerup/./src/utils/Errors.ts","webpack://leancoffee-powerup/./src/utils/Scope.ts","webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/popups/LeanCoffeePopupBase.ts","webpack://leancoffee-powerup/./src/popups/ongoing_or_paused.ts","webpack://leancoffee-powerup/./src/popups/LeanCoffeePopupOngoingOrPaused.ts"],"sourcesContent":["import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nconst getTagsForReporting = async (\n  boardStorage: BoardStorage,\n  t: Trello.PowerUp.HostHandlers,\n): Promise<string> => {\n  const organisationIdHash = await boardStorage.read<string>(\n    t,\n    BoardStorage.ORGANISATION_HASH,\n  );\n  const boardIdHash = await boardStorage.read<string>(\n    t,\n    BoardStorage.BOARD_HASH,\n  );\n  return `organisationIdHash=${organisationIdHash}&boardIdHash=${boardIdHash}`;\n};\n\nconst isRunningInProduction = (): boolean =>\n  (process.env.NODE_ENV as Environment) === \"production\";\n\nconst ErrorReporter = (\n  target: any,\n  methodName: string,\n  descriptor: PropertyDescriptor,\n) => {\n  const originalMethod = descriptor.value;\n  const isAsync = originalMethod.constructor.name === \"AsyncFunction\";\n  const warningMessage = `Leaner Coffee Power-Up: error in ${methodName} (reported)`;\n\n  if (isAsync) {\n    descriptor.value = async function (...args: any[]) {\n      try {\n        return await originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  } else {\n    descriptor.value = function (...args: any[]) {\n      try {\n        return originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  }\n\n  return descriptor;\n};\n\nfunction ErrorReporterInjector<T extends { new (...args: any[]): object }>(\n  constructor: T,\n) {\n  // Get all prototype methods\n  const prototype = constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(prototype).filter(\n    (name) => typeof prototype[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  // Apply the ErrorReporter decorator to each method\n  methodNames.forEach((methodName) => {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, methodName);\n    if (descriptor && typeof descriptor.value === \"function\") {\n      const decoratedDescriptor = ErrorReporter(\n        prototype,\n        methodName,\n        descriptor,\n      );\n\n      // console.log(\n      //   `Decorating ${constructor.name}::${methodName} with ErrorReporter`,\n      // );\n      Object.defineProperty(prototype, methodName, decoratedDescriptor);\n    }\n  });\n\n  return constructor;\n}\n\nexport {\n  getTagsForReporting,\n  isRunningInProduction,\n  ErrorReporter,\n  ErrorReporterInjector,\n};\n","const bindAll = (classInstance: any) => {\n  const p = classInstance.constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(p).filter(\n    (name) => typeof p[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  methodNames.forEach(\n    (methodName) => (p[methodName] = p[methodName].bind(classInstance)),\n  );\n};\n\nexport { bindAll };\n","import { Trello } from \"../types/TrelloPowerUp\";\nimport { ErrorReporterInjector } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\n\n@ErrorReporterInjector\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(\n    scope: Trello.PowerUp.Scope = \"member\",\n    visibility: Trello.PowerUp.Visibility = \"private\",\n  ) {\n    Object.assign(this, { scope, visibility });\n    bindAll(this);\n  }\n\n  canWrite(t: Trello.PowerUp.HostHandlers): boolean {\n    return this.scope === \"member\" || t.memberCanWriteToModel(this.scope);\n  }\n\n  static async getMemberType(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    const board = await t.board(\"memberships\");\n    const currentMember = await t.member(\"id\");\n    const myMembership = board.memberships.find(\n      (m) => m.idMember === currentMember.id,\n    );\n    return myMembership ? myMembership.memberType : \"unknown\";\n  }\n\n  read<T>(\n    t: Trello.PowerUp.HostHandlers | Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<T> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  async write(\n    t: Trello.PowerUp.HostHandlers | Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    value: any,\n    cardId?: string,\n  ): Promise<void> {\n    if (!(\"memberCanWriteToModel\" in t)) {\n      window.Sentry.addBreadcrumb({\n        category: \"database\",\n        message: `Unknown permissions when trying to save \"${key}\" to the \"${this.scope}\" ${this.visibility} scope\"`,\n        level: \"warning\",\n      });\n    }\n\n    if (!(\"memberCanWriteToModel\" in t) || this.canWrite(t)) {\n      await t.set(cardId ?? this.scope, this.visibility, key, value);\n    } else {\n      window.Sentry.captureException(new Error(\"Error while editing scope\"), {\n        contexts: {\n          WriteOperation: {\n            scope: this.scope,\n            visibility: this.visibility,\n            key: key,\n            hasCardId: !!cardId,\n            memberType: await Storage.getMemberType(t),\n          },\n        },\n      });\n    }\n  }\n\n  async writeMultiple(\n    t: Trello.PowerUp.HostHandlers | Trello.PowerUp.AnonymousHostHandlers,\n    entries: {\n      [key: string]: any;\n    },\n    cardId?: string,\n  ): Promise<void> {\n    if (!(\"memberCanWriteToModel\" in t)) {\n      window.Sentry.addBreadcrumb({\n        category: \"database\",\n        message: `Unknown permissions when trying to save \"${Object.keys(entries).join(\", \")}\" to the \"${this.scope}\" ${this.visibility} scope`,\n        level: \"warning\",\n      });\n    }\n\n    if (!(\"memberCanWriteToModel\" in t) || this.canWrite(t)) {\n      await t.set(cardId ?? this.scope, this.visibility, entries);\n    } else {\n      window.Sentry.captureException(new Error(\"Error while editing scope\"), {\n        contexts: {\n          WriteOperation: {\n            scope: this.scope,\n            visibility: this.visibility,\n            key: Object.keys(entries),\n            hasCardId: !!cardId,\n            memberType: await Storage.getMemberType(t),\n          },\n        },\n      });\n    }\n  }\n\n  async delete(\n    t: Trello.PowerUp.HostHandlers | Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): Promise<void> {\n    if (!(\"memberCanWriteToModel\" in t)) {\n      window.Sentry.addBreadcrumb({\n        category: \"database\",\n        message: `Unknown permissions when trying to save \"${key}\" to the \"${this.scope}\" ${this.visibility} scope\"`,\n        level: \"warning\",\n      });\n    }\n\n    if (!(\"memberCanWriteToModel\" in t) || this.canWrite(t)) {\n      return t.remove(cardId ?? this.scope, this.visibility, key);\n    } else {\n      window.Sentry.captureException(new Error(\"Error while editing scope\"), {\n        contexts: {\n          DeleteOperation: {\n            scope: this.scope,\n            visibility: this.visibility,\n            key: key,\n            hasCardId: !!cardId,\n            memberType: await Storage.getMemberType(t),\n          },\n        },\n      });\n    }\n  }\n\n  async deleteMultiple(\n    t: Trello.PowerUp.HostHandlers | Trello.PowerUp.AnonymousHostHandlers,\n    entries: string[],\n    cardId?: string,\n  ): Promise<void> {\n    if (!(\"memberCanWriteToModel\" in t)) {\n      window.Sentry.addBreadcrumb({\n        category: \"database\",\n        message: `Unknown permissions when trying to save \"${Object.keys(entries).join(\", \")}\" to the \"${this.scope}\" ${this.visibility} scope`,\n        level: \"warning\",\n      });\n    }\n\n    if (!(\"memberCanWriteToModel\" in t) || this.canWrite(t)) {\n      return t.remove(cardId ?? this.scope, this.visibility, entries);\n    } else {\n      window.Sentry.captureException(new Error(\"Error while editing scope\"), {\n        contexts: {\n          DeleteOperation: {\n            scope: this.scope,\n            visibility: this.visibility,\n            key: Object.keys(entries),\n            hasCardId: !!cardId,\n            memberType: await Storage.getMemberType(t),\n          },\n        },\n      });\n    }\n  }\n}\n\nexport default Storage;\n","import Storage from \"./Storage\";\n\nclass BoardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_CARD_ID = \"leancoffeeDiscussionCardId\";\n  static DISCUSSION_STARTED_AT = \"leancoffeeDiscussionStartedAt\";\n  static DISCUSSION_PREVIOUS_ELAPSED = \"leancoffeeDiscussionPreviousElapsed\";\n  static DISCUSSION_INTERVAL_ID = \"leancoffeeDiscussionIntervalId\";\n  static POWER_UP_INSTALLATION_DATE = \"powerUpInstallationDate\";\n  static ORGANISATION_HASH = \"organisationHash\";\n  static BOARD_HASH = \"boardHash\";\n\n  constructor() {\n    super(\"board\", \"shared\");\n  }\n}\n\nexport default BoardStorage;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport { ErrorReporterInjector, isRunningInProduction } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\n\nexport interface LeanCoffeePopupBaseParams {\n  w: Window;\n}\n\n@ErrorReporterInjector\nclass LeanCoffeePopupBase {\n  w: Window;\n  t: Trello.PowerUp.IFrame;\n  boardStorage: BoardStorage;\n\n  constructor({ w }: LeanCoffeePopupBaseParams) {\n    this.boardStorage = new BoardStorage();\n    this.t = w.TrelloPowerUp.iframe({\n      helpfulStacks: !isRunningInProduction(),\n    });\n    this.w = w;\n    bindAll(this);\n\n    Promise.all([\n      this.boardStorage.read<string>(this.t, BoardStorage.BOARD_HASH),\n      this.boardStorage.read<string>(this.t, BoardStorage.ORGANISATION_HASH),\n    ]).then(([organisationIdHash, boardIdHash]) => {\n      if (this.w.Sentry) {\n        this.w.Sentry.onLoad(async () => {\n          this.w.Sentry.setTags({\n            organisationIdHash: organisationIdHash,\n            boardIdHash: boardIdHash,\n          });\n        });\n      }\n    });\n  }\n\n  toggleFields(cssSelector: string, key: string): void {\n    const elements: NodeListOf<HTMLElement> =\n      this.w.document.querySelectorAll(cssSelector);\n\n    elements.forEach((message: HTMLElement) => {\n      const shouldBeDisplayed = message.dataset.i18nId === key;\n\n      message.style.display = shouldBeDisplayed ? \"block\" : \"none\";\n    });\n  }\n\n  initLocaliser(callback: () => void): void {\n    this.w.TrelloPowerUp.util\n      .initLocalizer(this.w.locale, {\n        localization: this.t.arg(\"localization\"),\n      })\n      .then(callback);\n  }\n}\n\nexport default LeanCoffeePopupBase;\n","import { LeanCoffeePopupOngoingOrPaused } from \"./LeanCoffeePopupOngoingOrPaused\";\n\nconst instance = new LeanCoffeePopupOngoingOrPaused({ w: window });\ninstance.init();\n","import LeanCoffeePopupBase from \"./LeanCoffeePopupBase\";\n\nexport class LeanCoffeePopupOngoingOrPaused extends LeanCoffeePopupBase {\n  currentCardBeingDiscussed: string;\n  currentDiscussionStatus: string;\n  isRunning: boolean;\n  startButton: HTMLElement;\n\n  init(): void {\n    this.currentCardBeingDiscussed = this.t.arg(\"currentCardBeingDiscussed\");\n    this.currentDiscussionStatus = this.t.arg(\"currentDiscussionStatus\");\n    this.isRunning = this.currentDiscussionStatus === \"ONGOING\";\n\n    this.startButton = this.w.document.getElementById(\"start-button\");\n    this.startButton.addEventListener(\"click\", async () => {\n      await this.t.notifyParent(\"done\");\n      await this.t.closePopup();\n    });\n\n    this.prepareLocalisation();\n    this.initLocaliser(this.onLocalised);\n  }\n\n  prepareLocalisation(): void {\n    const messageElements: NodeListOf<HTMLElement> =\n      this.w.document.querySelectorAll(\".message\");\n    messageElements.forEach((elem: HTMLElement) => {\n      elem.dataset.i18nArgs = JSON.stringify({\n        card: this.currentCardBeingDiscussed,\n      });\n    });\n  }\n\n  async onLocalised(): Promise<void> {\n    this.toggleFields(\n      \".message\",\n      this.isRunning ? \"ongoingRunning\" : \"ongoingOnHold\",\n    );\n    this.t.localizeNode(document.body);\n    await this.t.sizeTo(\"body\");\n  }\n}\n"],"names":["ErrorReporter","target","methodName","descriptor","originalMethod","value","isAsync","constructor","name","warningMessage","async","args","apply","this","error","console","warn","window","Sentry","captureException","ErrorReporterInjector","prototype","Object","getOwnPropertyNames","filter","forEach","getOwnPropertyDescriptor","decoratedDescriptor","defineProperty","bindAll","classInstance","p","bind","Storage","scope","visibility","assign","canWrite","t","memberCanWriteToModel","getMemberType","board","currentMember","member","myMembership","memberships","find","m","idMember","id","memberType","read","key","cardId","get","write","addBreadcrumb","category","message","level","set","Error","contexts","WriteOperation","hasCardId","writeMultiple","entries","keys","join","remove","DeleteOperation","deleteMultiple","super","DISCUSSION_STATUS","DISCUSSION_CARD_ID","DISCUSSION_STARTED_AT","DISCUSSION_PREVIOUS_ELAPSED","DISCUSSION_INTERVAL_ID","POWER_UP_INSTALLATION_DATE","ORGANISATION_HASH","BOARD_HASH","LeanCoffeePopupBase","w","boardStorage","TrelloPowerUp","iframe","helpfulStacks","Promise","all","then","organisationIdHash","boardIdHash","onLoad","setTags","toggleFields","cssSelector","document","querySelectorAll","shouldBeDisplayed","dataset","i18nId","style","display","initLocaliser","callback","util","initLocalizer","locale","localization","arg","init","currentCardBeingDiscussed","currentDiscussionStatus","isRunning","startButton","getElementById","addEventListener","notifyParent","closePopup","prepareLocalisation","onLocalised","elem","i18nArgs","JSON","stringify","card","localizeNode","body","sizeTo"],"sourceRoot":""}