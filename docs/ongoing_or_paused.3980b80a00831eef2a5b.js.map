{"version":3,"file":"ongoing_or_paused.3980b80a00831eef2a5b.js","mappings":"yBAMO,MAAMA,EAIX,WAAAC,EAAY,EAAEC,IAOd,KAAAC,sBAAwB,KACrB,EAPDC,KAAKC,EAAIH,EAAEI,cAAcC,OAAO,CAC9BC,eAAgBJ,KAAKD,0BAEvBC,KAAKF,EAAIA,CACX,CAKA,YAAAO,CAAaC,EAAqBC,GAE9BP,KAAKF,EAAEU,SAASC,iBAAiBH,GAE1BI,SAASC,IAChB,MAAMC,EAAoBD,EAAQE,QAAQC,SAAWP,EAErDI,EAAQI,MAAMC,QAAUJ,EAAoB,QAAU,MAAM,GAEhE,CAEA,aAAAK,CAAcC,GACZlB,KAAKF,EAAEI,cAAciB,KAClBC,cAAcpB,KAAKF,EAAEuB,OAAQ,CAC5BC,aAActB,KAAKC,EAAEsB,IAAI,kBAE1BC,KAAKN,EACV,ECnCF,MAAMO,EAAW,ICAV,cAA6C7B,EAApD,c,oBA+BE,KAAA8B,YAAcC,UACZ3B,KAAKK,aACH,WACAL,KAAK4B,UAAY,iBAAmB,iBAEtC5B,KAAKC,EAAE4B,aAAarB,SAASsB,YACvB9B,KAAKC,EAAE8B,OAAO,OAAO,CAE/B,CAjCE,IAAAC,GACEhC,KAAKiC,0BAA4BjC,KAAKC,EAAEsB,IAAI,6BAC5CvB,KAAKkC,wBAA0BlC,KAAKC,EAAEsB,IAAI,2BAC1CvB,KAAK4B,UAA6C,YAAjC5B,KAAKkC,wBAEtBlC,KAAKmC,YAAcnC,KAAKF,EAAEU,SAAS4B,eAAe,gBAClDpC,KAAKmC,YAAYE,iBAAiB,SAASV,gBACnC3B,KAAKC,EAAEqC,aAAa,cACpBtC,KAAKC,EAAEsC,YAAY,IAG3BvC,KAAKwC,sBACLxC,KAAKiB,cAAcjB,KAAK0B,YAC1B,CAEA,mBAAAc,GAEIxC,KAAKF,EAAEU,SAASC,iBAAiB,YACnBC,SAAS+B,IACvBA,EAAK5B,QAAQ6B,SAAWC,KAAKC,UAAU,CACrCC,KAAM7C,KAAKiC,2BACX,GAEN,GD7BkD,CAAEnC,EAAGgD,SACzDrB,EAASO,M","sources":["webpack://leancoffee-powerup/./src/popups/LeanCoffeePopupBase.ts","webpack://leancoffee-powerup/./src/popups/ongoing_or_paused.ts","webpack://leancoffee-powerup/./src/popups/LeanCoffeePopupOngoingOrPaused.ts"],"sourcesContent":["import { Trello } from \"../types/TrelloPowerUp\";\n\nexport interface LeanCoffeePopupBaseParams {\n  w: Window;\n}\n\nexport class LeanCoffeePopupBase {\n  w: Window;\n  t: Trello.PowerUp.IFrame;\n\n  constructor({ w }: LeanCoffeePopupBaseParams) {\n    this.t = w.TrelloPowerUp.iframe({\n      helpfulStacks: !this.isRunningInProduction(),\n    });\n    this.w = w;\n  }\n\n  isRunningInProduction = (): boolean =>\n    (process.env.NODE_ENV as Environment) === \"production\";\n\n  toggleFields(cssSelector: string, key: string): void {\n    const elements: NodeListOf<HTMLElement> =\n      this.w.document.querySelectorAll(cssSelector);\n\n    elements.forEach((message: HTMLElement) => {\n      const shouldBeDisplayed = message.dataset.i18nId === key;\n\n      message.style.display = shouldBeDisplayed ? \"block\" : \"none\";\n    });\n  }\n\n  initLocaliser(callback: () => void): void {\n    this.w.TrelloPowerUp.util\n      .initLocalizer(this.w.locale, {\n        localization: this.t.arg(\"localization\"),\n      })\n      .then(callback);\n  }\n}\n","import { LeanCoffeePopupOngoingOrPaused } from \"./LeanCoffeePopupOngoingOrPaused\";\n\nconst instance = new LeanCoffeePopupOngoingOrPaused({ w: window });\ninstance.init();\n","import { LeanCoffeePopupBase } from \"./LeanCoffeePopupBase\";\n\nexport class LeanCoffeePopupOngoingOrPaused extends LeanCoffeePopupBase {\n  currentCardBeingDiscussed: string;\n  currentDiscussionStatus: string;\n  isRunning: boolean;\n  startButton: HTMLElement;\n\n  init(): void {\n    this.currentCardBeingDiscussed = this.t.arg(\"currentCardBeingDiscussed\");\n    this.currentDiscussionStatus = this.t.arg(\"currentDiscussionStatus\");\n    this.isRunning = this.currentDiscussionStatus === \"ONGOING\";\n\n    this.startButton = this.w.document.getElementById(\"start-button\");\n    this.startButton.addEventListener(\"click\", async () => {\n      await this.t.notifyParent(\"done\");\n      await this.t.closePopup();\n    });\n\n    this.prepareLocalisation();\n    this.initLocaliser(this.onLocalised);\n  }\n\n  prepareLocalisation(): void {\n    const messageElements: NodeListOf<HTMLElement> =\n      this.w.document.querySelectorAll(\".message\");\n    messageElements.forEach((elem: HTMLElement) => {\n      elem.dataset.i18nArgs = JSON.stringify({\n        card: this.currentCardBeingDiscussed,\n      });\n    });\n  }\n\n  onLocalised = async (): Promise<void> => {\n    this.toggleFields(\n      \".message\",\n      this.isRunning ? \"ongoingRunning\" : \"ongoingOnHold\",\n    );\n    this.t.localizeNode(document.body);\n    await this.t.sizeTo(\"body\");\n  };\n}\n"],"names":["LeanCoffeePopupBase","constructor","w","isRunningInProduction","this","t","TrelloPowerUp","iframe","helpfulStacks","toggleFields","cssSelector","key","document","querySelectorAll","forEach","message","shouldBeDisplayed","dataset","i18nId","style","display","initLocaliser","callback","util","initLocalizer","locale","localization","arg","then","instance","onLocalised","async","isRunning","localizeNode","body","sizeTo","init","currentCardBeingDiscussed","currentDiscussionStatus","startButton","getElementById","addEventListener","notifyParent","closePopup","prepareLocalisation","elem","i18nArgs","JSON","stringify","card","window"],"sourceRoot":""}