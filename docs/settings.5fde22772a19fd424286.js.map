{"version":3,"file":"settings.5fde22772a19fd424286.js","mappings":"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","sources":["webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/storage/CardStorage.ts","webpack://leancoffee-powerup/./src/utils/Debug.ts","webpack://leancoffee-powerup/./src/LeanCoffeeBase.ts","webpack://leancoffee-powerup/./src/utils/I18nConfig.ts","webpack://leancoffee-powerup/./src/LeanCoffeeSettings.ts","webpack://leancoffee-powerup/./src/settings.ts"],"sourcesContent":["import { Trello } from '../types/TrelloPowerUp';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(scope: Trello.PowerUp.Scope = 'member', visibility: Trello.PowerUp.Visibility = 'private') {\n    Object.assign(this, { scope, visibility });\n  }\n\n  read(t: Trello.PowerUp.IFrame, key: string, cardId?: string): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  write(t: Trello.PowerUp.IFrame, key: string, value: any, cardId?: string): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(t: Trello.PowerUp.IFrame, entries: {\n    [ key: string]: any;\n  }, cardId?: string): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(t: Trello.PowerUp.IFrame, key: string, cardId?: string): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(t: Trello.PowerUp.IFrame, entries: string[], cardId?: string): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import { Trello } from '../types/TrelloPowerUp';\nimport Storage from './Storage';\n\nclass BoardStorage extends Storage {\n    static DISCUSSION_STATUS = 'leancoffeeDiscussionStatus';\n    static DISCUSSION_CARD_ID = 'leancoffeeDiscussionCardId';\n    static DISCUSSION_STARTED_AT = 'leancoffeeDiscussionStartedAt';\n    static DISCUSSION_PREVIOUS_ELAPSED = 'leancoffeeDiscussionPreviousElapsed';\n    static DISCUSSION_INTERVAL_ID = 'leancoffeeDiscussionIntervalId';\n    static POWER_UP_VERSION = 'powerUpVersion';\n\n    constructor() {\n      super('board', 'shared');\n    }\n\n    async getDiscussionStatus(t: Trello.PowerUp.IFrame): Promise<DiscussionStatus> {\n      return super.read(t, BoardStorage.DISCUSSION_STATUS);\n    }\n\n    async getDiscussionCardId(t: Trello.PowerUp.IFrame): Promise<string> {\n      return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n    }\n\n    async getDiscussionStartedAt(t: Trello.PowerUp.IFrame): Promise<DiscussionStartedAt> {\n      return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n    }\n\n    async getDiscussionPreviousElapsed(t: Trello.PowerUp.IFrame): Promise<DiscussionPreviousElapsed> {\n      return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n    }\n\n    async getDiscussionIntervalId(t: Trello.PowerUp.IFrame): Promise<DiscussionIntervalId> {\n      return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n    }\n\n    async getPowerUpVersion(t: Trello.PowerUp.IFrame): Promise<string> {\n      return super.read(t, BoardStorage.POWER_UP_VERSION);\n    }\n\n    setPowerUpVersion(t: Trello.PowerUp.IFrame, version: string): PromiseLike<void> {\n      return super.write(t, BoardStorage.POWER_UP_VERSION, version);\n    }\n}\n\nexport default BoardStorage;\n","import { Trello } from '../types/TrelloPowerUp';\nimport Storage from './Storage';\n\nclass CardStorage extends Storage {\n  static DISCUSSION_STATUS = 'leancoffeeDiscussionStatus';\n  static DISCUSSION_ELAPSED = 'leancoffeeDiscussionElapsed';\n  static DISCUSSION_THUMBS = 'leancoffeeDiscussionThumbs';\n  static VOTES = 'leancoffeeVotes';\n  static DISCUSSION_BUTTON_LABEL = 'discussionButtonLabel';\n\n  constructor() {\n    super('card', 'shared');\n  }\n\n  getDiscussionStatus(t: Trello.PowerUp.IFrame): PromiseLike<DiscussionStatus> {\n    return super.read(t, CardStorage.DISCUSSION_STATUS);\n  }\n\n  getDiscussionElapsed(t: Trello.PowerUp.IFrame): PromiseLike<number> {\n    return super.read(t, CardStorage.DISCUSSION_ELAPSED);\n  }\n\n  getDiscussionThumbs(t: Trello.PowerUp.IFrame): PromiseLike<Thumbs> {\n    return super.read(t, CardStorage.DISCUSSION_THUMBS);\n  }\n\n  getDiscussionButtonLabel(t: Trello.PowerUp.IFrame): PromiseLike<string> {\n    return super.read(t, CardStorage.DISCUSSION_BUTTON_LABEL);\n  }\n\n  saveDiscussionStatus(t: Trello.PowerUp.IFrame, newStatus: DiscussionStatus, cardId?: string): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_STATUS, newStatus, cardId);\n  }\n\n  saveDiscussionElapsed(t: Trello.PowerUp.IFrame, newElapsed: number, cardId?: string): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_ELAPSED, newElapsed, cardId);\n  }\n\n  saveDiscussionThumbs(t: Trello.PowerUp.IFrame, newThumbs: Thumbs): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_THUMBS, newThumbs);\n  }\n\n  saveVotes(t: Trello.PowerUp.IFrame, newVotes: Votes): PromiseLike<void> {\n    return super.write(t, CardStorage.VOTES, newVotes);\n  }\n\n  deleteVotes(t: Trello.PowerUp.IFrame): PromiseLike<void> {\n    return super.delete(t, CardStorage.VOTES);\n  }\n\n  saveDiscussionButtonLabel(t: Trello.PowerUp.IFrame, newLabel?: string): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_BUTTON_LABEL, newLabel);\n  }\n\n  deleteDiscussionThumbs(t: Trello.PowerUp.IFrame): PromiseLike<void> {\n    return super.delete(t, CardStorage.DISCUSSION_THUMBS);\n  }\n}\n\nexport default CardStorage;\n","import { Trello } from '../types/TrelloPowerUp';\n\nimport BoardStorage from '../storage/BoardStorage';\nimport CardStorage from '../storage/CardStorage';\n\n/* eslint-disable no-console */\nclass Debug {\n  static async showData(t: Trello.PowerUp.IFrame): Promise<void> {\n    console.groupCollapsed('Current context');\n    console.log(JSON.stringify(t.getContext(), null, 2));\n    console.groupEnd();\n\n    const boardData = await t.getAll();\n    console.groupCollapsed('Board data');\n    console.log(JSON.stringify(boardData, null, 2));\n    console.groupEnd();\n\n    const cards = await t.cards('id', 'name');\n    const cardsDataPromise = cards.map(async (card) => {\n      const cardData = await t.get(card.id, 'shared');\n      return { name: card.name, ...cardData };\n    });\n\n    const cardsData = await Promise.all(cardsDataPromise);\n    cardsData.forEach((card) => {\n      console.groupCollapsed('Card data');\n      // console.log(card);\n      console.log(JSON.stringify(card, null, 2));\n      console.groupEnd();\n    });\n  }\n\n  static async wipeData(t: Trello.PowerUp.IFrame, cardStorage: CardStorage, boardStorage: BoardStorage): Promise<void> {\n    await boardStorage.deleteMultiple(t, [\n      BoardStorage.DISCUSSION_STATUS,\n      BoardStorage.DISCUSSION_CARD_ID,\n      BoardStorage.DISCUSSION_STARTED_AT,\n      BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n      BoardStorage.DISCUSSION_INTERVAL_ID\n    ]);\n\n    const cards = await t.cards('all');\n\n    Promise.all(cards.map(async (card) => {\n      await cardStorage.deleteMultiple(t, [\n        CardStorage.DISCUSSION_STATUS,\n        CardStorage.DISCUSSION_ELAPSED,\n        CardStorage.DISCUSSION_THUMBS,\n        CardStorage.VOTES\n      ], card.id);\n    })).then(() => {\n      console.log('Data wipe finished');\n    });\n  }\n}\n\nexport default Debug;\n","import { Trello } from './types/TrelloPowerUp';\nimport BoardStorage from './storage/BoardStorage';\nimport CardStorage from './storage/CardStorage';\n\nexport interface LeanCoffeeBaseParams {\n  w: Window;\n  config: Config;\n  t?: Trello.PowerUp | Trello.PowerUp.IFrame;\n}\n\nexport class LeanCoffeeBase {\n  w: Window;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n  config: Config;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    this.w = w;\n    this.config = config;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n  }\n\n  isRunningInProduction = (): boolean => (process.env.NODE_ENV as Environment) === 'production';\n}\n","import { Trello } from '../types/TrelloPowerUp';\n\nconst config: Config = process.env.CONFIG as unknown as Config;\nconst { supportedLocales } = config[process.env.NODE_ENV as Environment];\n\nexport const I18nConfig: Trello.PowerUp.Localization = {\n  defaultLocale: 'en',\n  supportedLocales,\n  resourceUrl: '/i18n/{locale}.json'\n};\n","import { Trello } from './types/TrelloPowerUp';\nimport Debug from './utils/Debug';\nimport { LeanCoffeeBase, LeanCoffeeBaseParams } from './LeanCoffeeBase';\nimport { I18nConfig } from './utils/I18nConfig';\n\nclass LeanCoffeeSettings extends LeanCoffeeBase {\n  t: Trello.PowerUp.IFrame;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    super({ w, config });\n    this.t = w.TrelloPowerUp.iframe({ localization: I18nConfig, helpfulStacks: !this.isRunningInProduction() });\n  }\n\n  init(): void {\n    if (!this.isRunningInProduction()) {\n      (this.w.document.querySelector('.dev-only') as HTMLElement).style.display = 'block';\n      this.w.document.getElementById('showData').addEventListener('click', this.showData.bind(this));\n      this.w.document.getElementById('wipeData').addEventListener('click', this.wipeData.bind(this));\n    }\n\n    this.t.render(() => {\n      this.t.localizeNode(document.body);\n      this.t.sizeTo('#leanCoffeeSettingsForm');\n    });\n  }\n\n  showData = async (evt: Event): Promise<void> => {\n    evt.preventDefault();\n    if (this.isRunningInProduction()) { return; }\n\n    await Debug.showData(this.t);\n  };\n\n  wipeData = async (evt: Event): Promise<void> => {\n    evt.preventDefault();\n    if (this.isRunningInProduction()) { return; }\n\n    await Debug.wipeData(this.t, this.cardStorage, this.boardStorage);\n  };\n}\n\nexport default LeanCoffeeSettings;\n","import LeanCoffeeSettings from './LeanCoffeeSettings';\n\nconst config: Config = process.env.CONFIG as unknown as Config;\n\nconst settings = new LeanCoffeeSettings({\n  w: window,\n  config,\n});\nsettings.init();\n"],"names":["constructor","scope","visibility","Object","assign","this","read","t","key","cardId","get","write","value","set","writeMultiple","entries","remove","deleteMultiple","BoardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpVersion","POWER_UP_VERSION","setPowerUpVersion","version","CardStorage","getDiscussionElapsed","DISCUSSION_ELAPSED","getDiscussionThumbs","DISCUSSION_THUMBS","getDiscussionButtonLabel","DISCUSSION_BUTTON_LABEL","saveDiscussionStatus","newStatus","saveDiscussionElapsed","newElapsed","saveDiscussionThumbs","newThumbs","saveVotes","newVotes","VOTES","deleteVotes","delete","saveDiscussionButtonLabel","newLabel","deleteDiscussionThumbs","showData","console","groupCollapsed","log","JSON","stringify","getContext","groupEnd","boardData","getAll","cardsDataPromise","cards","map","async","card","cardData","id","name","Promise","all","forEach","wipeData","cardStorage","boardStorage","then","LeanCoffeeBase","w","config","isRunningInProduction","supportedLocales","I18nConfig","defaultLocale","resourceUrl","evt","preventDefault","TrelloPowerUp","iframe","localization","helpfulStacks","init","document","querySelector","style","display","getElementById","addEventListener","bind","render","localizeNode","body","sizeTo","window"],"sourceRoot":""}