{"version":3,"file":"index.37ed4f101f575d618862.js","mappings":"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","sources":["webpack://leancoffee-powerup/../node_modules/.pnpm/format-duration@3.0.2/node_modules/format-duration/format-duration.js","webpack://leancoffee-powerup/webpack/bootstrap","webpack://leancoffee-powerup/webpack/runtime/compat get default export","webpack://leancoffee-powerup/webpack/runtime/define property getters","webpack://leancoffee-powerup/webpack/runtime/hasOwnProperty shorthand","webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/CardStorage.ts","webpack://leancoffee-powerup/./src/utils/Analytics.ts","webpack://leancoffee-powerup/./src/utils/I18nConfig.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/LeanCoffeeBase.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardBadge.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardDetailBadge.ts","webpack://leancoffee-powerup/./src/badges/VotingCardBadge.ts","webpack://leancoffee-powerup/./src/badges/VotingCardDetailBadge.ts","webpack://leancoffee-powerup/./src/utils/Notifications.ts","webpack://leancoffee-powerup/./src/utils/Discussion.ts","webpack://leancoffee-powerup/./src/utils/Hashing.ts","webpack://leancoffee-powerup/./src/utils/UpdateChecker.ts","webpack://leancoffee-powerup/./src/utils/Voting.ts","webpack://leancoffee-powerup/./src/LeanCoffeePowerUp.ts","webpack://leancoffee-powerup/./src/CapabilityHandlers.ts","webpack://leancoffee-powerup/./src/index.ts"],"sourcesContent":["// adapted from https://github.com/sindresorhus/parse-ms.\n// moved to internal function because parse-ms is now pure ESM.\nfunction parseMs (ms) {\n  if (typeof ms !== 'number') {\n    throw new TypeError('Expected a number')\n  }\n\n  return {\n    days: Math.trunc(ms / 86400000),\n    hours: Math.trunc(ms / 3600000) % 24,\n    minutes: Math.trunc(ms / 60000) % 60,\n    seconds: Math.trunc(ms / 1000) % 60,\n    ms: Math.trunc(ms) % 1000\n  }\n}\n\n// adapted from https://github.com/rafaelrinaldi/add-zero.\n// moved to internal function b/c addZero is unmaintained (7+ years).\n// stripped out negative sign logic since we're already doing it elsewhere.\nfunction addZero (value, digits) {\n  digits = digits || 2\n\n  let str = value.toString()\n  let size = 0\n\n  size = digits - str.length + 1\n  str = new Array(size).join('0').concat(str)\n\n  return str\n}\n\nfunction getSign (duration, showMs) {\n  if (showMs) return duration < 0 ? '-' : ''\n  return duration <= -1000 ? '-' : ''\n}\n\n/**\n * Convert a number in milliseconds to a standard duration string.\n * @param {number} ms - duration in milliseconds\n * @param {object} options - formatDuration options object\n * @param {boolean} [options.leading=false] - add leading zero\n * @param {boolean} [options.milliseconds=false] - add milliseconds\n * @returns string - formatted duration string\n */\nfunction formatDuration (ms, options) {\n  const leading = options && options.leading\n  const showMs = options && options.ms\n  const unsignedMs = ms < 0 ? -ms : ms\n  const sign = getSign(ms, showMs)\n  const t = parseMs(unsignedMs)\n  const seconds = addZero(t.seconds)\n  let output = ''\n\n  if (t.days && !output) output = sign + t.days + ':' + addZero(t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (t.hours && !output) output = sign + (leading ? addZero(t.hours) : t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (!output) output = sign + (leading ? addZero(t.minutes) : t.minutes) + ':' + seconds\n\n  if (showMs) output += '.' + addZero(t.ms, 3)\n  return output\n}\n\nmodule.exports = formatDuration\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { Trello } from \"../types/TrelloPowerUp\";\n\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(\n    scope: Trello.PowerUp.Scope = \"member\",\n    visibility: Trello.PowerUp.Visibility = \"private\",\n  ) {\n    Object.assign(this, { scope, visibility });\n  }\n\n  read(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  write(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    value: any,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: {\n      [key: string]: any;\n    },\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: string[],\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass CardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_ELAPSED = \"leancoffeeDiscussionElapsed\";\n  static DISCUSSION_THUMBS = \"leancoffeeDiscussionThumbs\";\n  static VOTES = \"leancoffeeVotes\";\n  static DISCUSSION_BUTTON_LABEL = \"discussionButtonLabel\";\n\n  constructor() {\n    super(\"card\", \"shared\");\n  }\n\n  getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<DiscussionStatus> {\n    return super.read(t, CardStorage.DISCUSSION_STATUS);\n  }\n\n  getDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<number> {\n    return super.read(t, CardStorage.DISCUSSION_ELAPSED);\n  }\n\n  getDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<Thumbs> {\n    return super.read(t, CardStorage.DISCUSSION_THUMBS);\n  }\n\n  getDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<string> {\n    return super.read(t, CardStorage.DISCUSSION_BUTTON_LABEL);\n  }\n\n  saveDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newStatus: DiscussionStatus,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_STATUS, newStatus, cardId);\n  }\n\n  saveDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newElapsed: number,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_ELAPSED, newElapsed, cardId);\n  }\n\n  saveDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newThumbs: Thumbs,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_THUMBS, newThumbs);\n  }\n\n  saveVotes(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newVotes: Votes,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.VOTES, newVotes);\n  }\n\n  deleteVotes(t: Trello.PowerUp.AnonymousHostHandlers): PromiseLike<void> {\n    return super.delete(t, CardStorage.VOTES);\n  }\n\n  saveDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newLabel?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_BUTTON_LABEL, newLabel);\n  }\n\n  deleteDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<void> {\n    return super.delete(t, CardStorage.DISCUSSION_THUMBS);\n  }\n}\n\nexport default CardStorage;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nimport CustomPayload = umami.CustomPayload;\n\nconst sanitiseUrl = (urlString: string): string => {\n  const url = new URL(urlString);\n  return (\n    url.protocol +\n    url.hostname +\n    (url.port ? `:${url.port}` : \"\") +\n    url.pathname\n  );\n};\n\nconst beforeSend = (event: string, payload: CustomPayload): CustomPayload => {\n  return {\n    ...payload,\n    ...{\n      referrer: window.LeanerCoffeeAnalyticsReferrer,\n      hostname: window.LeanerCoffeeAnalyticsHostname,\n    },\n    url: sanitiseUrl(payload.url),\n  };\n};\n\nconst pageview = async (window: Window, eventData: umami.EventData = {}) => {\n  if (window.umami) {\n    await window.umami.track((props: any) => {\n      return { ...props, ...eventData };\n    });\n  } else {\n    console.warn(\"Umami not available for pageview\", eventData);\n  }\n};\n\nconst event = async (\n  window: Window,\n  eventName: string,\n  eventData?: umami.EventData,\n) => {\n  if (window.umami) {\n    await window.umami.track(eventName, eventData);\n  } else {\n    console.warn(\"Umami not available for event \" + eventName, eventData);\n  }\n};\n\nconst getOverrides = async (\n  boardStorage: BoardStorage,\n  t: Trello.PowerUp.AnonymousHostHandlers,\n): Promise<string> => {\n  const organisationIdHash = await boardStorage.getOrganisationIdHash(t);\n  const boardIdHash = await boardStorage.getBoardIdHash(t);\n  const referrer = encodeURIComponent(\"https://\" + organisationIdHash);\n  return `referrer=${referrer}&hostname=${boardIdHash}`;\n};\n\nconst Analytics = {\n  beforeSend,\n  pageview,\n  event,\n  getOverrides,\n};\n\nexport default Analytics;\n","import { Trello } from \"../types/TrelloPowerUp\";\n\nconst config: Config = process.env.CONFIG as unknown as Config;\nconst { supportedLocales } = config[process.env.NODE_ENV as Environment];\n\nexport const I18nConfig: Trello.PowerUp.Localization = {\n  defaultLocale: \"en\",\n  supportedLocales,\n  resourceUrl: \"/i18n/{locale}.json\",\n};\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass BoardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_CARD_ID = \"leancoffeeDiscussionCardId\";\n  static DISCUSSION_STARTED_AT = \"leancoffeeDiscussionStartedAt\";\n  static DISCUSSION_PREVIOUS_ELAPSED = \"leancoffeeDiscussionPreviousElapsed\";\n  static DISCUSSION_INTERVAL_ID = \"leancoffeeDiscussionIntervalId\";\n  static POWER_UP_VERSION = \"powerUpVersion\";\n  static POWER_UP_INSTALLATION_DATE = \"powerUpInstallationDate\";\n  static ORGANISATION_HASH = \"organisationHash\";\n  static BOARD_HASH = \"boardHash\";\n\n  constructor() {\n    super(\"board\", \"shared\");\n  }\n\n  async getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStatus> {\n    return super.read(t, BoardStorage.DISCUSSION_STATUS);\n  }\n\n  async getDiscussionCardId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n  }\n\n  async getDiscussionStartedAt(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStartedAt> {\n    return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n  }\n\n  async getDiscussionPreviousElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionPreviousElapsed> {\n    return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n  }\n\n  async getDiscussionIntervalId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionIntervalId> {\n    return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n  }\n\n  async getPowerUpVersion(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_VERSION);\n  }\n\n  setPowerUpVersion(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    version: string,\n  ): PromiseLike<void> {\n    return super.write(t, BoardStorage.POWER_UP_VERSION, version);\n  }\n\n  async getPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_INSTALLATION_DATE);\n  }\n\n  setPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    installationDate: string,\n  ): PromiseLike<void> {\n    return super.write(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n      installationDate,\n    );\n  }\n\n  async getOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.ORGANISATION_HASH);\n  }\n\n  async setOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.ORGANISATION_HASH, value);\n  }\n\n  async getBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.BOARD_HASH);\n  }\n\n  async setBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.BOARD_HASH, value);\n  }\n\n  async getInitialised(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<boolean> {\n    const installationDate = await super.read(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n    );\n    return !!installationDate;\n  }\n}\n\nexport default BoardStorage;\n","import BoardStorage from \"./storage/BoardStorage\";\nimport CardStorage from \"./storage/CardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\n\nexport interface LeanCoffeeBaseParams {\n  w: Window;\n  config: Config;\n  t?: Trello.PowerUp | Trello.PowerUp.IFrame;\n}\n\nexport class LeanCoffeeBase {\n  w: Window;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n  config: Config;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    this.w = w;\n    this.config = config;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n  }\n\n  isRunningInProduction = (): boolean =>\n    (process.env.NODE_ENV as Environment) === \"production\";\n}\n","import formatDuration from \"format-duration\";\n\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Discussion from \"../utils/Discussion\";\n\nclass ElapsedCardBadge implements ElapsedCardBadge {\n  discussion: Discussion;\n\n  constructor(discussion: Discussion) {\n    this.discussion = discussion;\n    this.render = this.render.bind(this);\n  }\n\n  getText = async (\n    t: Trello.PowerUp.IFrame,\n    elapsed: number,\n  ): Promise<string> => formatDuration(elapsed);\n\n  getColor = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.Colors> => {\n    const isOngoing = await this.discussion.isOngoingFor(t);\n\n    if (isOngoing) {\n      return \"orange\";\n    }\n\n    return (await this.discussion.isPausedFor(t)) ? \"yellow\" : \"light-gray\";\n  };\n\n  // Unable to use class properties here because in subclasses\n  // I need to user `super`, and it wouldn't be possible. See:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#accessing_super_in_class_field_declaration\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const elapsed = await this.discussion.getElapsed(t);\n    if (!elapsed) {\n      return null;\n    }\n\n    return {\n      text: await this.getText(t, elapsed),\n      color: await this.getColor(t),\n    };\n  }\n}\n\nexport default ElapsedCardBadge;\n","import ElapsedCardBadge from \"./ElapsedCardBadge\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass ElapsedCardDetailBadge extends ElapsedCardBadge {\n  render = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const discussionStatus: DiscussionStatus =\n      await this.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus !== \"ENDED\") {\n      return null;\n    }\n\n    const badge = (await super.render(t)) as Trello.PowerUp.CardDetailBadge;\n    badge.title = t.localizeKey(\"discussionDurationTitle\");\n    return badge;\n  };\n}\n\nexport default ElapsedCardDetailBadge;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Voting from \"../utils/Voting\";\n\nclass VotingCardBadge {\n  w: Window;\n  baseUrl: string;\n  voting: Voting;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n\n  constructor(\n    w: Window,\n    baseUrl: string,\n    voting: Voting,\n    boardStorage: BoardStorage,\n    cardStorage: CardStorage,\n  ) {\n    this.w = w;\n    this.baseUrl = baseUrl;\n    this.voting = voting;\n    this.boardStorage = boardStorage;\n    this.cardStorage = cardStorage;\n    this.render = this.render.bind(this);\n  }\n\n  getVoters = async (t: Trello.PowerUp.IFrame): Promise<{ text: string }[]> => {\n    const votes: Votes = (await this.voting.getVotes(t)) || {};\n\n    return Object.values(votes).reduce(\n      (knownVoters: { text: string; avatar: string }[], vote) => {\n        if (vote.username) {\n          knownVoters.push({\n            text: `${vote.fullName} (${vote.username})`,\n            avatar: vote.avatar,\n          });\n        }\n\n        return knownVoters;\n      },\n      [],\n    );\n  };\n\n  // Unable to use class properties here because in subclasses\n  // I need to user `super`, and it wouldn't be possible. See:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#accessing_super_in_class_field_declaration\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const voters = await this.getVoters(t);\n\n    if (!voters.length) {\n      return null;\n    }\n\n    const hasVoted = await this.voting.hasCurrentMemberVoted(t);\n\n    return {\n      text: voters.length.toString(),\n      color: hasVoted ? \"blue\" : null,\n      icon: `${this.baseUrl}/assets/powerup/${hasVoted ? \"heart_white.svg\" : \"heart.svg\"}`,\n    };\n  }\n}\n\nexport default VotingCardBadge;\n","import VotingCardBadge from \"./VotingCardBadge\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Analytics from \"../utils/Analytics\";\nimport { I18nConfig } from \"../utils/I18nConfig\";\n\nclass VotingCardDetailBadge extends VotingCardBadge {\n  clearVoters = async (t: Trello.PowerUp.IFrame) => {\n    const totalVoters = await this.getVoters(t);\n\n    await this.cardStorage.deleteVotes(t);\n    await Analytics.event(this.w, \"votesCleared\", {\n      total: totalVoters.length,\n    });\n  };\n\n  showVoters = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const items = await this.getVoters(t);\n\n    if (!items.length) {\n      return;\n    }\n\n    await t.popup({\n      title: t.localizeKey(\"voters\"),\n      url: `./voters.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n      args: {\n        items,\n        localization: I18nConfig,\n      },\n      callback: this.clearVoters,\n    });\n  };\n\n  render = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const commonData = (await super.render(\n      t,\n    )) as Trello.PowerUp.CardDetailBadge;\n\n    if (commonData) {\n      commonData.title = t.localizeKey(\"voters\");\n      delete commonData.icon;\n      commonData.callback = this.showVoters;\n    }\n\n    return commonData;\n  };\n}\n\nexport default VotingCardDetailBadge;\n","export type NotificationType = {\n  [key in \"audio\" | \"text\"]: string;\n};\n\nclass Notifications {\n  w: Window;\n  baseUrl: string;\n  audioContext: AudioContext;\n\n  constructor(window: Window, baseUrl: string) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n  }\n\n  async load(url: string): Promise<AudioBufferSourceNode> {\n    const remoteAudioFile = await fetch(url);\n    const audioData = await remoteAudioFile.arrayBuffer();\n    const audioBuffer = await this.audioContext.decodeAudioData(audioData);\n    const sourceNode = this.audioContext.createBufferSource();\n    sourceNode.buffer = audioBuffer;\n    sourceNode.connect(this.audioContext.destination);\n    return sourceNode;\n  }\n\n  async play(type: NotificationType): Promise<void> {\n    this.audioContext =\n      this.audioContext || new (AudioContext || this.w.webkitAudioContext)();\n    const audio = await this.load(`${this.baseUrl}/${type.audio}`);\n    audio.start();\n  }\n\n  open(type: NotificationType, cardName: string): void {\n    new Notification(cardName, {\n      body: type.text,\n      icon: `${this.baseUrl}/assets/timer.png`,\n    });\n  }\n\n  show(type: NotificationType, cardName: string): void {\n    if (!(\"Notification\" in this.w) || Notification.permission === \"denied\") {\n      return;\n    }\n\n    if (Notification.permission === \"granted\") {\n      this.open(type, cardName);\n    } else {\n      Notification.requestPermission((permission) => {\n        if (permission === \"granted\") {\n          this.open(type, cardName);\n        }\n      });\n    }\n  }\n}\n\nexport default Notifications;\n","import Analytics from \"./Analytics\";\nimport Notifications, { NotificationType } from \"./Notifications\";\nimport BoardStorage from \"../storage/BoardStorage\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass Discussion {\n  w: Window;\n  p: Trello.PowerUp.Plugin;\n  baseUrl: string;\n  maxDiscussionDuration: number;\n  notifications: Notifications;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n\n  constructor(window: Window, baseUrl: string, maxDiscussionDuration: number) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n    this.notifications = new Notifications(this.w, this.baseUrl);\n    this.maxDiscussionDuration = maxDiscussionDuration;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n  }\n\n  init = (p: Trello.PowerUp.Plugin): void => {\n    this.p = p;\n  };\n\n  getElapsedNotification = (): NotificationType => ({\n    audio: \"assets/looking_down.mp3\",\n    text: this.p.localizeKey(\"elapsedNotification\"),\n  });\n\n  isOngoingOrPausedForAnotherCard = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<boolean> => {\n    const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n    return (\n      [\"ONGOING\", \"PAUSED\"].includes(boardStatus) &&\n      cardId !== t.getContext().card\n    );\n  };\n\n  hasEverBeenDiscussed = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus !== undefined;\n  };\n\n  hasNotBeenArchived = async (\n    t: Trello.PowerUp.IFrame,\n    cardId: string,\n  ): Promise<boolean> => {\n    const allCards = await t.cards(\"id\", \"name\");\n    return !!allCards.find((card) => card.id === cardId);\n  };\n\n  isOngoingFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === \"ONGOING\";\n  };\n\n  isPausedFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === \"PAUSED\";\n  };\n\n  getElapsed = (t: Trello.PowerUp.IFrame): PromiseLike<number> =>\n    this.cardStorage.getDiscussionElapsed(t);\n\n  updateElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const elapsed = Date.now() - startedAt;\n\n    await this.saveElapsed(t);\n\n    if (elapsed > this.maxDiscussionDuration) {\n      await this.pause(t, true);\n      await Analytics.event(this.w, \"discussionStatusChanged\", {\n        newStatus: \"ended\",\n      });\n    }\n  };\n\n  saveElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const previousElapsed =\n      (await this.boardStorage.getDiscussionPreviousElapsed(t)) || 0;\n    const elapsed = startedAt ? Date.now() - startedAt : 0;\n\n    await this.cardStorage.saveDiscussionElapsed(\n      t,\n      elapsed + previousElapsed,\n      cardId,\n    );\n  };\n\n  start = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: \"ONGOING\",\n      [BoardStorage.DISCUSSION_CARD_ID]: t.getContext().card,\n      [BoardStorage.DISCUSSION_STARTED_AT]: Date.now(),\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: setInterval(\n        this.updateElapsed,\n        5000,\n        t,\n      ),\n    });\n\n    await this.cardStorage.saveDiscussionStatus(t, \"ONGOING\");\n    await this.cardStorage.deleteDiscussionThumbs(t);\n  };\n\n  pause = async (t: Trello.PowerUp.IFrame, notify = false): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const cardName = (await t.cards(\"id\", \"name\")).find(\n      (card) => card.id === cardId,\n    ).name;\n\n    clearInterval(intervalId);\n\n    await this.cardStorage.saveDiscussionStatus(t, \"PAUSED\");\n    await this.saveElapsed(t);\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: \"PAUSED\",\n      [BoardStorage.DISCUSSION_STARTED_AT]: null,\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: null,\n    });\n\n    if (notify) {\n      const elapsedNotification = this.getElapsedNotification();\n      await this.notifications.play(elapsedNotification);\n      this.notifications.show(elapsedNotification, cardName);\n    }\n  };\n\n  end = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    clearInterval(intervalId);\n\n    try {\n      await this.cardStorage.saveDiscussionStatus(t, \"ENDED\", cardId);\n      await this.saveElapsed(t);\n      await this.cardStorage.deleteMultiple(\n        t,\n        [CardStorage.DISCUSSION_THUMBS],\n        cardId,\n      );\n      await this.boardStorage.deleteMultiple(t, [\n        BoardStorage.DISCUSSION_STATUS,\n        BoardStorage.DISCUSSION_CARD_ID,\n        BoardStorage.DISCUSSION_STARTED_AT,\n        BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n        BoardStorage.DISCUSSION_INTERVAL_ID,\n      ]);\n    } catch (err) {\n      throw new Error(\n        err instanceof Error && err.message\n          ? err.message\n          : \"Error while ending a discussion\",\n      );\n    }\n  };\n\n  reset = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (await this.hasEverBeenDiscussed(t)) {\n      await this.cardStorage.deleteMultiple(\n        t,\n        [\n          CardStorage.DISCUSSION_STATUS,\n          CardStorage.DISCUSSION_ELAPSED,\n          CardStorage.DISCUSSION_THUMBS,\n        ],\n        t.getContext().card,\n      );\n    }\n  };\n}\n\nexport default Discussion;\n","// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\nexport async function digestMessage(message: string) {\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\"); // convert bytes to hex string\n  return hashHex;\n}\n","import Analytics from \"./Analytics\";\nimport { I18nConfig } from \"./I18nConfig\";\nimport BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nconst LAST_UNCHECKED_VERSION = \"0.6.2\";\n\nclass UpdateChecker {\n  boardStorage: BoardStorage;\n  storedVersion: string;\n\n  constructor(storage: BoardStorage) {\n    this.boardStorage = storage;\n  }\n\n  hasBeenUpdated = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    this.storedVersion = await this.boardStorage.getPowerUpVersion(t);\n    return !this.storedVersion || this.storedVersion !== __BUILDTIME_VERSION__;\n  };\n\n  showMenu = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const storedVersion = await this.boardStorage.getPowerUpVersion(t);\n    return t.popup({\n      title: t.localizeKey(\"boardButtonPopupTitle\", {\n        oldVersion: storedVersion || LAST_UNCHECKED_VERSION,\n        newVersion: __BUILDTIME_VERSION__,\n      }),\n      url: `./release-notes.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n      args: { version: __BUILDTIME_VERSION__, localization: I18nConfig },\n      callback: this.storeNewVersion,\n      height: 65,\n    });\n  };\n\n  storeNewVersion = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.boardStorage.setPowerUpVersion(t, __BUILDTIME_VERSION__);\n  };\n}\n\nexport default UpdateChecker;\n","import CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass Voting {\n  cardStorage: CardStorage;\n\n  constructor() {\n    this.cardStorage = new CardStorage();\n  }\n\n  hasCurrentMemberVoted = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<boolean> => {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES);\n    if (!votes) {\n      return false;\n    }\n\n    const currentMember = t.getContext().member;\n    return !!votes[currentMember];\n  };\n\n  getVotes = async (t: Trello.PowerUp.IFrame): Promise<Votes> =>\n    this.cardStorage.read(t, CardStorage.VOTES);\n\n  countVotesByCard = async (\n    t: Trello.PowerUp.IFrame,\n    cardId: string,\n  ): Promise<number> => {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n\n    if (!votes) {\n      return 0;\n    }\n\n    return Object.keys(votes).filter((key) => votes[key]).length;\n  };\n\n  getMaxVotes = async (t: Trello.PowerUp.IFrame): Promise<number> => {\n    const currentList = await t.list(\"cards\");\n\n    // https://www.talcottridge.com/multi-voting-math-or-n3\n    return Math.ceil(currentList.cards.length / 3);\n  };\n\n  canCurrentMemberVote = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    if (await this.hasCurrentMemberVoted(t)) {\n      return true;\n    }\n\n    const currentList = await t.list(\"cards\");\n    const cardIds = currentList.cards.map((card) => card.id);\n    const currentMemberVotes = await this.countVotesByMember(t, cardIds);\n    const maxVotes = await this.getMaxVotes(t);\n\n    return currentMemberVotes < maxVotes;\n  };\n\n  countVotesByMember = async (\n    t: Trello.PowerUp.IFrame,\n    cardIds: string[],\n  ): Promise<number> => {\n    const listVotes: number[] = await Promise.all(\n      cardIds.map(async (cardId): Promise<number> => {\n        const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n        if (!votes) {\n          return 0;\n        }\n\n        const currentMember = t.getContext().member;\n        return votes[currentMember] ? 1 : 0;\n      }),\n    );\n\n    return listVotes.reduce((total, vote): number => total + vote, 0);\n  };\n}\n\nexport default Voting;\n","import { CapabilityHandlers } from \"./CapabilityHandlers\";\nimport { LeanCoffeeBase, LeanCoffeeBaseParams } from \"./LeanCoffeeBase\";\nimport ElapsedCardBadge from \"./badges/ElapsedCardBadge\";\nimport ElapsedCardDetailBadge from \"./badges/ElapsedCardDetailBadge\";\nimport VotingCardBadge from \"./badges/VotingCardBadge\";\nimport VotingCardDetailBadge from \"./badges/VotingCardDetailBadge\";\nimport BoardStorage from \"./storage/BoardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport Analytics from \"./utils/Analytics\";\nimport Discussion from \"./utils/Discussion\";\nimport { digestMessage } from \"./utils/Hashing\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\nimport UpdateChecker from \"./utils/UpdateChecker\";\nimport Voting from \"./utils/Voting\";\n\nclass LeanCoffeePowerUp extends LeanCoffeeBase {\n  t: Trello.PowerUp;\n  baseUrl: string;\n  discussion: Discussion;\n  voting: Voting;\n  elapsedCardBadge: ElapsedCardBadge;\n  elapsedCardDetailBadge: ElapsedCardDetailBadge;\n  votingCardBadge: VotingCardBadge;\n  votingCardDetailBadge: VotingCardDetailBadge;\n  updateChecker: UpdateChecker;\n  initialising: boolean = false;\n  intervalId: number;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    super({ w, config });\n    this.t = w.TrelloPowerUp;\n\n    const { hostname, port, defaultDuration } =\n      this.config[process.env.NODE_ENV as Environment];\n    this.baseUrl = `${hostname}${port ? `:${port}` : \"\"}`;\n\n    this.discussion = new Discussion(this.w, this.baseUrl, defaultDuration);\n    this.voting = new Voting();\n    this.updateChecker = new UpdateChecker(this.boardStorage);\n\n    this.elapsedCardBadge = new ElapsedCardBadge(this.discussion);\n    this.elapsedCardDetailBadge = new ElapsedCardDetailBadge(this.discussion);\n    this.votingCardBadge = new VotingCardBadge(\n      this.w,\n      this.baseUrl,\n      this.voting,\n      this.boardStorage,\n      this.cardStorage,\n    );\n    this.votingCardDetailBadge = new VotingCardDetailBadge(\n      this.w,\n      this.baseUrl,\n      this.voting,\n      this.boardStorage,\n      this.cardStorage,\n    );\n  }\n\n  handleVoting = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (!(await this.voting.canCurrentMemberVote(t))) {\n      return t.popup({\n        title: \"Leaner Coffee\",\n        url: `${this.baseUrl}/too_many_votes.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n        args: {\n          maxVotes: await this.voting.getMaxVotes(t),\n          localization: I18nConfig,\n        },\n        height: 98,\n      });\n    }\n\n    const votes = (await this.voting.getVotes(t)) || {};\n    const currentMember = await t.member(\n      \"id\",\n      \"username\",\n      \"fullName\",\n      \"avatar\",\n    );\n\n    let outcome: string;\n\n    if (votes[currentMember.id]) {\n      delete votes[currentMember.id];\n      outcome = \"removed\";\n    } else {\n      votes[currentMember.id] = {\n        username: currentMember.username,\n        fullName: currentMember.fullName,\n        avatar: currentMember.avatar, // currently unused\n      };\n      outcome = \"added\";\n    }\n\n    await this.cardStorage.saveVotes(t, votes);\n    await Analytics.event(this.w, \"voted\", { outcome: outcome });\n  };\n\n  stopAndStart = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await Analytics.event(this.w, \"discussionStatusOverridden\");\n\n    await this.discussion.end(t);\n    await Analytics.event(this.w, \"discussionStatusChanged\", {\n      newStatus: \"stopped\",\n    });\n\n    await this.discussion.start(t);\n    await Analytics.event(this.w, \"discussionStatusChanged\", {\n      newStatus: \"started\",\n    });\n  };\n\n  handleDiscussion = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (await this.discussion.isOngoingOrPausedForAnotherCard(t)) {\n      const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n      const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n      // https://github.com/tatablack/leaner-coffee-powerup/issues/12\n      if (await this.discussion.hasNotBeenArchived(t, cardId)) {\n        const allCards = await t.cards(\"id\", \"name\");\n        const cardBeingDiscussed = allCards.find((card) => card.id === cardId);\n\n        return t.popup({\n          callback: this.stopAndStart,\n          title: \"Leaner Coffee\",\n          url: `${this.baseUrl}/ongoing_or_paused.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n          args: {\n            currentCardBeingDiscussed: cardBeingDiscussed.name,\n            currentDiscussionStatus: boardStatus,\n            localization: I18nConfig,\n          },\n          height: 120,\n        });\n      }\n\n      console.warn(\n        `Card with id ${cardId} not found in current board, most likely archived. Cleaning up.`,\n      );\n\n      await Analytics.event(this.w, \"discussionMenuOpened\", {\n        status: \"ongoing other\",\n      });\n\n      await this.boardStorage.deleteMultiple(t, [\n        BoardStorage.DISCUSSION_STATUS,\n        BoardStorage.DISCUSSION_CARD_ID,\n        BoardStorage.DISCUSSION_STARTED_AT,\n        BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n        BoardStorage.DISCUSSION_INTERVAL_ID,\n      ]);\n    }\n\n    let items: Trello.PowerUp.PopupOptionsItem[] = [];\n    let status: string;\n\n    switch (true) {\n      case await this.discussion.isOngoingFor(t):\n        items = [\n          {\n            text: t.localizeKey(\"pauseTimer\", { symbol: \"❙ ❙\" }), // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"paused\",\n              });\n              await this.discussion.pause(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"pausingTimer\", { symbol: \"❙ ❙\" }), // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n              );\n            },\n          },\n          {\n            text: t.localizeKey(\"endDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"stopped\",\n              });\n              await this.discussion.end(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"endingDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n              );\n            },\n          },\n        ];\n        status = \"ongoing\";\n        break;\n      case await this.discussion.isPausedFor(t):\n        items = [\n          {\n            text: t.localizeKey(\"resumeDiscussion\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"resumed\",\n              });\n              await this.discussion.start(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"resumingDiscussion\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n              );\n            },\n          },\n          {\n            text: t.localizeKey(\"endDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"stopped\",\n              });\n              await this.discussion.end(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"endingDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n              );\n            },\n          },\n        ];\n        status = \"paused\";\n        break;\n      default:\n        items = [\n          {\n            text: t.localizeKey(\"startTimer\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"started\",\n              });\n              await this.discussion.start(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"startingTimer\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n              );\n            },\n          },\n        ];\n\n        if (await this.discussion.hasEverBeenDiscussed(t)) {\n          items.push({\n            text: t.localizeKey(\"resetDiscussion\", { symbol: \"↺\" }), // ANTICLOCKWISE OPEN CIRCLE ARROW\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"reset\",\n              });\n              await this.discussion.reset(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"resettingDiscussion\", { symbol: \"↺\" }), // ANTICLOCKWISE OPEN CIRCLE ARROW\n              );\n            },\n          });\n          status = \"discussed before\";\n        } else {\n          status = \"never discussed\";\n        }\n    }\n\n    await Analytics.event(this.w, \"discussionMenuOpened\", { status });\n\n    return t.popup({\n      title: \"Leaner Coffee\",\n      items,\n    });\n  };\n\n  getButtonLabel = async (t: Trello.PowerUp.IFrame): Promise<string> => {\n    let label = await this.discussion.cardStorage.getDiscussionButtonLabel(t);\n\n    if (label) {\n      setTimeout(() => {\n        this.discussion.cardStorage.saveDiscussionButtonLabel(t);\n      }, 2000);\n    }\n\n    label = label || t.localizeKey(\"discussion\");\n\n    return label;\n  };\n\n  handlePowerupEnabled = async (t: Trello.PowerUp.AnonymousHostHandlers) => {\n    const organisation = await t.organization(\"id\");\n    const board = await t.board(\"id\");\n    const organisationIdHash = await digestMessage(organisation.id);\n    const boardIdHash = await digestMessage(board.id);\n\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.POWER_UP_VERSION]: __BUILDTIME_VERSION__,\n      [BoardStorage.POWER_UP_INSTALLATION_DATE]: new Date().toISOString(),\n      [BoardStorage.ORGANISATION_HASH]: organisationIdHash,\n      [BoardStorage.BOARD_HASH]: boardIdHash,\n    });\n  };\n\n  async start(): Promise<void> {\n    const trelloPlugin = this.t.initialize(CapabilityHandlers(this), {\n      localization: I18nConfig,\n      helpfulStacks: !this.isRunningInProduction(),\n    }) as Trello.PowerUp.Plugin;\n\n    this.discussion.init(trelloPlugin);\n\n    if (\n      !this.initialising &&\n      !(await this.boardStorage.getInitialised(trelloPlugin))\n    ) {\n      this.initialising = true;\n      await this.handlePowerupEnabled(trelloPlugin);\n      this.initialising = false;\n    }\n\n    const organisationIdHash =\n      await this.boardStorage.getOrganisationIdHash(trelloPlugin);\n    const boardIdHash = await this.boardStorage.getBoardIdHash(trelloPlugin);\n\n    this.w.LeanerCoffeeAnalyticsReferrer = \"https://\" + organisationIdHash;\n    this.w.LeanerCoffeeAnalyticsHostname = boardIdHash;\n    this.w.LeanerCoffeeAnalyticsBeforeSend = Analytics.beforeSend;\n\n    setTimeout(async () => {\n      await Analytics.pageview(this.w);\n    }, 0);\n  }\n}\n\nexport default LeanCoffeePowerUp;\n","import LeanCoffeePowerUp from \"./LeanCoffeePowerUp\";\nimport CardStorage from \"./storage/CardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport Analytics from \"./utils/Analytics\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\n\nexport const CapabilityHandlers = (\n  powerUp: LeanCoffeePowerUp,\n): Trello.PowerUp.CapabilityHandlers => ({\n  \"board-buttons\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.BoardButtonCallback[]> => {\n    if (!(await powerUp.updateChecker.hasBeenUpdated(t))) {\n      return [];\n    }\n\n    return [\n      {\n        icon: {\n          dark: `${powerUp.baseUrl}/assets/moka_white.svg`,\n          light: `${powerUp.baseUrl}/assets/moka.svg`,\n        },\n        text: t.localizeKey(\"boardButtonLabel\"),\n        callback: powerUp.updateChecker.showMenu,\n      },\n    ];\n  },\n\n  \"card-back-section\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardBackSection> => {\n    const discussionStatus =\n      await powerUp.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus === undefined) {\n      return null;\n    }\n\n    return {\n      title: t.localizeKey(\"discussion\"),\n      icon: `${powerUp.baseUrl}/assets/powerup/timer.svg`,\n      content: {\n        type: \"iframe\",\n        url: t.signUrl(\n          `${powerUp.baseUrl}/discussion-ui.html?${await Analytics.getOverrides(powerUp.boardStorage, t)}`,\n        ),\n      },\n    };\n  },\n\n  \"card-badges\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardBadge[]> => {\n    const badges = [\n      await powerUp.elapsedCardBadge.render(t),\n      await powerUp.votingCardBadge.render(t),\n    ];\n\n    return badges.filter((badge) => badge);\n  },\n\n  \"card-buttons\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardButton[]> => [\n    {\n      icon: `${powerUp.baseUrl}/assets/powerup/timer.svg`,\n      text: await powerUp.getButtonLabel(t),\n      callback: powerUp.handleDiscussion,\n    },\n    {\n      icon: `${powerUp.baseUrl}/assets/powerup/heart.svg`,\n      text: t.localizeKey(\"vote\", {\n        symbol: (await powerUp.voting.hasCurrentMemberVoted(t)) ? \"☑\" : \"☐\",\n      }),\n      callback: powerUp.handleVoting,\n    },\n  ],\n\n  \"card-detail-badges\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge[]> => {\n    const badges = [\n      await powerUp.elapsedCardDetailBadge.render(t),\n      await powerUp.votingCardDetailBadge.render(t),\n    ];\n\n    return badges.filter((badge) => badge);\n  },\n\n  \"list-actions\": (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.ListAction[]> =>\n    Promise.resolve([\n      {\n        text: t.localizeKey(\"clearVotesFromList\"),\n        callback: async (t2): Promise<void> => {\n          const result = await t2.list(\"cards\");\n          result.cards.forEach(({ id }) => {\n            powerUp.cardStorage.deleteMultiple(t2, [CardStorage.VOTES], id);\n          });\n          await Analytics.event(\n            (t2 as any).source?.window[0],\n            \"listVotesCleared\",\n          );\n        },\n      },\n    ]),\n\n  \"list-sorters\": (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.ListSorter[]> =>\n    Promise.resolve([\n      {\n        text: t.localizeKey(\"sortByVote\"),\n        callback: async (t2, opts): Promise<{ sortedIds: string[] }> => {\n          const votingData = await Promise.all(\n            opts.cards.map(\n              async (\n                card,\n              ): Promise<{ leanCoffeeVotes: number; id: string }> => {\n                const leanCoffeeVotes = await powerUp.voting.countVotesByCard(\n                  t2,\n                  card.id,\n                );\n                return { leanCoffeeVotes, id: card.id };\n              },\n            ),\n          );\n\n          const sortedCards = votingData.sort((cardA, cardB) => {\n            if (cardA.leanCoffeeVotes < cardB.leanCoffeeVotes) {\n              return 1;\n            }\n            if (cardB.leanCoffeeVotes < cardA.leanCoffeeVotes) {\n              return -1;\n            }\n            return 0;\n          });\n\n          await Analytics.event(\n            (t2 as any).source?.window[0],\n            \"listVotesSorted\",\n          );\n\n          return {\n            sortedIds: sortedCards.map((card) => card.id),\n          };\n        },\n      },\n    ]),\n\n  \"on-enable\": async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const window = (t as any).source?.window[1];\n\n    if (\n      powerUp.initialising ||\n      (await powerUp.boardStorage.getInitialised(t))\n    ) {\n      powerUp.intervalId = window.setInterval(async () => {\n        if (!powerUp.initialising) {\n          await Analytics.event(window, \"enabled\");\n          window.clearInterval(powerUp.intervalId);\n        }\n      }, 500);\n      return;\n    }\n\n    // If we are here, on-enable was called before the power-up was initialised.\n    // I've never seen it happen, but I suppose it is possible\n    powerUp.initialising = true;\n    await powerUp.handlePowerupEnabled(t);\n    powerUp.initialising = false;\n\n    await Analytics.event(window, \"enabled\");\n  },\n\n  \"on-disable\": async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const window = (t as any).source?.window[1]; // The order is not guaranteed\n    await Analytics.event(window, \"disabled\");\n  },\n\n  \"show-settings\": async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    return t.popup({\n      title: `Leaner Coffee ${__BUILDTIME_VERSION__}`,\n      url: `${powerUp.baseUrl}/settings.html?${await Analytics.getOverrides(powerUp.boardStorage, t)}`,\n      height: 184,\n      args: {\n        localization: I18nConfig,\n      },\n    });\n  },\n});\n","import LeanCoffeePowerUp from \"./LeanCoffeePowerUp\";\n\ndeclare global {\n  interface Window {\n    webkitAudioContext?: typeof AudioContext;\n  }\n}\n\nconst config: Config = process.env.CONFIG as unknown as Config;\n\nconst instance = new LeanCoffeePowerUp({\n  w: window,\n  config,\n});\n\ninstance.start();\n"],"names":["addZero","value","digits","str","toString","size","length","Array","join","concat","module","exports","ms","options","leading","showMs","unsignedMs","sign","duration","getSign","t","TypeError","days","Math","trunc","hours","minutes","seconds","parseMs","output","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","constructor","scope","visibility","assign","this","read","cardId","write","set","writeMultiple","entries","remove","deleteMultiple","CardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionElapsed","DISCUSSION_ELAPSED","getDiscussionThumbs","DISCUSSION_THUMBS","getDiscussionButtonLabel","DISCUSSION_BUTTON_LABEL","saveDiscussionStatus","newStatus","saveDiscussionElapsed","newElapsed","saveDiscussionThumbs","newThumbs","saveVotes","newVotes","VOTES","deleteVotes","delete","saveDiscussionButtonLabel","newLabel","deleteDiscussionThumbs","sanitiseUrl","urlString","url","URL","protocol","hostname","port","pathname","beforeSend","event","payload","referrer","window","LeanerCoffeeAnalyticsReferrer","LeanerCoffeeAnalyticsHostname","pageview","async","eventData","umami","track","props","console","warn","eventName","getOverrides","boardStorage","organisationIdHash","getOrganisationIdHash","boardIdHash","getBoardIdHash","encodeURIComponent","supportedLocales","I18nConfig","defaultLocale","resourceUrl","BoardStorage","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpVersion","POWER_UP_VERSION","setPowerUpVersion","version","getPowerUpInstallationDate","POWER_UP_INSTALLATION_DATE","setPowerUpInstallationDate","installationDate","ORGANISATION_HASH","setOrganisationIdHash","BOARD_HASH","setBoardIdHash","getInitialised","LeanCoffeeBase","w","config","isRunningInProduction","cardStorage","discussion","getText","elapsed","getColor","isOngoingFor","isPausedFor","render","bind","getElapsed","text","color","badge","title","localizeKey","baseUrl","voting","getVoters","votes","getVotes","values","reduce","knownVoters","vote","username","push","fullName","avatar","voters","hasVoted","hasCurrentMemberVoted","icon","clearVoters","totalVoters","total","showVoters","items","popup","args","localization","callback","commonData","load","remoteAudioFile","fetch","audioData","arrayBuffer","audioBuffer","audioContext","decodeAudioData","sourceNode","createBufferSource","buffer","connect","destination","play","type","AudioContext","webkitAudioContext","audio","start","open","cardName","Notification","body","show","permission","requestPermission","maxDiscussionDuration","init","p","getElapsedNotification","isOngoingOrPausedForAnotherCard","boardStatus","includes","getContext","card","hasEverBeenDiscussed","hasNotBeenArchived","cards","find","id","updateElapsed","startedAt","Date","now","saveElapsed","pause","previousElapsed","setInterval","notify","intervalId","name","clearInterval","elapsedNotification","notifications","end","err","Error","message","reset","digestMessage","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","from","Uint8Array","map","b","padStart","storage","hasBeenUpdated","storedVersion","showMenu","oldVersion","newVersion","storeNewVersion","height","member","countVotesByCard","keys","filter","getMaxVotes","currentList","list","ceil","canCurrentMemberVote","cardIds","countVotesByMember","Promise","all","initialising","handleVoting","maxVotes","currentMember","outcome","stopAndStart","handleDiscussion","cardBeingDiscussed","currentCardBeingDiscussed","currentDiscussionStatus","status","symbol","t2","closePopup","getButtonLabel","label","setTimeout","handlePowerupEnabled","organisation","organization","board","toISOString","TrelloPowerUp","defaultDuration","updateChecker","elapsedCardBadge","elapsedCardDetailBadge","votingCardBadge","votingCardDetailBadge","trelloPlugin","initialize","powerUp","dark","light","content","signUrl","resolve","forEach","source","opts","sortedCards","leanCoffeeVotes","sort","cardA","cardB","sortedIds","helpfulStacks","LeanerCoffeeAnalyticsBeforeSend"],"sourceRoot":""}