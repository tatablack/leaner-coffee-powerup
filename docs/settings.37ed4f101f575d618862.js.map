{"version":3,"file":"settings.37ed4f101f575d618862.js","mappings":"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","sources":["webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/storage/CardStorage.ts","webpack://leancoffee-powerup/./src/LeanCoffeeBase.ts","webpack://leancoffee-powerup/./src/utils/Debug.ts","webpack://leancoffee-powerup/./src/utils/I18nConfig.ts","webpack://leancoffee-powerup/./src/LeanCoffeeSettings.ts","webpack://leancoffee-powerup/./src/settings.ts"],"sourcesContent":["import { Trello } from \"../types/TrelloPowerUp\";\n\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(\n    scope: Trello.PowerUp.Scope = \"member\",\n    visibility: Trello.PowerUp.Visibility = \"private\",\n  ) {\n    Object.assign(this, { scope, visibility });\n  }\n\n  read(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  write(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    value: any,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: {\n      [key: string]: any;\n    },\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: string[],\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass BoardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_CARD_ID = \"leancoffeeDiscussionCardId\";\n  static DISCUSSION_STARTED_AT = \"leancoffeeDiscussionStartedAt\";\n  static DISCUSSION_PREVIOUS_ELAPSED = \"leancoffeeDiscussionPreviousElapsed\";\n  static DISCUSSION_INTERVAL_ID = \"leancoffeeDiscussionIntervalId\";\n  static POWER_UP_VERSION = \"powerUpVersion\";\n  static POWER_UP_INSTALLATION_DATE = \"powerUpInstallationDate\";\n  static ORGANISATION_HASH = \"organisationHash\";\n  static BOARD_HASH = \"boardHash\";\n\n  constructor() {\n    super(\"board\", \"shared\");\n  }\n\n  async getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStatus> {\n    return super.read(t, BoardStorage.DISCUSSION_STATUS);\n  }\n\n  async getDiscussionCardId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n  }\n\n  async getDiscussionStartedAt(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStartedAt> {\n    return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n  }\n\n  async getDiscussionPreviousElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionPreviousElapsed> {\n    return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n  }\n\n  async getDiscussionIntervalId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionIntervalId> {\n    return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n  }\n\n  async getPowerUpVersion(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_VERSION);\n  }\n\n  setPowerUpVersion(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    version: string,\n  ): PromiseLike<void> {\n    return super.write(t, BoardStorage.POWER_UP_VERSION, version);\n  }\n\n  async getPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_INSTALLATION_DATE);\n  }\n\n  setPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    installationDate: string,\n  ): PromiseLike<void> {\n    return super.write(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n      installationDate,\n    );\n  }\n\n  async getOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.ORGANISATION_HASH);\n  }\n\n  async setOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.ORGANISATION_HASH, value);\n  }\n\n  async getBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.BOARD_HASH);\n  }\n\n  async setBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.BOARD_HASH, value);\n  }\n\n  async getInitialised(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<boolean> {\n    const installationDate = await super.read(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n    );\n    return !!installationDate;\n  }\n}\n\nexport default BoardStorage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass CardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_ELAPSED = \"leancoffeeDiscussionElapsed\";\n  static DISCUSSION_THUMBS = \"leancoffeeDiscussionThumbs\";\n  static VOTES = \"leancoffeeVotes\";\n  static DISCUSSION_BUTTON_LABEL = \"discussionButtonLabel\";\n\n  constructor() {\n    super(\"card\", \"shared\");\n  }\n\n  getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<DiscussionStatus> {\n    return super.read(t, CardStorage.DISCUSSION_STATUS);\n  }\n\n  getDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<number> {\n    return super.read(t, CardStorage.DISCUSSION_ELAPSED);\n  }\n\n  getDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<Thumbs> {\n    return super.read(t, CardStorage.DISCUSSION_THUMBS);\n  }\n\n  getDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<string> {\n    return super.read(t, CardStorage.DISCUSSION_BUTTON_LABEL);\n  }\n\n  saveDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newStatus: DiscussionStatus,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_STATUS, newStatus, cardId);\n  }\n\n  saveDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newElapsed: number,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_ELAPSED, newElapsed, cardId);\n  }\n\n  saveDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newThumbs: Thumbs,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_THUMBS, newThumbs);\n  }\n\n  saveVotes(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newVotes: Votes,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.VOTES, newVotes);\n  }\n\n  deleteVotes(t: Trello.PowerUp.AnonymousHostHandlers): PromiseLike<void> {\n    return super.delete(t, CardStorage.VOTES);\n  }\n\n  saveDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newLabel?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_BUTTON_LABEL, newLabel);\n  }\n\n  deleteDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<void> {\n    return super.delete(t, CardStorage.DISCUSSION_THUMBS);\n  }\n}\n\nexport default CardStorage;\n","import BoardStorage from \"./storage/BoardStorage\";\nimport CardStorage from \"./storage/CardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\n\nexport interface LeanCoffeeBaseParams {\n  w: Window;\n  config: Config;\n  t?: Trello.PowerUp | Trello.PowerUp.IFrame;\n}\n\nexport class LeanCoffeeBase {\n  w: Window;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n  config: Config;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    this.w = w;\n    this.config = config;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n  }\n\n  isRunningInProduction = (): boolean =>\n    (process.env.NODE_ENV as Environment) === \"production\";\n}\n","import BoardStorage from \"../storage/BoardStorage\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass Debug {\n  static async showData(t: Trello.PowerUp.IFrame): Promise<void> {\n    console.groupCollapsed(\"Current context\");\n    console.log(JSON.stringify(t.getContext(), null, 2));\n    console.groupEnd();\n\n    const boardData = await t.getAll();\n    console.groupCollapsed(\"Board data\");\n    console.log(JSON.stringify(boardData, null, 2));\n    console.groupEnd();\n\n    const cards = await t.cards(\"id\", \"name\");\n    const cardsDataPromise = cards.map(async (card) => {\n      const cardData = await t.get(card.id, \"shared\");\n      return { name: card.name, ...cardData };\n    });\n\n    const cardsData = await Promise.all(cardsDataPromise);\n    cardsData.forEach((card) => {\n      console.groupCollapsed(\"Card data\");\n      // console.log(card);\n      console.log(JSON.stringify(card, null, 2));\n      console.groupEnd();\n    });\n  }\n\n  static async wipeData(\n    t: Trello.PowerUp.IFrame,\n    cardStorage: CardStorage,\n    boardStorage: BoardStorage,\n  ): Promise<void> {\n    await boardStorage.deleteMultiple(t, [\n      BoardStorage.DISCUSSION_STATUS,\n      BoardStorage.DISCUSSION_CARD_ID,\n      BoardStorage.DISCUSSION_STARTED_AT,\n      BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n      BoardStorage.DISCUSSION_INTERVAL_ID,\n    ]);\n\n    const cards = await t.cards(\"all\");\n\n    Promise.all(\n      cards.map(async (card) => {\n        await cardStorage.deleteMultiple(\n          t,\n          [\n            CardStorage.DISCUSSION_STATUS,\n            CardStorage.DISCUSSION_ELAPSED,\n            CardStorage.DISCUSSION_THUMBS,\n            CardStorage.VOTES,\n          ],\n          card.id,\n        );\n      }),\n    ).then(() => {\n      console.log(\"Data wipe finished\");\n    });\n  }\n}\n\nexport default Debug;\n","import { Trello } from \"../types/TrelloPowerUp\";\n\nconst config: Config = process.env.CONFIG as unknown as Config;\nconst { supportedLocales } = config[process.env.NODE_ENV as Environment];\n\nexport const I18nConfig: Trello.PowerUp.Localization = {\n  defaultLocale: \"en\",\n  supportedLocales,\n  resourceUrl: \"/i18n/{locale}.json\",\n};\n","import { LeanCoffeeBase, LeanCoffeeBaseParams } from \"./LeanCoffeeBase\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport Debug from \"./utils/Debug\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\n\nclass LeanCoffeeSettings extends LeanCoffeeBase {\n  t: Trello.PowerUp.IFrame;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    super({ w, config });\n    this.t = w.TrelloPowerUp.iframe({\n      localization: I18nConfig,\n      helpfulStacks: !this.isRunningInProduction(),\n    });\n  }\n\n  init(): void {\n    if (!this.isRunningInProduction()) {\n      (\n        this.w.document.querySelector(\".dev-only\") as HTMLElement\n      ).style.display = \"block\";\n      this.w.document\n        .getElementById(\"showData\")\n        .addEventListener(\"click\", this.showData.bind(this));\n      this.w.document\n        .getElementById(\"wipeData\")\n        .addEventListener(\"click\", this.wipeData.bind(this));\n    }\n\n    this.t.render(() => {\n      this.t.localizeNode(document.body);\n      this.t.sizeTo(\"#leanCoffeeSettingsForm\");\n    });\n  }\n\n  showData = async (evt: Event): Promise<void> => {\n    evt.preventDefault();\n    if (this.isRunningInProduction()) {\n      return;\n    }\n\n    await Debug.showData(this.t);\n  };\n\n  wipeData = async (evt: Event): Promise<void> => {\n    evt.preventDefault();\n    if (this.isRunningInProduction()) {\n      return;\n    }\n\n    await Debug.wipeData(this.t, this.cardStorage, this.boardStorage);\n  };\n}\n\nexport default LeanCoffeeSettings;\n","import LeanCoffeeSettings from \"./LeanCoffeeSettings\";\n\nconst config: Config = process.env.CONFIG as unknown as Config;\n\nconst settings = new LeanCoffeeSettings({\n  w: window,\n  config,\n});\nsettings.init();\n"],"names":["constructor","scope","visibility","Object","assign","this","read","t","key","cardId","get","write","value","set","writeMultiple","entries","remove","deleteMultiple","BoardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpVersion","POWER_UP_VERSION","setPowerUpVersion","version","getPowerUpInstallationDate","POWER_UP_INSTALLATION_DATE","setPowerUpInstallationDate","installationDate","getOrganisationIdHash","ORGANISATION_HASH","setOrganisationIdHash","getBoardIdHash","BOARD_HASH","setBoardIdHash","getInitialised","CardStorage","getDiscussionElapsed","DISCUSSION_ELAPSED","getDiscussionThumbs","DISCUSSION_THUMBS","getDiscussionButtonLabel","DISCUSSION_BUTTON_LABEL","saveDiscussionStatus","newStatus","saveDiscussionElapsed","newElapsed","saveDiscussionThumbs","newThumbs","saveVotes","newVotes","VOTES","deleteVotes","delete","saveDiscussionButtonLabel","newLabel","deleteDiscussionThumbs","LeanCoffeeBase","w","config","isRunningInProduction","boardStorage","cardStorage","showData","console","groupCollapsed","log","JSON","stringify","getContext","groupEnd","boardData","getAll","cardsDataPromise","cards","map","async","card","cardData","id","name","Promise","all","forEach","wipeData","then","supportedLocales","I18nConfig","defaultLocale","resourceUrl","evt","preventDefault","TrelloPowerUp","iframe","localization","helpfulStacks","init","document","querySelector","style","display","getElementById","addEventListener","bind","render","localizeNode","body","sizeTo","window"],"sourceRoot":""}