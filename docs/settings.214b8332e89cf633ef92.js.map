{"version":3,"file":"settings.214b8332e89cf633ef92.js","mappings":"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","sources":["webpack://leancoffee-powerup/./src/utils/Errors.ts","webpack://leancoffee-powerup/./src/utils/Scope.ts","webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/storage/CardStorage.ts","webpack://leancoffee-powerup/./src/storage/MemberStorage.ts","webpack://leancoffee-powerup/./src/LeanCoffeeBase.ts","webpack://leancoffee-powerup/./src/utils/I18nConfig.ts","webpack://leancoffee-powerup/./src/LeanCoffeeIFrame.ts","webpack://leancoffee-powerup/./src/settings.ts","webpack://leancoffee-powerup/./src/LeanCoffeeSettings.ts"],"sourcesContent":["import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nconst getTagsForReporting = async (\n  boardStorage: BoardStorage,\n  t: Trello.PowerUp.AnonymousHostHandlers,\n): Promise<string> => {\n  const organisationIdHash = await boardStorage.getOrganisationIdHash(t);\n  const boardIdHash = await boardStorage.getBoardIdHash(t);\n  return `organisationIdHash=${organisationIdHash}&boardIdHash=${boardIdHash}`;\n};\n\nconst isRunningInProduction = (): boolean =>\n  (process.env.NODE_ENV as Environment) === \"production\";\n\nconst ErrorReporter = (\n  target: any,\n  methodName: string,\n  descriptor: PropertyDescriptor,\n) => {\n  const originalMethod = descriptor.value;\n  const isAsync = originalMethod.constructor.name === \"AsyncFunction\";\n  const warningMessage = `Leaner Coffee Power-Up: error in ${methodName} (reported)`;\n\n  if (isAsync) {\n    descriptor.value = async function (...args: any[]) {\n      try {\n        return await originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  } else {\n    descriptor.value = function (...args: any[]) {\n      try {\n        return originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  }\n\n  return descriptor;\n};\n\nfunction ErrorReporterInjector<T extends { new (...args: any[]): object }>(\n  constructor: T,\n) {\n  // Get all prototype methods\n  const prototype = constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(prototype).filter(\n    (name) => typeof prototype[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  // Apply the ErrorReporter decorator to each method\n  methodNames.forEach((methodName) => {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, methodName);\n    if (descriptor && typeof descriptor.value === \"function\") {\n      const decoratedDescriptor = ErrorReporter(\n        prototype,\n        methodName,\n        descriptor,\n      );\n\n      // console.log(\n      //   `Decorating ${constructor.name}::${methodName} with ErrorReporter`,\n      // );\n      Object.defineProperty(prototype, methodName, decoratedDescriptor);\n    }\n  });\n\n  return constructor;\n}\n\nexport {\n  getTagsForReporting,\n  isRunningInProduction,\n  ErrorReporter,\n  ErrorReporterInjector,\n};\n","const bindAll = (classInstance: any) => {\n  const p = classInstance.constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(p).filter(\n    (name) => typeof p[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  methodNames.forEach(\n    (methodName) => (p[methodName] = p[methodName].bind(classInstance)),\n  );\n};\n\nexport { bindAll };\n","import { Trello } from \"../types/TrelloPowerUp\";\nimport { ErrorReporterInjector } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\n\n@ErrorReporterInjector\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(\n    scope: Trello.PowerUp.Scope = \"member\",\n    visibility: Trello.PowerUp.Visibility = \"private\",\n  ) {\n    Object.assign(this, { scope, visibility });\n    bindAll(this);\n  }\n\n  read(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  write(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    value: any,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: {\n      [key: string]: any;\n    },\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: string[],\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass BoardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_CARD_ID = \"leancoffeeDiscussionCardId\";\n  static DISCUSSION_STARTED_AT = \"leancoffeeDiscussionStartedAt\";\n  static DISCUSSION_PREVIOUS_ELAPSED = \"leancoffeeDiscussionPreviousElapsed\";\n  static DISCUSSION_INTERVAL_ID = \"leancoffeeDiscussionIntervalId\";\n  static POWER_UP_INSTALLATION_DATE = \"powerUpInstallationDate\";\n  static ORGANISATION_HASH = \"organisationHash\";\n  static BOARD_HASH = \"boardHash\";\n\n  constructor() {\n    super(\"board\", \"shared\");\n  }\n\n  async getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStatus> {\n    return super.read(t, BoardStorage.DISCUSSION_STATUS);\n  }\n\n  async getDiscussionCardId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n  }\n\n  async getDiscussionStartedAt(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStartedAt> {\n    return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n  }\n\n  async getDiscussionPreviousElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionPreviousElapsed> {\n    return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n  }\n\n  async getDiscussionIntervalId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionIntervalId> {\n    return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n  }\n\n  async getPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_INSTALLATION_DATE);\n  }\n\n  async getOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.ORGANISATION_HASH);\n  }\n\n  async setOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.ORGANISATION_HASH, value);\n  }\n\n  async getBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.BOARD_HASH);\n  }\n\n  async setBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.BOARD_HASH, value);\n  }\n\n  async getInitialised(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<boolean> {\n    const installationDate = await super.read(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n    );\n    return !!installationDate;\n  }\n\n  setPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    installationDate: string,\n  ): PromiseLike<void> {\n    return super.write(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n      installationDate,\n    );\n  }\n}\n\nexport default BoardStorage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass CardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_ELAPSED = \"leancoffeeDiscussionElapsed\";\n  static DISCUSSION_THUMBS = \"leancoffeeDiscussionThumbs\";\n  static VOTES = \"leancoffeeVotes\";\n  static DISCUSSION_BUTTON_LABEL = \"discussionButtonLabel\";\n\n  constructor() {\n    super(\"card\", \"shared\");\n  }\n\n  getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<DiscussionStatus> {\n    return super.read(t, CardStorage.DISCUSSION_STATUS);\n  }\n\n  getDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<number> {\n    return super.read(t, CardStorage.DISCUSSION_ELAPSED);\n  }\n\n  getDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<Thumbs> {\n    return super.read(t, CardStorage.DISCUSSION_THUMBS);\n  }\n\n  getDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<string> {\n    return super.read(t, CardStorage.DISCUSSION_BUTTON_LABEL);\n  }\n\n  saveDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newStatus: DiscussionStatus,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_STATUS, newStatus, cardId);\n  }\n\n  saveDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newElapsed: number,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_ELAPSED, newElapsed, cardId);\n  }\n\n  saveDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newThumbs: Thumbs,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_THUMBS, newThumbs);\n  }\n\n  saveVotes(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newVotes: Votes,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.VOTES, newVotes);\n  }\n\n  deleteVotes(t: Trello.PowerUp.AnonymousHostHandlers): PromiseLike<void> {\n    return super.delete(t, CardStorage.VOTES);\n  }\n\n  saveDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newLabel?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_BUTTON_LABEL, newLabel);\n  }\n\n  deleteDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<void> {\n    return super.delete(t, CardStorage.DISCUSSION_THUMBS);\n  }\n}\n\nexport default CardStorage;\n","import Storage from \"./Storage\";\n\nclass MemberStorage extends Storage {\n  static POWER_UP_VERSION = \"powerUpVersion\";\n\n  constructor() {\n    super(\"member\", \"private\");\n  }\n}\n\nexport default MemberStorage;\n","import BoardStorage from \"./storage/BoardStorage\";\nimport CardStorage from \"./storage/CardStorage\";\nimport MemberStorage from \"./storage/MemberStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport { ErrorReporterInjector } from \"./utils/Errors\";\nimport { bindAll } from \"./utils/Scope\";\n\nexport interface LeanCoffeeBaseParams {\n  w: Window;\n  config: Config;\n  t?: Trello.PowerUp | Trello.PowerUp.IFrame;\n}\n\n@ErrorReporterInjector\nexport class LeanCoffeeBase {\n  w: Window;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n  memberStorage: MemberStorage;\n  config: Config;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    this.w = w;\n    this.config = config;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n    this.memberStorage = new MemberStorage();\n    bindAll(this);\n  }\n}\n","import { Trello } from \"../types/TrelloPowerUp\";\n\nconst config: Config = process.env.CONFIG as unknown as Config;\nconst { supportedLocales } = config[process.env.NODE_ENV as Environment];\n\nexport const I18nConfig: Trello.PowerUp.Localization = {\n  defaultLocale: \"en\",\n  supportedLocales,\n  resourceUrl: \"/i18n/{locale}.json\",\n};\n","import { LeanCoffeeBase, LeanCoffeeBaseParams } from \"./LeanCoffeeBase\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport { isRunningInProduction } from \"./utils/Errors\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\n\nexport class LeanCoffeeIFrame extends LeanCoffeeBase {\n  t: Trello.PowerUp.IFrame;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    super({ w, config });\n\n    this.t = w.TrelloPowerUp.iframe({\n      localization: I18nConfig,\n      helpfulStacks: !isRunningInProduction(),\n    });\n\n    Promise.all([\n      this.boardStorage.getOrganisationIdHash(this.t),\n      this.boardStorage.getBoardIdHash(this.t),\n    ]).then(([organisationIdHash, boardIdHash]) => {\n      if (this.w.Sentry) {\n        this.w.Sentry.onLoad(async () => {\n          this.w.Sentry.setTags({\n            organisationIdHash: organisationIdHash,\n            boardIdHash: boardIdHash,\n          });\n        });\n      }\n    });\n  }\n}\n","import LeanCoffeeSettings from \"./LeanCoffeeSettings\";\n\nconst config: Config = process.env.CONFIG as unknown as Config;\n\nconst settings = new LeanCoffeeSettings({\n  w: window,\n  config,\n});\nsettings.init();\n","import { LeanCoffeeIFrame } from \"./LeanCoffeeIFrame\";\nimport Debug from \"./utils/Debug\";\nimport { isRunningInProduction } from \"./utils/Errors\";\n\nclass LeanCoffeeSettings extends LeanCoffeeIFrame {\n  init(): void {\n    if (!isRunningInProduction()) {\n      (\n        this.w.document.querySelector(\".dev-only\") as HTMLElement\n      ).style.display = \"block\";\n      this.w.document\n        .getElementById(\"showData\")\n        .addEventListener(\"click\", this.showData.bind(this));\n      this.w.document\n        .getElementById(\"wipeData\")\n        .addEventListener(\"click\", this.wipeData.bind(this));\n    }\n\n    this.t.render(() => {\n      this.t.localizeNode(document.body);\n      this.t.sizeTo(\"#leanCoffeeSettingsForm\");\n    });\n  }\n\n  async showData(evt: Event): Promise<void> {\n    evt.preventDefault();\n    if (isRunningInProduction()) {\n      return;\n    }\n\n    await Debug.showData(this.t);\n  }\n\n  async wipeData(evt: Event): Promise<void> {\n    evt.preventDefault();\n    if (isRunningInProduction()) {\n      return;\n    }\n\n    await Debug.wipeData(this.t, this.cardStorage, this.boardStorage);\n  }\n}\n\nexport default LeanCoffeeSettings;\n"],"names":["ErrorReporter","target","methodName","descriptor","originalMethod","value","isAsync","constructor","name","warningMessage","async","args","apply","this","error","console","warn","window","Sentry","captureException","ErrorReporterInjector","prototype","Object","getOwnPropertyNames","filter","forEach","getOwnPropertyDescriptor","decoratedDescriptor","defineProperty","bindAll","classInstance","p","bind","Storage","scope","visibility","assign","read","t","key","cardId","get","write","set","writeMultiple","entries","remove","deleteMultiple","BoardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpInstallationDate","POWER_UP_INSTALLATION_DATE","getOrganisationIdHash","ORGANISATION_HASH","setOrganisationIdHash","getBoardIdHash","BOARD_HASH","setBoardIdHash","getInitialised","setPowerUpInstallationDate","installationDate","CardStorage","getDiscussionElapsed","DISCUSSION_ELAPSED","getDiscussionThumbs","DISCUSSION_THUMBS","getDiscussionButtonLabel","DISCUSSION_BUTTON_LABEL","saveDiscussionStatus","newStatus","saveDiscussionElapsed","newElapsed","saveDiscussionThumbs","newThumbs","saveVotes","newVotes","VOTES","deleteVotes","delete","saveDiscussionButtonLabel","newLabel","deleteDiscussionThumbs","MemberStorage","POWER_UP_VERSION","LeanCoffeeBase","w","config","boardStorage","cardStorage","memberStorage","supportedLocales","I18nConfig","defaultLocale","resourceUrl","LeanCoffeeIFrame","TrelloPowerUp","iframe","localization","helpfulStacks","Promise","all","then","organisationIdHash","boardIdHash","onLoad","setTags","init","render","localizeNode","document","body","sizeTo","showData","evt","preventDefault","wipeData"],"sourceRoot":""}