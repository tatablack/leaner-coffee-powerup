{"version":3,"file":"ongoing_or_paused.214b8332e89cf633ef92.js","mappings":"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","sources":["webpack://leancoffee-powerup/./src/utils/Errors.ts","webpack://leancoffee-powerup/./src/utils/Scope.ts","webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/popups/LeanCoffeePopupBase.ts","webpack://leancoffee-powerup/./src/popups/ongoing_or_paused.ts","webpack://leancoffee-powerup/./src/popups/LeanCoffeePopupOngoingOrPaused.ts"],"sourcesContent":["import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nconst getTagsForReporting = async (\n  boardStorage: BoardStorage,\n  t: Trello.PowerUp.AnonymousHostHandlers,\n): Promise<string> => {\n  const organisationIdHash = await boardStorage.getOrganisationIdHash(t);\n  const boardIdHash = await boardStorage.getBoardIdHash(t);\n  return `organisationIdHash=${organisationIdHash}&boardIdHash=${boardIdHash}`;\n};\n\nconst isRunningInProduction = (): boolean =>\n  (process.env.NODE_ENV as Environment) === \"production\";\n\nconst ErrorReporter = (\n  target: any,\n  methodName: string,\n  descriptor: PropertyDescriptor,\n) => {\n  const originalMethod = descriptor.value;\n  const isAsync = originalMethod.constructor.name === \"AsyncFunction\";\n  const warningMessage = `Leaner Coffee Power-Up: error in ${methodName} (reported)`;\n\n  if (isAsync) {\n    descriptor.value = async function (...args: any[]) {\n      try {\n        return await originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  } else {\n    descriptor.value = function (...args: any[]) {\n      try {\n        return originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  }\n\n  return descriptor;\n};\n\nfunction ErrorReporterInjector<T extends { new (...args: any[]): object }>(\n  constructor: T,\n) {\n  // Get all prototype methods\n  const prototype = constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(prototype).filter(\n    (name) => typeof prototype[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  // Apply the ErrorReporter decorator to each method\n  methodNames.forEach((methodName) => {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, methodName);\n    if (descriptor && typeof descriptor.value === \"function\") {\n      const decoratedDescriptor = ErrorReporter(\n        prototype,\n        methodName,\n        descriptor,\n      );\n\n      // console.log(\n      //   `Decorating ${constructor.name}::${methodName} with ErrorReporter`,\n      // );\n      Object.defineProperty(prototype, methodName, decoratedDescriptor);\n    }\n  });\n\n  return constructor;\n}\n\nexport {\n  getTagsForReporting,\n  isRunningInProduction,\n  ErrorReporter,\n  ErrorReporterInjector,\n};\n","const bindAll = (classInstance: any) => {\n  const p = classInstance.constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(p).filter(\n    (name) => typeof p[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  methodNames.forEach(\n    (methodName) => (p[methodName] = p[methodName].bind(classInstance)),\n  );\n};\n\nexport { bindAll };\n","import { Trello } from \"../types/TrelloPowerUp\";\nimport { ErrorReporterInjector } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\n\n@ErrorReporterInjector\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(\n    scope: Trello.PowerUp.Scope = \"member\",\n    visibility: Trello.PowerUp.Visibility = \"private\",\n  ) {\n    Object.assign(this, { scope, visibility });\n    bindAll(this);\n  }\n\n  read(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  write(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    value: any,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: {\n      [key: string]: any;\n    },\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: string[],\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass BoardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_CARD_ID = \"leancoffeeDiscussionCardId\";\n  static DISCUSSION_STARTED_AT = \"leancoffeeDiscussionStartedAt\";\n  static DISCUSSION_PREVIOUS_ELAPSED = \"leancoffeeDiscussionPreviousElapsed\";\n  static DISCUSSION_INTERVAL_ID = \"leancoffeeDiscussionIntervalId\";\n  static POWER_UP_INSTALLATION_DATE = \"powerUpInstallationDate\";\n  static ORGANISATION_HASH = \"organisationHash\";\n  static BOARD_HASH = \"boardHash\";\n\n  constructor() {\n    super(\"board\", \"shared\");\n  }\n\n  async getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStatus> {\n    return super.read(t, BoardStorage.DISCUSSION_STATUS);\n  }\n\n  async getDiscussionCardId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n  }\n\n  async getDiscussionStartedAt(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStartedAt> {\n    return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n  }\n\n  async getDiscussionPreviousElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionPreviousElapsed> {\n    return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n  }\n\n  async getDiscussionIntervalId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionIntervalId> {\n    return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n  }\n\n  async getPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_INSTALLATION_DATE);\n  }\n\n  async getOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.ORGANISATION_HASH);\n  }\n\n  async setOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.ORGANISATION_HASH, value);\n  }\n\n  async getBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.BOARD_HASH);\n  }\n\n  async setBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.BOARD_HASH, value);\n  }\n\n  async getInitialised(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<boolean> {\n    const installationDate = await super.read(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n    );\n    return !!installationDate;\n  }\n\n  setPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    installationDate: string,\n  ): PromiseLike<void> {\n    return super.write(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n      installationDate,\n    );\n  }\n}\n\nexport default BoardStorage;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport { ErrorReporterInjector, isRunningInProduction } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\n\nexport interface LeanCoffeePopupBaseParams {\n  w: Window;\n}\n\n@ErrorReporterInjector\nclass LeanCoffeePopupBase {\n  w: Window;\n  t: Trello.PowerUp.IFrame;\n  boardStorage: BoardStorage;\n\n  constructor({ w }: LeanCoffeePopupBaseParams) {\n    this.boardStorage = new BoardStorage();\n    this.t = w.TrelloPowerUp.iframe({\n      helpfulStacks: !isRunningInProduction(),\n    });\n    this.w = w;\n    bindAll(this);\n\n    Promise.all([\n      this.boardStorage.getOrganisationIdHash(this.t),\n      this.boardStorage.getBoardIdHash(this.t),\n    ]).then(([organisationIdHash, boardIdHash]) => {\n      if (this.w.Sentry) {\n        this.w.Sentry.onLoad(async () => {\n          this.w.Sentry.setTags({\n            organisationIdHash: organisationIdHash,\n            boardIdHash: boardIdHash,\n          });\n        });\n      }\n    });\n  }\n\n  toggleFields(cssSelector: string, key: string): void {\n    const elements: NodeListOf<HTMLElement> =\n      this.w.document.querySelectorAll(cssSelector);\n\n    elements.forEach((message: HTMLElement) => {\n      const shouldBeDisplayed = message.dataset.i18nId === key;\n\n      message.style.display = shouldBeDisplayed ? \"block\" : \"none\";\n    });\n  }\n\n  initLocaliser(callback: () => void): void {\n    this.w.TrelloPowerUp.util\n      .initLocalizer(this.w.locale, {\n        localization: this.t.arg(\"localization\"),\n      })\n      .then(callback);\n  }\n}\n\nexport default LeanCoffeePopupBase;\n","import { LeanCoffeePopupOngoingOrPaused } from \"./LeanCoffeePopupOngoingOrPaused\";\n\nconst instance = new LeanCoffeePopupOngoingOrPaused({ w: window });\ninstance.init();\n","import LeanCoffeePopupBase from \"./LeanCoffeePopupBase\";\n\nexport class LeanCoffeePopupOngoingOrPaused extends LeanCoffeePopupBase {\n  currentCardBeingDiscussed: string;\n  currentDiscussionStatus: string;\n  isRunning: boolean;\n  startButton: HTMLElement;\n\n  init(): void {\n    this.currentCardBeingDiscussed = this.t.arg(\"currentCardBeingDiscussed\");\n    this.currentDiscussionStatus = this.t.arg(\"currentDiscussionStatus\");\n    this.isRunning = this.currentDiscussionStatus === \"ONGOING\";\n\n    this.startButton = this.w.document.getElementById(\"start-button\");\n    this.startButton.addEventListener(\"click\", async () => {\n      await this.t.notifyParent(\"done\");\n      await this.t.closePopup();\n    });\n\n    this.prepareLocalisation();\n    this.initLocaliser(this.onLocalised);\n  }\n\n  prepareLocalisation(): void {\n    const messageElements: NodeListOf<HTMLElement> =\n      this.w.document.querySelectorAll(\".message\");\n    messageElements.forEach((elem: HTMLElement) => {\n      elem.dataset.i18nArgs = JSON.stringify({\n        card: this.currentCardBeingDiscussed,\n      });\n    });\n  }\n\n  async onLocalised(): Promise<void> {\n    this.toggleFields(\n      \".message\",\n      this.isRunning ? \"ongoingRunning\" : \"ongoingOnHold\",\n    );\n    this.t.localizeNode(document.body);\n    await this.t.sizeTo(\"body\");\n  }\n}\n"],"names":["ErrorReporter","target","methodName","descriptor","originalMethod","value","isAsync","constructor","name","warningMessage","async","args","apply","this","error","console","warn","window","Sentry","captureException","ErrorReporterInjector","prototype","Object","getOwnPropertyNames","filter","forEach","getOwnPropertyDescriptor","decoratedDescriptor","defineProperty","bindAll","classInstance","p","bind","Storage","scope","visibility","assign","read","t","key","cardId","get","write","set","writeMultiple","entries","remove","deleteMultiple","BoardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpInstallationDate","POWER_UP_INSTALLATION_DATE","getOrganisationIdHash","ORGANISATION_HASH","setOrganisationIdHash","getBoardIdHash","BOARD_HASH","setBoardIdHash","getInitialised","setPowerUpInstallationDate","installationDate","LeanCoffeePopupBase","w","boardStorage","TrelloPowerUp","iframe","helpfulStacks","Promise","all","then","organisationIdHash","boardIdHash","onLoad","setTags","toggleFields","cssSelector","document","querySelectorAll","message","shouldBeDisplayed","dataset","i18nId","style","display","initLocaliser","callback","util","initLocalizer","locale","localization","arg","init","currentCardBeingDiscussed","currentDiscussionStatus","isRunning","startButton","getElementById","addEventListener","notifyParent","closePopup","prepareLocalisation","onLocalised","elem","i18nArgs","JSON","stringify","card","localizeNode","body","sizeTo"],"sourceRoot":""}