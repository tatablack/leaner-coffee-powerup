{"version":3,"file":"index.158eeef00562167f1532.js","mappings":"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","sources":["webpack://leancoffee-powerup/../node_modules/.pnpm/format-duration@3.0.2/node_modules/format-duration/format-duration.js","webpack://leancoffee-powerup/webpack/bootstrap","webpack://leancoffee-powerup/webpack/runtime/compat get default export","webpack://leancoffee-powerup/webpack/runtime/define property getters","webpack://leancoffee-powerup/webpack/runtime/hasOwnProperty shorthand","webpack://leancoffee-powerup/./src/utils/Errors.ts","webpack://leancoffee-powerup/./src/utils/Scope.ts","webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/CardStorage.ts","webpack://leancoffee-powerup/./src/utils/Analytics.ts","webpack://leancoffee-powerup/./src/utils/I18nConfig.ts","webpack://leancoffee-powerup/./src/CapabilityHandlers.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/storage/MemberStorage.ts","webpack://leancoffee-powerup/./src/LeanCoffeeBase.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardBadge.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardDetailBadge.ts","webpack://leancoffee-powerup/./src/badges/VotingCardBadge.ts","webpack://leancoffee-powerup/./src/badges/VotingCardDetailBadge.ts","webpack://leancoffee-powerup/./src/utils/Notifications.ts","webpack://leancoffee-powerup/./src/utils/Discussion.ts","webpack://leancoffee-powerup/./src/utils/Hashing.ts","webpack://leancoffee-powerup/../node_modules/.pnpm/semver-parser@4.1.8/node_modules/semver-parser/modules/common.js","webpack://leancoffee-powerup/../node_modules/.pnpm/semver-parser@4.1.8/node_modules/semver-parser/modules/semver.js","webpack://leancoffee-powerup/./src/utils/VersionChecker.ts","webpack://leancoffee-powerup/./src/utils/Voting.ts","webpack://leancoffee-powerup/./src/LeanCoffeePowerUp.ts","webpack://leancoffee-powerup/./src/index.ts"],"sourcesContent":["// adapted from https://github.com/sindresorhus/parse-ms.\n// moved to internal function because parse-ms is now pure ESM.\nfunction parseMs (ms) {\n  if (typeof ms !== 'number') {\n    throw new TypeError('Expected a number')\n  }\n\n  return {\n    days: Math.trunc(ms / 86400000),\n    hours: Math.trunc(ms / 3600000) % 24,\n    minutes: Math.trunc(ms / 60000) % 60,\n    seconds: Math.trunc(ms / 1000) % 60,\n    ms: Math.trunc(ms) % 1000\n  }\n}\n\n// adapted from https://github.com/rafaelrinaldi/add-zero.\n// moved to internal function b/c addZero is unmaintained (7+ years).\n// stripped out negative sign logic since we're already doing it elsewhere.\nfunction addZero (value, digits) {\n  digits = digits || 2\n\n  let str = value.toString()\n  let size = 0\n\n  size = digits - str.length + 1\n  str = new Array(size).join('0').concat(str)\n\n  return str\n}\n\nfunction getSign (duration, showMs) {\n  if (showMs) return duration < 0 ? '-' : ''\n  return duration <= -1000 ? '-' : ''\n}\n\n/**\n * Convert a number in milliseconds to a standard duration string.\n * @param {number} ms - duration in milliseconds\n * @param {object} options - formatDuration options object\n * @param {boolean} [options.leading=false] - add leading zero\n * @param {boolean} [options.milliseconds=false] - add milliseconds\n * @returns string - formatted duration string\n */\nfunction formatDuration (ms, options) {\n  const leading = options && options.leading\n  const showMs = options && options.ms\n  const unsignedMs = ms < 0 ? -ms : ms\n  const sign = getSign(ms, showMs)\n  const t = parseMs(unsignedMs)\n  const seconds = addZero(t.seconds)\n  let output = ''\n\n  if (t.days && !output) output = sign + t.days + ':' + addZero(t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (t.hours && !output) output = sign + (leading ? addZero(t.hours) : t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (!output) output = sign + (leading ? addZero(t.minutes) : t.minutes) + ':' + seconds\n\n  if (showMs) output += '.' + addZero(t.ms, 3)\n  return output\n}\n\nmodule.exports = formatDuration\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nconst getTagsForReporting = async (\n  boardStorage: BoardStorage,\n  t: Trello.PowerUp.AnonymousHostHandlers,\n): Promise<string> => {\n  const organisationIdHash = await boardStorage.getOrganisationIdHash(t);\n  const boardIdHash = await boardStorage.getBoardIdHash(t);\n  return `organisationIdHash=${organisationIdHash}&boardIdHash=${boardIdHash}`;\n};\n\nconst isRunningInProduction = (): boolean =>\n  (process.env.NODE_ENV as Environment) === \"production\";\n\nconst ErrorReporter = (\n  target: any,\n  methodName: string,\n  descriptor: PropertyDescriptor,\n) => {\n  const originalMethod = descriptor.value;\n  const isAsync = originalMethod.constructor.name === \"AsyncFunction\";\n  const warningMessage = `Leaner Coffee Power-Up: error in ${methodName} (reported)`;\n\n  if (isAsync) {\n    descriptor.value = async function (...args: any[]) {\n      try {\n        return await originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  } else {\n    descriptor.value = function (...args: any[]) {\n      try {\n        return originalMethod.apply(this, args);\n      } catch (error) {\n        console.warn(warningMessage);\n        window.Sentry.captureException(error);\n      }\n    };\n  }\n\n  return descriptor;\n};\n\nfunction ErrorReporterInjector<T extends { new (...args: any[]): object }>(\n  constructor: T,\n) {\n  // Get all prototype methods\n  const prototype = constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(prototype).filter(\n    (name) => typeof prototype[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  // Apply the ErrorReporter decorator to each method\n  methodNames.forEach((methodName) => {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, methodName);\n    if (descriptor && typeof descriptor.value === \"function\") {\n      const decoratedDescriptor = ErrorReporter(\n        prototype,\n        methodName,\n        descriptor,\n      );\n\n      // console.log(\n      //   `Decorating ${constructor.name}::${methodName} with ErrorReporter`,\n      // );\n      Object.defineProperty(prototype, methodName, decoratedDescriptor);\n    }\n  });\n\n  return constructor;\n}\n\nexport {\n  getTagsForReporting,\n  isRunningInProduction,\n  ErrorReporter,\n  ErrorReporterInjector,\n};\n","const bindAll = (classInstance: any) => {\n  const p = classInstance.constructor.prototype;\n  const methodNames = Object.getOwnPropertyNames(p).filter(\n    (name) => typeof p[name] === \"function\" && name !== \"constructor\", // Skip constructor\n  );\n\n  methodNames.forEach(\n    (methodName) => (p[methodName] = p[methodName].bind(classInstance)),\n  );\n};\n\nexport { bindAll };\n","import { Trello } from \"../types/TrelloPowerUp\";\nimport { ErrorReporterInjector } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\n\n@ErrorReporterInjector\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(\n    scope: Trello.PowerUp.Scope = \"member\",\n    visibility: Trello.PowerUp.Visibility = \"private\",\n  ) {\n    Object.assign(this, { scope, visibility });\n    bindAll(this);\n  }\n\n  read(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  write(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    value: any,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: {\n      [key: string]: any;\n    },\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: string[],\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass CardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_ELAPSED = \"leancoffeeDiscussionElapsed\";\n  static DISCUSSION_THUMBS = \"leancoffeeDiscussionThumbs\";\n  static VOTES = \"leancoffeeVotes\";\n  static DISCUSSION_BUTTON_LABEL = \"discussionButtonLabel\";\n\n  constructor() {\n    super(\"card\", \"shared\");\n  }\n\n  getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<DiscussionStatus> {\n    return super.read(t, CardStorage.DISCUSSION_STATUS);\n  }\n\n  getDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<number> {\n    return super.read(t, CardStorage.DISCUSSION_ELAPSED);\n  }\n\n  getDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<Thumbs> {\n    return super.read(t, CardStorage.DISCUSSION_THUMBS);\n  }\n\n  getDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<string> {\n    return super.read(t, CardStorage.DISCUSSION_BUTTON_LABEL);\n  }\n\n  saveDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newStatus: DiscussionStatus,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_STATUS, newStatus, cardId);\n  }\n\n  saveDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newElapsed: number,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_ELAPSED, newElapsed, cardId);\n  }\n\n  saveDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newThumbs: Thumbs,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_THUMBS, newThumbs);\n  }\n\n  saveVotes(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newVotes: Votes,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.VOTES, newVotes);\n  }\n\n  deleteVotes(t: Trello.PowerUp.AnonymousHostHandlers): PromiseLike<void> {\n    return super.delete(t, CardStorage.VOTES);\n  }\n\n  saveDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newLabel?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_BUTTON_LABEL, newLabel);\n  }\n\n  deleteDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<void> {\n    return super.delete(t, CardStorage.DISCUSSION_THUMBS);\n  }\n}\n\nexport default CardStorage;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nimport CustomPayload = umami.CustomPayload;\n\nconst sanitiseUrl = (urlString: string): string => {\n  const url = new URL(urlString);\n  return (\n    url.protocol +\n    url.hostname +\n    (url.port ? `:${url.port}` : \"\") +\n    url.pathname\n  );\n};\n\nconst beforeSend = (event: string, payload: CustomPayload): CustomPayload => {\n  return {\n    ...payload,\n    ...{\n      referrer: window.LeanerCoffeeAnalyticsReferrer,\n      hostname: window.LeanerCoffeeAnalyticsHostname,\n    },\n    url: sanitiseUrl(payload.url),\n  };\n};\n\nconst pageview = async (window: Window, eventData: umami.EventData = {}) => {\n  if (window.umami) {\n    await window.umami.track((props: any) => {\n      return { ...props, ...eventData };\n    });\n  } else {\n    console.warn(\"Umami not available for pageview\", eventData);\n  }\n};\n\nconst event = async (\n  window: Window,\n  eventName: string,\n  eventData?: umami.EventData,\n) => {\n  if (window.umami) {\n    await window.umami.track(eventName, eventData);\n  } else {\n    console.warn(\"Umami not available for event \" + eventName, eventData);\n  }\n};\n\nconst getOverrides = async (\n  boardStorage: BoardStorage,\n  t: Trello.PowerUp.AnonymousHostHandlers,\n): Promise<string> => {\n  const organisationIdHash = await boardStorage.getOrganisationIdHash(t);\n  const boardIdHash = await boardStorage.getBoardIdHash(t);\n  const referrer = encodeURIComponent(\"https://\" + organisationIdHash);\n  return `referrer=${referrer}&hostname=${boardIdHash}`;\n};\n\nconst Analytics = {\n  beforeSend,\n  pageview,\n  event,\n  getOverrides,\n};\n\nexport default Analytics;\n","import { Trello } from \"../types/TrelloPowerUp\";\n\nconst config: Config = process.env.CONFIG as unknown as Config;\nconst { supportedLocales } = config[process.env.NODE_ENV as Environment];\n\nexport const I18nConfig: Trello.PowerUp.Localization = {\n  defaultLocale: \"en\",\n  supportedLocales,\n  resourceUrl: \"/i18n/{locale}.json\",\n};\n","import LeanCoffeePowerUp from \"./LeanCoffeePowerUp\";\nimport CardStorage from \"./storage/CardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport Analytics from \"./utils/Analytics\";\nimport { ErrorReporterInjector } from \"./utils/Errors\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\nimport { bindAll } from \"./utils/Scope\";\n\n@ErrorReporterInjector\nclass CapabilityHandlers {\n  powerUp: LeanCoffeePowerUp;\n\n  constructor(powerUp: LeanCoffeePowerUp) {\n    this.powerUp = powerUp;\n    bindAll(this);\n  }\n\n  async boardButtonsHandler(\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.BoardButtonCallback[]> {\n    // We don't want to show the board button for the release notes\n    // if there is a new patch version: only for minor and major updates.\n    if (!(await this.powerUp.versionChecker.isThereANewMinorOrMajor(t))) {\n      return [];\n    }\n\n    return [\n      {\n        icon: {\n          dark: `${this.powerUp.baseUrl}/assets/moka_white.svg`,\n          light: `${this.powerUp.baseUrl}/assets/moka.svg`,\n        },\n        text: t.localizeKey(\"boardButtonLabel\"),\n        callback: this.powerUp.versionChecker.showMenu,\n      },\n    ];\n  }\n\n  async cardBackSection(\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardBackSection> {\n    const discussionStatus =\n      await this.powerUp.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus === undefined) {\n      return null;\n    }\n\n    return {\n      title: t.localizeKey(\"discussion\"),\n      icon: `${this.powerUp.baseUrl}/assets/powerup/timer.svg`,\n      content: {\n        type: \"iframe\",\n        url: t.signUrl(\n          `${this.powerUp.baseUrl}/discussion-ui.html?${await Analytics.getOverrides(this.powerUp.boardStorage, t)}`,\n        ),\n      },\n    };\n  }\n\n  async cardBadges(\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardBadge[]> {\n    const badges = [\n      await this.powerUp.elapsedCardBadge.render(t),\n      await this.powerUp.votingCardBadge.render(t),\n    ];\n\n    return badges.filter((badge) => badge);\n  }\n\n  async cardButtons(\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardButton[]> {\n    return [\n      {\n        icon: `${this.powerUp.baseUrl}/assets/powerup/timer.svg`,\n        text: await this.powerUp.getButtonLabel(t),\n        callback: this.powerUp.handleDiscussion,\n      },\n      {\n        icon: `${this.powerUp.baseUrl}/assets/powerup/heart.svg`,\n        text: t.localizeKey(\"vote\", {\n          symbol: (await this.powerUp.voting.hasCurrentMemberVoted(t))\n            ? \"☑\"\n            : \"☐\",\n        }),\n        callback: this.powerUp.handleVoting,\n      },\n    ];\n  }\n\n  async cardDetailBadges(\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge[]> {\n    const badges = [\n      await this.powerUp.elapsedCardDetailBadge.render(t),\n      await this.powerUp.votingCardDetailBadge.render(t),\n    ];\n\n    return badges.filter((badge) => badge);\n  }\n  async listActions(\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.ListAction[]> {\n    return Promise.resolve([\n      {\n        text: t.localizeKey(\"clearVotesFromList\"),\n        callback: async (t2): Promise<void> => {\n          const result = await t2.list(\"cards\");\n          result.cards.forEach(({ id }) => {\n            this.powerUp.cardStorage.deleteMultiple(\n              t2,\n              [CardStorage.VOTES],\n              id,\n            );\n          });\n          await Analytics.event(window, \"listVotesCleared\");\n        },\n      },\n    ]);\n  }\n\n  async listSorters(\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.ListSorter[]> {\n    return Promise.resolve([\n      {\n        text: t.localizeKey(\"sortByVote\"),\n        callback: async (t2, opts): Promise<{ sortedIds: string[] }> => {\n          const votingData = await Promise.all(\n            opts.cards.map(\n              async (\n                card,\n              ): Promise<{ leanCoffeeVotes: number; id: string }> => {\n                const leanCoffeeVotes =\n                  await this.powerUp.voting.countVotesByCard(t2, card.id);\n                return { leanCoffeeVotes, id: card.id };\n              },\n            ),\n          );\n\n          const sortedCards = votingData.sort((cardA, cardB) => {\n            if (cardA.leanCoffeeVotes < cardB.leanCoffeeVotes) {\n              return 1;\n            }\n            if (cardB.leanCoffeeVotes < cardA.leanCoffeeVotes) {\n              return -1;\n            }\n            return 0;\n          });\n\n          await Analytics.event(window, \"listVotesSorted\");\n\n          return {\n            sortedIds: sortedCards.map((card) => card.id),\n          };\n        },\n      },\n    ]);\n  }\n\n  async onEnable(t: Trello.PowerUp.IFrame): Promise<void> {\n    // There can be a race condition between the power-up starting\n    // and the on-enable event being triggered.\n    await navigator.locks.request(\n      \"powerup_init\",\n      { ifAvailable: true },\n      async (lock) => {\n        const isInitialised = await this.powerUp.boardStorage.getInitialised(t);\n        // if the lock is null, it means LeanCoffeePowerup::start is taking care of initialisation\n        if (lock === null || isInitialised) {\n          return;\n        }\n\n        if (!isInitialised) {\n          await this.powerUp.handlePowerupEnabled(t);\n        }\n      },\n    );\n\n    await Analytics.event(window, \"enabled\");\n  }\n  async onDisable(): Promise<void> {\n    await Analytics.event(window, \"disabled\");\n  }\n\n  async showSettings(t: Trello.PowerUp.IFrame): Promise<void> {\n    return t.popup({\n      title: `Leaner Coffee ${__BUILDTIME_VERSION__}`,\n      url: `${this.powerUp.baseUrl}/settings.html?${await Analytics.getOverrides(this.powerUp.boardStorage, t)}`,\n      height: 184,\n      args: {\n        localization: I18nConfig,\n      },\n    });\n  }\n\n  getAll(): Trello.PowerUp.CapabilityHandlers {\n    return {\n      \"board-buttons\": this.boardButtonsHandler,\n      \"card-back-section\": this.cardBackSection,\n      \"card-badges\": this.cardBadges,\n      \"card-buttons\": this.cardButtons,\n      \"card-detail-badges\": this.cardDetailBadges,\n      \"list-actions\": this.listActions,\n      \"list-sorters\": this.listSorters,\n      \"on-enable\": this.onEnable,\n      \"on-disable\": this.onDisable,\n      \"show-settings\": this.showSettings,\n    };\n  }\n}\n\nexport default CapabilityHandlers;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass BoardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_CARD_ID = \"leancoffeeDiscussionCardId\";\n  static DISCUSSION_STARTED_AT = \"leancoffeeDiscussionStartedAt\";\n  static DISCUSSION_PREVIOUS_ELAPSED = \"leancoffeeDiscussionPreviousElapsed\";\n  static DISCUSSION_INTERVAL_ID = \"leancoffeeDiscussionIntervalId\";\n  static POWER_UP_INSTALLATION_DATE = \"powerUpInstallationDate\";\n  static ORGANISATION_HASH = \"organisationHash\";\n  static BOARD_HASH = \"boardHash\";\n\n  constructor() {\n    super(\"board\", \"shared\");\n  }\n\n  async getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStatus> {\n    return super.read(t, BoardStorage.DISCUSSION_STATUS);\n  }\n\n  async getDiscussionCardId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n  }\n\n  async getDiscussionStartedAt(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStartedAt> {\n    return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n  }\n\n  async getDiscussionPreviousElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionPreviousElapsed> {\n    return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n  }\n\n  async getDiscussionIntervalId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionIntervalId> {\n    return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n  }\n\n  async getPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_INSTALLATION_DATE);\n  }\n\n  async getOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.ORGANISATION_HASH);\n  }\n\n  async setOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.ORGANISATION_HASH, value);\n  }\n\n  async getBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.BOARD_HASH);\n  }\n\n  async setBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.BOARD_HASH, value);\n  }\n\n  async getInitialised(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<boolean> {\n    const installationDate = await super.read(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n    );\n    return !!installationDate;\n  }\n\n  setPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    installationDate: string,\n  ): PromiseLike<void> {\n    return super.write(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n      installationDate,\n    );\n  }\n}\n\nexport default BoardStorage;\n","import Storage from \"./Storage\";\n\nclass MemberStorage extends Storage {\n  static POWER_UP_VERSION = \"powerUpVersion\";\n\n  constructor() {\n    super(\"member\", \"private\");\n  }\n}\n\nexport default MemberStorage;\n","import BoardStorage from \"./storage/BoardStorage\";\nimport CardStorage from \"./storage/CardStorage\";\nimport MemberStorage from \"./storage/MemberStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport { ErrorReporterInjector } from \"./utils/Errors\";\nimport { bindAll } from \"./utils/Scope\";\n\nexport interface LeanCoffeeBaseParams {\n  w: Window;\n  config: Config;\n  t?: Trello.PowerUp | Trello.PowerUp.IFrame;\n}\n\n@ErrorReporterInjector\nexport class LeanCoffeeBase {\n  w: Window;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n  memberStorage: MemberStorage;\n  config: Config;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    this.w = w;\n    this.config = config;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n    this.memberStorage = new MemberStorage();\n    bindAll(this);\n  }\n}\n","import formatDuration from \"format-duration\";\n\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Discussion from \"../utils/Discussion\";\nimport { ErrorReporterInjector } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\n\n@ErrorReporterInjector\nclass ElapsedCardBadge {\n  discussion: Discussion;\n\n  constructor(discussion: Discussion) {\n    this.discussion = discussion;\n    this.render = this.render.bind(this);\n    bindAll(this);\n  }\n\n  getText = async (\n    t: Trello.PowerUp.IFrame,\n    elapsed: number,\n  ): Promise<string> => formatDuration(elapsed);\n\n  getColor = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.Colors> => {\n    const isOngoing = await this.discussion.isOngoingFor(t);\n\n    if (isOngoing) {\n      return \"orange\";\n    }\n\n    return (await this.discussion.isPausedFor(t)) ? \"yellow\" : \"light-gray\";\n  };\n\n  // Unable to use class properties here because in subclasses\n  // I need to user `super`, and it wouldn't be possible. See:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#accessing_super_in_class_field_declaration\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const elapsed = await this.discussion.getElapsed(t);\n    if (!elapsed) {\n      return null;\n    }\n\n    return {\n      text: await this.getText(t, elapsed),\n      color: await this.getColor(t),\n    };\n  }\n}\n\nexport default ElapsedCardBadge;\n","import ElapsedCardBadge from \"./ElapsedCardBadge\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass ElapsedCardDetailBadge extends ElapsedCardBadge {\n  render = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const discussionStatus: DiscussionStatus =\n      await this.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus !== \"ENDED\") {\n      return null;\n    }\n\n    const badge = (await super.render(t)) as Trello.PowerUp.CardDetailBadge;\n    badge.title = t.localizeKey(\"discussionDurationTitle\");\n    return badge;\n  };\n}\n\nexport default ElapsedCardDetailBadge;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport { ErrorReporterInjector } from \"../utils/Errors\";\nimport { bindAll } from \"../utils/Scope\";\nimport Voting from \"../utils/Voting\";\n\n@ErrorReporterInjector\nclass VotingCardBadge {\n  w: Window;\n  baseUrl: string;\n  voting: Voting;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n\n  constructor(\n    w: Window,\n    baseUrl: string,\n    voting: Voting,\n    boardStorage: BoardStorage,\n    cardStorage: CardStorage,\n  ) {\n    this.w = w;\n    this.baseUrl = baseUrl;\n    this.voting = voting;\n    this.boardStorage = boardStorage;\n    this.cardStorage = cardStorage;\n    this.render = this.render.bind(this);\n    bindAll(this);\n  }\n\n  getVoters = async (t: Trello.PowerUp.IFrame): Promise<{ text: string }[]> => {\n    const votes: Votes = (await this.voting.getVotes(t)) || {};\n\n    return Object.values(votes).reduce(\n      (knownVoters: { text: string; avatar: string }[], vote) => {\n        if (vote.username) {\n          knownVoters.push({\n            text: `${vote.fullName} (${vote.username})`,\n            avatar: vote.avatar,\n          });\n        }\n\n        return knownVoters;\n      },\n      [],\n    );\n  };\n\n  // Unable to use class properties here because in subclasses\n  // I need to user `super`, and it wouldn't be possible. See:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#accessing_super_in_class_field_declaration\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const voters = await this.getVoters(t);\n\n    if (!voters.length) {\n      return null;\n    }\n\n    const hasVoted = await this.voting.hasCurrentMemberVoted(t);\n\n    return {\n      text: voters.length.toString(),\n      color: hasVoted ? \"blue\" : null,\n      icon: `${this.baseUrl}/assets/powerup/${hasVoted ? \"heart_white.svg\" : \"heart.svg\"}`,\n    };\n  }\n}\n\nexport default VotingCardBadge;\n","import VotingCardBadge from \"./VotingCardBadge\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Analytics from \"../utils/Analytics\";\nimport { getTagsForReporting } from \"../utils/Errors\";\nimport { I18nConfig } from \"../utils/I18nConfig\";\n\nclass VotingCardDetailBadge extends VotingCardBadge {\n  clearVoters = async (t: Trello.PowerUp.IFrame) => {\n    const totalVoters = await this.getVoters(t);\n\n    await this.cardStorage.deleteVotes(t);\n    await Analytics.event(this.w, \"votesCleared\", {\n      total: totalVoters.length,\n    });\n  };\n\n  showVoters = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const items = await this.getVoters(t);\n\n    if (!items.length) {\n      return;\n    }\n\n    await t.popup({\n      title: t.localizeKey(\"voters\"),\n      url: `./voters.html?${await Analytics.getOverrides(this.boardStorage, t)}&${await getTagsForReporting(this.boardStorage, t)}`,\n      args: {\n        items,\n        localization: I18nConfig,\n      },\n      callback: this.clearVoters,\n    });\n  };\n\n  render = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const commonData = (await super.render(\n      t,\n    )) as Trello.PowerUp.CardDetailBadge;\n\n    if (commonData) {\n      commonData.title = t.localizeKey(\"voters\");\n      delete commonData.icon;\n      commonData.callback = this.showVoters;\n    }\n\n    return commonData;\n  };\n}\n\nexport default VotingCardDetailBadge;\n","import { ErrorReporterInjector } from \"./Errors\";\nimport { bindAll } from \"./Scope\";\n\nexport type NotificationType = {\n  [key in \"audio\" | \"text\"]: string;\n};\n\n@ErrorReporterInjector\nclass Notifications {\n  w: Window;\n  baseUrl: string;\n  audioContext: AudioContext;\n\n  constructor(window: Window, baseUrl: string) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n    bindAll(this);\n  }\n\n  async load(url: string): Promise<AudioBufferSourceNode> {\n    const remoteAudioFile = await fetch(url);\n    const audioData = await remoteAudioFile.arrayBuffer();\n    const audioBuffer = await this.audioContext.decodeAudioData(audioData);\n    const sourceNode = this.audioContext.createBufferSource();\n    sourceNode.buffer = audioBuffer;\n    sourceNode.connect(this.audioContext.destination);\n    return sourceNode;\n  }\n\n  async play(type: NotificationType): Promise<void> {\n    this.audioContext =\n      this.audioContext || new (AudioContext || this.w.webkitAudioContext)();\n    const audio = await this.load(`${this.baseUrl}/${type.audio}`);\n    audio.start();\n  }\n\n  open(type: NotificationType, cardName: string): void {\n    new Notification(cardName, {\n      body: type.text,\n      icon: `${this.baseUrl}/assets/timer.png`,\n    });\n  }\n\n  show(type: NotificationType, cardName: string): void {\n    if (!(\"Notification\" in this.w) || Notification.permission === \"denied\") {\n      return;\n    }\n\n    if (Notification.permission === \"granted\") {\n      this.open(type, cardName);\n    } else {\n      Notification.requestPermission((permission) => {\n        if (permission === \"granted\") {\n          this.open(type, cardName);\n        }\n      });\n    }\n  }\n}\n\nexport default Notifications;\n","import Analytics from \"./Analytics\";\nimport { ErrorReporterInjector } from \"./Errors\";\nimport Notifications, { NotificationType } from \"./Notifications\";\nimport { bindAll } from \"./Scope\";\nimport BoardStorage from \"../storage/BoardStorage\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\n@ErrorReporterInjector\nclass Discussion {\n  w: Window;\n  p: Trello.PowerUp.Plugin;\n  baseUrl: string;\n  maxDiscussionDuration: number;\n  notifications: Notifications;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n\n  constructor(window: Window, baseUrl: string, maxDiscussionDuration: number) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n    this.notifications = new Notifications(this.w, this.baseUrl);\n    this.maxDiscussionDuration = maxDiscussionDuration;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n    bindAll(this);\n  }\n\n  init = (p: Trello.PowerUp.Plugin): void => {\n    this.p = p;\n  };\n\n  getElapsedNotification = (): NotificationType => ({\n    audio: \"assets/looking_down.mp3\",\n    text: this.p.localizeKey(\"elapsedNotification\"),\n  });\n\n  isOngoingOrPausedForAnotherCard = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<boolean> => {\n    const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n    return (\n      [\"ONGOING\", \"PAUSED\"].includes(boardStatus) &&\n      cardId !== t.getContext().card\n    );\n  };\n\n  hasEverBeenDiscussed = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus !== undefined;\n  };\n\n  hasNotBeenArchived = async (\n    t: Trello.PowerUp.IFrame,\n    cardId: string,\n  ): Promise<boolean> => {\n    const allCards = await t.cards(\"id\", \"name\");\n    return !!allCards.find((card) => card.id === cardId);\n  };\n\n  isOngoingFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === \"ONGOING\";\n  };\n\n  isPausedFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === \"PAUSED\";\n  };\n\n  getElapsed = (t: Trello.PowerUp.IFrame): PromiseLike<number> =>\n    this.cardStorage.getDiscussionElapsed(t);\n\n  updateElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const elapsed = Date.now() - startedAt;\n\n    await this.saveElapsed(t);\n\n    if (elapsed > this.maxDiscussionDuration) {\n      await this.pause(t, true);\n      await Analytics.event(this.w, \"discussionStatusChanged\", {\n        newStatus: \"ended\",\n      });\n    }\n  };\n\n  saveElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const previousElapsed =\n      (await this.boardStorage.getDiscussionPreviousElapsed(t)) || 0;\n    const elapsed = startedAt ? Date.now() - startedAt : 0;\n\n    await this.cardStorage.saveDiscussionElapsed(\n      t,\n      elapsed + previousElapsed,\n      cardId,\n    );\n  };\n\n  start = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: \"ONGOING\",\n      [BoardStorage.DISCUSSION_CARD_ID]: t.getContext().card,\n      [BoardStorage.DISCUSSION_STARTED_AT]: Date.now(),\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: setInterval(\n        this.updateElapsed,\n        5000,\n        t,\n      ),\n    });\n\n    await this.cardStorage.saveDiscussionStatus(t, \"ONGOING\");\n    await this.cardStorage.deleteDiscussionThumbs(t);\n  };\n\n  pause = async (t: Trello.PowerUp.IFrame, notify = false): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const cardName = (await t.cards(\"id\", \"name\")).find(\n      (card) => card.id === cardId,\n    ).name;\n\n    clearInterval(intervalId);\n\n    await this.cardStorage.saveDiscussionStatus(t, \"PAUSED\");\n    await this.saveElapsed(t);\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: \"PAUSED\",\n      [BoardStorage.DISCUSSION_STARTED_AT]: null,\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: null,\n    });\n\n    if (notify) {\n      const elapsedNotification = this.getElapsedNotification();\n      await this.notifications.play(elapsedNotification);\n      this.notifications.show(elapsedNotification, cardName);\n    }\n  };\n\n  end = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    clearInterval(intervalId);\n\n    await this.cardStorage.saveDiscussionStatus(t, \"ENDED\", cardId);\n    await this.saveElapsed(t);\n    await this.cardStorage.deleteMultiple(\n      t,\n      [CardStorage.DISCUSSION_THUMBS],\n      cardId,\n    );\n    await this.boardStorage.deleteMultiple(t, [\n      BoardStorage.DISCUSSION_STATUS,\n      BoardStorage.DISCUSSION_CARD_ID,\n      BoardStorage.DISCUSSION_STARTED_AT,\n      BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n      BoardStorage.DISCUSSION_INTERVAL_ID,\n    ]);\n  };\n\n  reset = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (await this.hasEverBeenDiscussed(t)) {\n      await this.cardStorage.deleteMultiple(\n        t,\n        [\n          CardStorage.DISCUSSION_STATUS,\n          CardStorage.DISCUSSION_ELAPSED,\n          CardStorage.DISCUSSION_THUMBS,\n        ],\n        t.getContext().card,\n      );\n    }\n  };\n}\n\nexport default Discussion;\n","// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\nexport async function digestMessage(message: string) {\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\"); // convert bytes to hex string\n  return hashHex;\n}\n","/**\n * common.js\n */\n\n/* constants */\nconst TYPE_FROM = 8;\nconst TYPE_TO = -1;\n\n/**\n * get type\n * @param {*} o - object to check\n * @returns {string} - type of object\n */\nexport const getType = o =>\n  Object.prototype.toString.call(o).slice(TYPE_FROM, TYPE_TO);\n\n/**\n * is string\n * @param {*} o - object to check\n * @returns {boolean} - result\n */\nexport const isString = o => typeof o === 'string' || o instanceof String;\n","/**\n * semver.js\n * @see {@link http://semver.org/|Semantic Versioning}\n * @see {@link https://github.com/mojombo/semver/|mojombo/semver}\n */\n\n/* api */\nimport { getType, isString } from './common.js';\n\n/* constants */\nconst BASE = 10;\nconst INT = '0|[1-9]\\\\d*';\nconst ALPHA_NUM = '\\\\d*[A-Z-][A-Z\\\\d-]*';\nconst PRE_PART = `(?:${ALPHA_NUM}|${INT})`;\nconst PRE = `${PRE_PART}(?:\\\\.${PRE_PART})*`;\nconst BUILD_PART = `(?:${ALPHA_NUM}|\\\\d+)`;\nconst BUILD = `${BUILD_PART}(?:\\\\.${BUILD_PART})*`;\nconst SEMVER =\n  `((?:${INT})(?:\\\\.(?:${INT})){2})(?:-(${PRE}))?(?:\\\\+(${BUILD}))?`;\nconst REGEXP_INT = new RegExp(`^(?:${INT})$`);\nconst REGEXP_SEMVER = new RegExp(`^v?${SEMVER}$`, 'i');\nconst REGEXP_SEMVER_STRICT = new RegExp(`^${SEMVER}$`, 'i');\n\n/**\n * parsed SemVer object\n * @typedef {object} SemVerObject\n * @property {string} version - version string\n * @property {boolean} matches - matches SemVer format\n * @property {number|undefined} major - major version\n * @property {number|undefined} minor - minor version\n * @property {number|undefined} patch - patch version\n * @property {Array<string|number>|undefined} pre - pre-release version in array\n * @property {Array<string|number>|undefined} build - build ID in array\n */\n\n/**\n * is valid SemVer string\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {boolean} - result\n */\nexport const isValidSemVer = (version, strict = false) => {\n  if (!isString(version)) {\n    throw new TypeError(`Expected String but got ${getType(version)}.`);\n  }\n  const reg = strict ? REGEXP_SEMVER_STRICT : REGEXP_SEMVER;\n  return reg.test(version);\n};\n\n/**\n * parse version part\n * @param {string} part - version part\n * @param {boolean} [nonPosInt] - accept non positive integer\n * @returns {string|number} - parsed version part\n */\nexport const parseVersionPart = (part, nonPosInt = false) => {\n  if (!isString(part)) {\n    throw new TypeError(`Expected String but got ${getType(part)}.`);\n  }\n  if (!(nonPosInt || REGEXP_INT.test(part))) {\n    throw new Error(`${part} is not a stringified positive integer.`);\n  }\n  let parsedPart;\n  if (REGEXP_INT.test(part)) {\n    parsedPart = parseInt(part, BASE);\n    if (!Number.isSafeInteger(parsedPart)) {\n      throw new RangeError(`${parsedPart} exceeds ${Number.MAX_SAFE_INTEGER}.`);\n    }\n  } else {\n    parsedPart = part;\n  }\n  return parsedPart;\n};\n\n/**\n * compare SemVer\n * @param {string} version - version string\n * @param {string} base - base version string to compare from\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {number}\n *   - -1 or negative number, if version is less than base version\n *     0, if version is equal to base version\n *     1 or positive number, if version is greater than base version\n */\nexport const compareSemVer = (version, base, strict = false) => {\n  if (!isString(version)) {\n    throw new TypeError(`Expected String but got ${getType(version)}.`);\n  }\n  if (!isString(base)) {\n    throw new TypeError(`Expected String but got ${getType(base)}.`);\n  }\n  if (!isValidSemVer(version, !!strict)) {\n    throw new Error(`Invalid version string: ${version}`);\n  }\n  if (!isValidSemVer(base, !!strict)) {\n    throw new Error(`Invalid version string: ${base}`);\n  }\n  let result;\n  if (version === base) {\n    result = 0;\n  } else {\n    const reg = strict ? REGEXP_SEMVER_STRICT : REGEXP_SEMVER;\n    const [, vRel, vPre] = version.match(reg);\n    const [, bRel, bPre] = base.match(reg);\n    const [vMajor, vMinor, vPatch] =\n      vRel.split('.').map(part => parseVersionPart(part));\n    const [bMajor, bMinor, bPatch] =\n      bRel.split('.').map(part => parseVersionPart(part));\n    if (vMajor > bMajor) {\n      result = 1;\n    } else if (vMajor < bMajor) {\n      result = -1;\n    } else if (vMinor > bMinor) {\n      result = 1;\n    } else if (vMinor < bMinor) {\n      result = -1;\n    } else if (vPatch > bPatch) {\n      result = 1;\n    } else if (vPatch < bPatch) {\n      result = -1;\n    } else if (vPre === bPre) {\n      result = 0;\n    } else if (!vPre && bPre) {\n      result = 1;\n    } else if (vPre && !bPre) {\n      result = -1;\n    } else {\n      const vPreParts = vPre.split('.').map(part =>\n        parseVersionPart(part, true)\n      );\n      const bPreParts = bPre.split('.').map(part =>\n        parseVersionPart(part, true)\n      );\n      const l = Math.max(vPreParts.length, bPreParts.length);\n      let i = 0;\n      while (i < l) {\n        const vPart = vPreParts[i];\n        const bPart = bPreParts[i];\n        if ((vPart && !bPart) || (isString(vPart) && Number.isInteger(bPart))) {\n          result = 1;\n        } else if ((!vPart && bPart) ||\n                   (Number.isInteger(vPart) && isString(bPart))) {\n          result = -1;\n        } else if (vPart !== bPart && isString(vPart) && isString(bPart)) {\n          result = vPart.localeCompare(bPart);\n        } else if (Number.isInteger(vPart) && Number.isInteger(bPart)) {\n          if (vPart > bPart) {\n            result = 1;\n          } else if (vPart < bPart) {\n            result = -1;\n          }\n        }\n        if (Number.isInteger(result)) {\n          break;\n        }\n        i++;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * parse SemVer string\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {SemVerObject} - result\n */\nexport const parseSemVer = (version, strict = false) => {\n  if (!isString(version)) {\n    throw new TypeError(`Expected String but got ${getType(version)}.`);\n  }\n  const matches = isValidSemVer(version, !!strict);\n  let major, minor, patch, pre, build;\n  if (matches) {\n    const reg = strict ? REGEXP_SEMVER_STRICT : REGEXP_SEMVER;\n    const [, vRel, vPre, vBuild] = version.match(reg);\n    [major, minor, patch] = vRel.split('.').map(part => parseVersionPart(part));\n    if (vPre) {\n      pre = vPre.split('.').map(part => parseVersionPart(part, true));\n    }\n    if (vBuild) {\n      build = vBuild.split('.').map(part => parseVersionPart(part, true));\n    }\n  }\n  return {\n    version, matches, major, minor, patch, pre, build\n  };\n};\n\n/* async wrappers */\n/**\n * compare SemVer (async)\n * @param {string} version - version string\n * @param {string} base - base version string to compare from\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {Promise.<number>}\n *   - -1 or negative number, if version is less than base version\n *     0, if version is equal to base version\n *     1 or positive number, if version is greater than base version\n */\nconst compareSemVerAsync = async (version, base, strict = false) => {\n  const res = compareSemVer(version, base, strict);\n  return res;\n};\n\n/**\n * is valid SemVer string (async)\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {Promise.<boolean>} - result\n */\nconst isValidSemVerAsync = async (version, strict = false) => {\n  const res = isValidSemVer(version, strict);\n  return res;\n};\n\n/**\n * parse SemVer string (async)\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {Promise.<SemVerObject>} - result\n */\nconst parseSemVerAsync = async (version, strict = false) => {\n  const res = parseSemVer(version, strict);\n  return res;\n};\n\n/* export async functions */\nexport const promises = {\n  compareSemVer: compareSemVerAsync,\n  isValidSemVer: isValidSemVerAsync,\n  parseSemVer: parseSemVerAsync\n};\n","import { parseSemVer } from \"semver-parser\";\n\nimport Analytics from \"./Analytics\";\nimport { ErrorReporterInjector, getTagsForReporting } from \"./Errors\";\nimport { I18nConfig } from \"./I18nConfig\";\nimport { bindAll } from \"./Scope\";\nimport BoardStorage from \"../storage/BoardStorage\";\nimport MemberStorage from \"../storage/MemberStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\n@ErrorReporterInjector\nclass VersionChecker {\n  boardStorage: BoardStorage;\n  memberStorage: MemberStorage;\n\n  constructor(boardStorage: BoardStorage, memberStorage: MemberStorage) {\n    this.boardStorage = boardStorage;\n    this.memberStorage = memberStorage;\n    bindAll(this);\n  }\n\n  async isThereANewMinorOrMajor(t: Trello.PowerUp.IFrame): Promise<boolean> {\n    const storedVersionRaw = await this.memberStorage.read(\n      t,\n      MemberStorage.POWER_UP_VERSION,\n    );\n\n    if (!storedVersionRaw) {\n      return true;\n    }\n\n    const storedVersion = parseSemVer(storedVersionRaw);\n    const newVersion = parseSemVer(__BUILDTIME_VERSION__);\n\n    const isNewer =\n      newVersion.major > storedVersion.major ||\n      newVersion.minor > storedVersion.minor;\n\n    return !storedVersion || isNewer;\n  }\n\n  async showMenu(t: Trello.PowerUp.IFrame): Promise<void> {\n    const storedVersion = await this.memberStorage.read(\n      t,\n      MemberStorage.POWER_UP_VERSION,\n    );\n    const title = storedVersion\n      ? t.localizeKey(\"boardButtonPopupTitle\", {\n          oldVersion: storedVersion,\n          newVersion: __BUILDTIME_VERSION__,\n        })\n      : t.localizeKey(\"boardButtonPopupTitleMissingVersion\", {\n          newVersion: __BUILDTIME_VERSION__,\n        });\n\n    return t.popup({\n      title: title,\n      url: `./release-notes.html?${await Analytics.getOverrides(this.boardStorage, t)}&${await getTagsForReporting(this.boardStorage, t)}`,\n      args: { version: __BUILDTIME_VERSION__, localization: I18nConfig },\n      callback: this.storeNewVersion,\n      height: 65,\n    });\n  }\n\n  async storeNewVersion(t: Trello.PowerUp.IFrame): Promise<void> {\n    await this.memberStorage.write(\n      t,\n      MemberStorage.POWER_UP_VERSION,\n      __BUILDTIME_VERSION__,\n    );\n  }\n}\n\nexport default VersionChecker;\n","import { ErrorReporterInjector } from \"./Errors\";\nimport { bindAll } from \"./Scope\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\n@ErrorReporterInjector\nclass Voting {\n  cardStorage: CardStorage;\n\n  constructor() {\n    this.cardStorage = new CardStorage();\n    bindAll(this);\n  }\n\n  async hasCurrentMemberVoted(t: Trello.PowerUp.IFrame): Promise<boolean> {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES);\n    if (!votes) {\n      return false;\n    }\n\n    const currentMember = t.getContext().member;\n    return !!votes[currentMember];\n  }\n\n  async getVotes(t: Trello.PowerUp.IFrame): Promise<Votes> {\n    return await this.cardStorage.read(t, CardStorage.VOTES);\n  }\n\n  async countVotesByCard(\n    t: Trello.PowerUp.IFrame,\n    cardId: string,\n  ): Promise<number> {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n\n    if (!votes) {\n      return 0;\n    }\n\n    return Object.keys(votes).filter((key) => votes[key]).length;\n  }\n\n  async getMaxVotes(t: Trello.PowerUp.IFrame): Promise<number> {\n    const currentList = await t.list(\"cards\");\n\n    // https://www.talcottridge.com/multi-voting-math-or-n3\n    return Math.ceil(currentList.cards.length / 3);\n  }\n\n  async canCurrentMemberVote(t: Trello.PowerUp.IFrame): Promise<boolean> {\n    if (await this.hasCurrentMemberVoted(t)) {\n      return true;\n    }\n\n    const currentList = await t.list(\"cards\");\n    const cardIds = currentList.cards.map((card) => card.id);\n    const currentMemberVotes = await this.countVotesByMember(t, cardIds);\n    const maxVotes = await this.getMaxVotes(t);\n\n    return currentMemberVotes < maxVotes;\n  }\n\n  async countVotesByMember(\n    t: Trello.PowerUp.IFrame,\n    cardIds: string[],\n  ): Promise<number> {\n    const listVotes: number[] = await Promise.all(\n      cardIds.map(async (cardId): Promise<number> => {\n        const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n        if (!votes) {\n          return 0;\n        }\n\n        const currentMember = t.getContext().member;\n        return votes[currentMember] ? 1 : 0;\n      }),\n    );\n\n    return listVotes.reduce((total, vote): number => total + vote, 0);\n  }\n}\n\nexport default Voting;\n","import CapabilityHandlers from \"./CapabilityHandlers\";\nimport { LeanCoffeeBase, LeanCoffeeBaseParams } from \"./LeanCoffeeBase\";\nimport ElapsedCardBadge from \"./badges/ElapsedCardBadge\";\nimport ElapsedCardDetailBadge from \"./badges/ElapsedCardDetailBadge\";\nimport VotingCardBadge from \"./badges/VotingCardBadge\";\nimport VotingCardDetailBadge from \"./badges/VotingCardDetailBadge\";\nimport BoardStorage from \"./storage/BoardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport Analytics from \"./utils/Analytics\";\nimport Discussion from \"./utils/Discussion\";\nimport { getTagsForReporting, isRunningInProduction } from \"./utils/Errors\";\nimport { digestMessage } from \"./utils/Hashing\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\nimport VersionChecker from \"./utils/VersionChecker\";\nimport Voting from \"./utils/Voting\";\n\nclass LeanCoffeePowerUp extends LeanCoffeeBase {\n  t: Trello.PowerUp;\n  baseUrl: string;\n  discussion: Discussion;\n  voting: Voting;\n  elapsedCardBadge: ElapsedCardBadge;\n  elapsedCardDetailBadge: ElapsedCardDetailBadge;\n  votingCardBadge: VotingCardBadge;\n  votingCardDetailBadge: VotingCardDetailBadge;\n  versionChecker: VersionChecker;\n  capabilityHandlers: CapabilityHandlers;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    super({ w, config });\n    this.t = w.TrelloPowerUp;\n\n    const { hostname, port, defaultDuration } =\n      this.config[process.env.NODE_ENV as Environment];\n    this.baseUrl = `${hostname}${port ? `:${port}` : \"\"}`;\n\n    this.discussion = new Discussion(this.w, this.baseUrl, defaultDuration);\n    this.voting = new Voting();\n    this.versionChecker = new VersionChecker(\n      this.boardStorage,\n      this.memberStorage,\n    );\n\n    this.elapsedCardBadge = new ElapsedCardBadge(this.discussion);\n    this.elapsedCardDetailBadge = new ElapsedCardDetailBadge(this.discussion);\n    this.votingCardBadge = new VotingCardBadge(\n      this.w,\n      this.baseUrl,\n      this.voting,\n      this.boardStorage,\n      this.cardStorage,\n    );\n    this.votingCardDetailBadge = new VotingCardDetailBadge(\n      this.w,\n      this.baseUrl,\n      this.voting,\n      this.boardStorage,\n      this.cardStorage,\n    );\n    this.capabilityHandlers = new CapabilityHandlers(this);\n  }\n\n  async handleVoting(t: Trello.PowerUp.IFrame): Promise<void> {\n    if (!(await this.voting.canCurrentMemberVote(t))) {\n      return t.popup({\n        title: \"Leaner Coffee\",\n        url: `${this.baseUrl}/too_many_votes.html?${await Analytics.getOverrides(this.boardStorage, t)}&${await getTagsForReporting(this.boardStorage, t)}`,\n        args: {\n          maxVotes: await this.voting.getMaxVotes(t),\n          localization: I18nConfig,\n        },\n        height: 98,\n      });\n    }\n\n    const votes = (await this.voting.getVotes(t)) || {};\n    const currentMember = await t.member(\n      \"id\",\n      \"username\",\n      \"fullName\",\n      \"avatar\",\n    );\n\n    let outcome: string;\n\n    if (votes[currentMember.id]) {\n      delete votes[currentMember.id];\n      outcome = \"removed\";\n    } else {\n      votes[currentMember.id] = {\n        username: currentMember.username,\n        fullName: currentMember.fullName,\n        avatar: currentMember.avatar, // currently unused\n      };\n      outcome = \"added\";\n    }\n\n    await this.cardStorage.saveVotes(t, votes);\n    await Analytics.event(this.w, \"voted\", { outcome: outcome });\n  }\n\n  async stopAndStart(t: Trello.PowerUp.IFrame): Promise<void> {\n    await Analytics.event(this.w, \"discussionStatusOverridden\");\n\n    await this.discussion.end(t);\n    await Analytics.event(this.w, \"discussionStatusChanged\", {\n      newStatus: \"stopped\",\n    });\n\n    await this.discussion.start(t);\n    await Analytics.event(this.w, \"discussionStatusChanged\", {\n      newStatus: \"started\",\n    });\n  }\n\n  async handleDiscussion(t: Trello.PowerUp.IFrame): Promise<void> {\n    if (await this.discussion.isOngoingOrPausedForAnotherCard(t)) {\n      const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n      const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n      // https://github.com/tatablack/leaner-coffee-powerup/issues/12\n      if (await this.discussion.hasNotBeenArchived(t, cardId)) {\n        const allCards = await t.cards(\"id\", \"name\");\n        const cardBeingDiscussed = allCards.find((card) => card.id === cardId);\n\n        return t.popup({\n          callback: this.stopAndStart,\n          title: \"Leaner Coffee\",\n          url: `${this.baseUrl}/ongoing_or_paused.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n          args: {\n            currentCardBeingDiscussed: cardBeingDiscussed.name,\n            currentDiscussionStatus: boardStatus,\n            localization: I18nConfig,\n          },\n          height: 120,\n        });\n      }\n\n      console.warn(\n        `Card with id ${cardId} not found in current board, most likely archived. Cleaning up.`,\n      );\n\n      await Analytics.event(this.w, \"discussionMenuOpened\", {\n        status: \"ongoing other\",\n      });\n\n      await this.boardStorage.deleteMultiple(t, [\n        BoardStorage.DISCUSSION_STATUS,\n        BoardStorage.DISCUSSION_CARD_ID,\n        BoardStorage.DISCUSSION_STARTED_AT,\n        BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n        BoardStorage.DISCUSSION_INTERVAL_ID,\n      ]);\n    }\n\n    let items: Trello.PowerUp.PopupOptionsItem[] = [];\n    let status: string;\n\n    switch (true) {\n      case await this.discussion.isOngoingFor(t):\n        items = [\n          {\n            text: t.localizeKey(\"pauseTimer\", { symbol: \"❙ ❙\" }), // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"paused\",\n              });\n              await this.discussion.pause(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"pausingTimer\", { symbol: \"❙ ❙\" }), // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n              );\n            },\n          },\n          {\n            text: t.localizeKey(\"endDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"stopped\",\n              });\n              await this.discussion.end(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"endingDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n              );\n            },\n          },\n        ];\n        status = \"ongoing\";\n        break;\n      case await this.discussion.isPausedFor(t):\n        items = [\n          {\n            text: t.localizeKey(\"resumeDiscussion\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"resumed\",\n              });\n              await this.discussion.start(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"resumingDiscussion\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n              );\n            },\n          },\n          {\n            text: t.localizeKey(\"endDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"stopped\",\n              });\n              await this.discussion.end(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"endingDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n              );\n            },\n          },\n        ];\n        status = \"paused\";\n        break;\n      default:\n        items = [\n          {\n            text: t.localizeKey(\"startTimer\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"started\",\n              });\n              await this.discussion.start(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"startingTimer\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n              );\n            },\n          },\n        ];\n\n        if (await this.discussion.hasEverBeenDiscussed(t)) {\n          items.push({\n            text: t.localizeKey(\"resetDiscussion\", { symbol: \"↺\" }), // ANTICLOCKWISE OPEN CIRCLE ARROW\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"reset\",\n              });\n              await this.discussion.reset(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"resettingDiscussion\", { symbol: \"↺\" }), // ANTICLOCKWISE OPEN CIRCLE ARROW\n              );\n            },\n          });\n          status = \"discussed before\";\n        } else {\n          status = \"never discussed\";\n        }\n    }\n\n    await Analytics.event(this.w, \"discussionMenuOpened\", { status });\n\n    return t.popup({\n      title: \"Leaner Coffee\",\n      items,\n    });\n  }\n\n  async getButtonLabel(t: Trello.PowerUp.IFrame): Promise<string> {\n    let label = await this.discussion.cardStorage.getDiscussionButtonLabel(t);\n\n    if (label) {\n      setTimeout(() => {\n        this.discussion.cardStorage.saveDiscussionButtonLabel(t);\n      }, 2000);\n    }\n\n    label = label || t.localizeKey(\"discussion\");\n\n    return label;\n  }\n\n  async handlePowerupEnabled(t: Trello.PowerUp.AnonymousHostHandlers) {\n    const organisation = await t.organization(\"id\");\n    const board = await t.board(\"id\");\n    const organisationIdHash = await digestMessage(organisation.id);\n    const boardIdHash = await digestMessage(board.id);\n\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.POWER_UP_INSTALLATION_DATE]: new Date().toISOString(),\n      [BoardStorage.ORGANISATION_HASH]: organisationIdHash,\n      [BoardStorage.BOARD_HASH]: boardIdHash,\n    });\n  }\n\n  async start(): Promise<void> {\n    const trelloPlugin = this.t.initialize(this.capabilityHandlers.getAll(), {\n      localization: I18nConfig,\n      helpfulStacks: !isRunningInProduction(),\n    }) as Trello.PowerUp.Plugin;\n\n    this.discussion.init(trelloPlugin);\n\n    // There can be a race condition between the power-up starting\n    // and the on-enable event being triggered.\n    await navigator.locks.request(\n      \"powerup_init\",\n      { ifAvailable: true },\n      async (lock) => {\n        // if the lock is null, it means the on-enable handler is taking care of initialisation\n        if (lock === null) {\n          return;\n        }\n\n        if (!(await this.boardStorage.getInitialised(trelloPlugin))) {\n          await this.handlePowerupEnabled(trelloPlugin);\n        }\n      },\n    );\n\n    const organisationIdHash =\n      await this.boardStorage.getOrganisationIdHash(trelloPlugin);\n    const boardIdHash = await this.boardStorage.getBoardIdHash(trelloPlugin);\n\n    if (window.Sentry) {\n      window.Sentry.onLoad(async () => {\n        window.Sentry.setTags({\n          organisationIdHash: organisationIdHash,\n          boardIdHash: boardIdHash,\n        });\n      });\n    }\n\n    this.w.LeanerCoffeeAnalyticsReferrer = \"https://\" + organisationIdHash;\n    this.w.LeanerCoffeeAnalyticsHostname = boardIdHash;\n    this.w.LeanerCoffeeAnalyticsBeforeSend = Analytics.beforeSend;\n\n    window.setTimeout(async () => {\n      await Analytics.pageview(this.w);\n    }, 0);\n  }\n}\n\nexport default LeanCoffeePowerUp;\n","import LeanCoffeePowerUp from \"./LeanCoffeePowerUp\";\n\ndeclare global {\n  interface Window {\n    webkitAudioContext?: typeof AudioContext;\n  }\n}\n\nconst config: Config = process.env.CONFIG as unknown as Config;\n\nconst instance = new LeanCoffeePowerUp({\n  w: window,\n  config,\n});\n\ninstance.start();\n"],"names":["addZero","value","digits","str","toString","size","length","Array","join","concat","module","exports","ms","options","leading","showMs","unsignedMs","sign","duration","getSign","t","TypeError","days","Math","trunc","hours","minutes","seconds","parseMs","output","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getTagsForReporting","async","boardStorage","getOrganisationIdHash","getBoardIdHash","ErrorReporter","target","methodName","descriptor","originalMethod","isAsync","constructor","name","warningMessage","args","apply","this","error","console","warn","window","Sentry","captureException","ErrorReporterInjector","getOwnPropertyNames","filter","forEach","getOwnPropertyDescriptor","decoratedDescriptor","bindAll","classInstance","p","bind","Storage","scope","visibility","assign","read","cardId","write","set","writeMultiple","entries","remove","deleteMultiple","CardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionElapsed","DISCUSSION_ELAPSED","getDiscussionThumbs","DISCUSSION_THUMBS","getDiscussionButtonLabel","DISCUSSION_BUTTON_LABEL","saveDiscussionStatus","newStatus","saveDiscussionElapsed","newElapsed","saveDiscussionThumbs","newThumbs","saveVotes","newVotes","VOTES","deleteVotes","delete","saveDiscussionButtonLabel","newLabel","deleteDiscussionThumbs","sanitiseUrl","urlString","url","URL","protocol","hostname","port","pathname","beforeSend","event","payload","referrer","LeanerCoffeeAnalyticsReferrer","LeanerCoffeeAnalyticsHostname","pageview","eventData","umami","track","props","eventName","getOverrides","organisationIdHash","boardIdHash","encodeURIComponent","supportedLocales","I18nConfig","defaultLocale","resourceUrl","CapabilityHandlers","powerUp","boardButtonsHandler","versionChecker","isThereANewMinorOrMajor","icon","dark","baseUrl","light","text","localizeKey","callback","showMenu","cardBackSection","discussion","cardStorage","title","content","type","signUrl","cardBadges","elapsedCardBadge","render","votingCardBadge","badge","cardButtons","getButtonLabel","handleDiscussion","symbol","voting","hasCurrentMemberVoted","handleVoting","cardDetailBadges","elapsedCardDetailBadge","votingCardDetailBadge","listActions","Promise","resolve","t2","list","cards","id","listSorters","opts","sortedCards","all","map","card","leanCoffeeVotes","countVotesByCard","sort","cardA","cardB","sortedIds","onEnable","navigator","locks","request","ifAvailable","lock","isInitialised","getInitialised","handlePowerupEnabled","onDisable","showSettings","popup","height","localization","getAll","BoardStorage","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpInstallationDate","POWER_UP_INSTALLATION_DATE","ORGANISATION_HASH","setOrganisationIdHash","BOARD_HASH","setBoardIdHash","setPowerUpInstallationDate","installationDate","MemberStorage","POWER_UP_VERSION","LeanCoffeeBase","w","config","memberStorage","ElapsedCardBadge","getText","elapsed","getColor","isOngoingFor","isPausedFor","getElapsed","color","VotingCardBadge","getVoters","votes","getVotes","values","reduce","knownVoters","vote","username","push","fullName","avatar","voters","hasVoted","clearVoters","totalVoters","total","showVoters","items","commonData","Notifications","load","remoteAudioFile","fetch","audioData","arrayBuffer","audioBuffer","audioContext","decodeAudioData","sourceNode","createBufferSource","buffer","connect","destination","play","AudioContext","webkitAudioContext","audio","start","open","cardName","Notification","body","show","permission","requestPermission","Discussion","maxDiscussionDuration","init","getElapsedNotification","isOngoingOrPausedForAnotherCard","boardStatus","includes","getContext","hasEverBeenDiscussed","hasNotBeenArchived","find","updateElapsed","startedAt","Date","now","saveElapsed","pause","previousElapsed","setInterval","notify","intervalId","clearInterval","elapsedNotification","notifications","end","reset","digestMessage","message","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","from","Uint8Array","b","padStart","getType","slice","isString","String","INT","ALPHA_NUM","PRE_PART","BUILD_PART","SEMVER","REGEXP_INT","RegExp","REGEXP_SEMVER","REGEXP_SEMVER_STRICT","isValidSemVer","version","strict","test","parseVersionPart","part","nonPosInt","Error","parsedPart","parseInt","Number","isSafeInteger","RangeError","MAX_SAFE_INTEGER","parseSemVer","matches","major","minor","patch","pre","build","reg","vRel","vPre","vBuild","match","split","VersionChecker","storedVersionRaw","storedVersion","newVersion","isNewer","oldVersion","storeNewVersion","Voting","member","keys","getMaxVotes","currentList","ceil","canCurrentMemberVote","cardIds","countVotesByMember","TrelloPowerUp","defaultDuration","capabilityHandlers","maxVotes","currentMember","outcome","stopAndStart","cardBeingDiscussed","currentCardBeingDiscussed","currentDiscussionStatus","status","closePopup","label","setTimeout","organisation","organization","board","toISOString","trelloPlugin","initialize","helpfulStacks","onLoad","setTags","LeanerCoffeeAnalyticsBeforeSend"],"sourceRoot":""}