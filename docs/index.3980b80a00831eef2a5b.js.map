{"version":3,"file":"index.3980b80a00831eef2a5b.js","mappings":"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","sources":["webpack://leancoffee-powerup/../node_modules/.pnpm/format-duration@3.0.2/node_modules/format-duration/format-duration.js","webpack://leancoffee-powerup/webpack/bootstrap","webpack://leancoffee-powerup/webpack/runtime/compat get default export","webpack://leancoffee-powerup/webpack/runtime/define property getters","webpack://leancoffee-powerup/webpack/runtime/hasOwnProperty shorthand","webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/CardStorage.ts","webpack://leancoffee-powerup/./src/utils/Analytics.ts","webpack://leancoffee-powerup/./src/utils/I18nConfig.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/storage/MemberStorage.ts","webpack://leancoffee-powerup/./src/LeanCoffeeBase.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardBadge.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardDetailBadge.ts","webpack://leancoffee-powerup/./src/badges/VotingCardBadge.ts","webpack://leancoffee-powerup/./src/badges/VotingCardDetailBadge.ts","webpack://leancoffee-powerup/./src/utils/Notifications.ts","webpack://leancoffee-powerup/./src/utils/Discussion.ts","webpack://leancoffee-powerup/./src/utils/Hashing.ts","webpack://leancoffee-powerup/../node_modules/.pnpm/semver-parser@4.1.8/node_modules/semver-parser/modules/common.js","webpack://leancoffee-powerup/../node_modules/.pnpm/semver-parser@4.1.8/node_modules/semver-parser/modules/semver.js","webpack://leancoffee-powerup/./src/utils/VersionChecker.ts","webpack://leancoffee-powerup/./src/utils/Voting.ts","webpack://leancoffee-powerup/./src/LeanCoffeePowerUp.ts","webpack://leancoffee-powerup/./src/CapabilityHandlers.ts","webpack://leancoffee-powerup/./src/index.ts"],"sourcesContent":["// adapted from https://github.com/sindresorhus/parse-ms.\n// moved to internal function because parse-ms is now pure ESM.\nfunction parseMs (ms) {\n  if (typeof ms !== 'number') {\n    throw new TypeError('Expected a number')\n  }\n\n  return {\n    days: Math.trunc(ms / 86400000),\n    hours: Math.trunc(ms / 3600000) % 24,\n    minutes: Math.trunc(ms / 60000) % 60,\n    seconds: Math.trunc(ms / 1000) % 60,\n    ms: Math.trunc(ms) % 1000\n  }\n}\n\n// adapted from https://github.com/rafaelrinaldi/add-zero.\n// moved to internal function b/c addZero is unmaintained (7+ years).\n// stripped out negative sign logic since we're already doing it elsewhere.\nfunction addZero (value, digits) {\n  digits = digits || 2\n\n  let str = value.toString()\n  let size = 0\n\n  size = digits - str.length + 1\n  str = new Array(size).join('0').concat(str)\n\n  return str\n}\n\nfunction getSign (duration, showMs) {\n  if (showMs) return duration < 0 ? '-' : ''\n  return duration <= -1000 ? '-' : ''\n}\n\n/**\n * Convert a number in milliseconds to a standard duration string.\n * @param {number} ms - duration in milliseconds\n * @param {object} options - formatDuration options object\n * @param {boolean} [options.leading=false] - add leading zero\n * @param {boolean} [options.milliseconds=false] - add milliseconds\n * @returns string - formatted duration string\n */\nfunction formatDuration (ms, options) {\n  const leading = options && options.leading\n  const showMs = options && options.ms\n  const unsignedMs = ms < 0 ? -ms : ms\n  const sign = getSign(ms, showMs)\n  const t = parseMs(unsignedMs)\n  const seconds = addZero(t.seconds)\n  let output = ''\n\n  if (t.days && !output) output = sign + t.days + ':' + addZero(t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (t.hours && !output) output = sign + (leading ? addZero(t.hours) : t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (!output) output = sign + (leading ? addZero(t.minutes) : t.minutes) + ':' + seconds\n\n  if (showMs) output += '.' + addZero(t.ms, 3)\n  return output\n}\n\nmodule.exports = formatDuration\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { Trello } from \"../types/TrelloPowerUp\";\n\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(\n    scope: Trello.PowerUp.Scope = \"member\",\n    visibility: Trello.PowerUp.Visibility = \"private\",\n  ) {\n    Object.assign(this, { scope, visibility });\n  }\n\n  read(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  write(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    value: any,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: {\n      [key: string]: any;\n    },\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    key: string,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    entries: string[],\n    cardId?: string,\n  ): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass CardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_ELAPSED = \"leancoffeeDiscussionElapsed\";\n  static DISCUSSION_THUMBS = \"leancoffeeDiscussionThumbs\";\n  static VOTES = \"leancoffeeVotes\";\n  static DISCUSSION_BUTTON_LABEL = \"discussionButtonLabel\";\n\n  constructor() {\n    super(\"card\", \"shared\");\n  }\n\n  getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<DiscussionStatus> {\n    return super.read(t, CardStorage.DISCUSSION_STATUS);\n  }\n\n  getDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<number> {\n    return super.read(t, CardStorage.DISCUSSION_ELAPSED);\n  }\n\n  getDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<Thumbs> {\n    return super.read(t, CardStorage.DISCUSSION_THUMBS);\n  }\n\n  getDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<string> {\n    return super.read(t, CardStorage.DISCUSSION_BUTTON_LABEL);\n  }\n\n  saveDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newStatus: DiscussionStatus,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_STATUS, newStatus, cardId);\n  }\n\n  saveDiscussionElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newElapsed: number,\n    cardId?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_ELAPSED, newElapsed, cardId);\n  }\n\n  saveDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newThumbs: Thumbs,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_THUMBS, newThumbs);\n  }\n\n  saveVotes(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newVotes: Votes,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.VOTES, newVotes);\n  }\n\n  deleteVotes(t: Trello.PowerUp.AnonymousHostHandlers): PromiseLike<void> {\n    return super.delete(t, CardStorage.VOTES);\n  }\n\n  saveDiscussionButtonLabel(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    newLabel?: string,\n  ): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_BUTTON_LABEL, newLabel);\n  }\n\n  deleteDiscussionThumbs(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): PromiseLike<void> {\n    return super.delete(t, CardStorage.DISCUSSION_THUMBS);\n  }\n}\n\nexport default CardStorage;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nimport CustomPayload = umami.CustomPayload;\n\nconst sanitiseUrl = (urlString: string): string => {\n  const url = new URL(urlString);\n  return (\n    url.protocol +\n    url.hostname +\n    (url.port ? `:${url.port}` : \"\") +\n    url.pathname\n  );\n};\n\nconst beforeSend = (event: string, payload: CustomPayload): CustomPayload => {\n  return {\n    ...payload,\n    ...{\n      referrer: window.LeanerCoffeeAnalyticsReferrer,\n      hostname: window.LeanerCoffeeAnalyticsHostname,\n    },\n    url: sanitiseUrl(payload.url),\n  };\n};\n\nconst pageview = async (window: Window, eventData: umami.EventData = {}) => {\n  if (window.umami) {\n    await window.umami.track((props: any) => {\n      return { ...props, ...eventData };\n    });\n  } else {\n    console.warn(\"Umami not available for pageview\", eventData);\n  }\n};\n\nconst event = async (\n  window: Window,\n  eventName: string,\n  eventData?: umami.EventData,\n) => {\n  if (window.umami) {\n    await window.umami.track(eventName, eventData);\n  } else {\n    console.warn(\"Umami not available for event \" + eventName, eventData);\n  }\n};\n\nconst getOverrides = async (\n  boardStorage: BoardStorage,\n  t: Trello.PowerUp.AnonymousHostHandlers,\n): Promise<string> => {\n  const organisationIdHash = await boardStorage.getOrganisationIdHash(t);\n  const boardIdHash = await boardStorage.getBoardIdHash(t);\n  const referrer = encodeURIComponent(\"https://\" + organisationIdHash);\n  return `referrer=${referrer}&hostname=${boardIdHash}`;\n};\n\nconst Analytics = {\n  beforeSend,\n  pageview,\n  event,\n  getOverrides,\n};\n\nexport default Analytics;\n","import { Trello } from \"../types/TrelloPowerUp\";\n\nconst config: Config = process.env.CONFIG as unknown as Config;\nconst { supportedLocales } = config[process.env.NODE_ENV as Environment];\n\nexport const I18nConfig: Trello.PowerUp.Localization = {\n  defaultLocale: \"en\",\n  supportedLocales,\n  resourceUrl: \"/i18n/{locale}.json\",\n};\n","import Storage from \"./Storage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass BoardStorage extends Storage {\n  static DISCUSSION_STATUS = \"leancoffeeDiscussionStatus\";\n  static DISCUSSION_CARD_ID = \"leancoffeeDiscussionCardId\";\n  static DISCUSSION_STARTED_AT = \"leancoffeeDiscussionStartedAt\";\n  static DISCUSSION_PREVIOUS_ELAPSED = \"leancoffeeDiscussionPreviousElapsed\";\n  static DISCUSSION_INTERVAL_ID = \"leancoffeeDiscussionIntervalId\";\n  static POWER_UP_INSTALLATION_DATE = \"powerUpInstallationDate\";\n  static ORGANISATION_HASH = \"organisationHash\";\n  static BOARD_HASH = \"boardHash\";\n\n  constructor() {\n    super(\"board\", \"shared\");\n  }\n\n  async getDiscussionStatus(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStatus> {\n    return super.read(t, BoardStorage.DISCUSSION_STATUS);\n  }\n\n  async getDiscussionCardId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n  }\n\n  async getDiscussionStartedAt(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionStartedAt> {\n    return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n  }\n\n  async getDiscussionPreviousElapsed(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionPreviousElapsed> {\n    return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n  }\n\n  async getDiscussionIntervalId(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<DiscussionIntervalId> {\n    return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n  }\n\n  async getPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.POWER_UP_INSTALLATION_DATE);\n  }\n\n  async getOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.ORGANISATION_HASH);\n  }\n\n  async setOrganisationIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.ORGANISATION_HASH, value);\n  }\n\n  async getBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<string> {\n    return super.read(t, BoardStorage.BOARD_HASH);\n  }\n\n  async setBoardIdHash(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    value: string,\n  ): Promise<void> {\n    return super.write(t, BoardStorage.BOARD_HASH, value);\n  }\n\n  async getInitialised(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n  ): Promise<boolean> {\n    const installationDate = await super.read(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n    );\n    return !!installationDate;\n  }\n\n  setPowerUpInstallationDate(\n    t: Trello.PowerUp.AnonymousHostHandlers,\n    installationDate: string,\n  ): PromiseLike<void> {\n    return super.write(\n      t,\n      BoardStorage.POWER_UP_INSTALLATION_DATE,\n      installationDate,\n    );\n  }\n}\n\nexport default BoardStorage;\n","import Storage from \"./Storage\";\n\nclass MemberStorage extends Storage {\n  static POWER_UP_VERSION = \"powerUpVersion\";\n\n  constructor() {\n    super(\"member\", \"private\");\n  }\n}\n\nexport default MemberStorage;\n","import BoardStorage from \"./storage/BoardStorage\";\nimport CardStorage from \"./storage/CardStorage\";\nimport MemberStorage from \"./storage/MemberStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\n\nexport interface LeanCoffeeBaseParams {\n  w: Window;\n  config: Config;\n  t?: Trello.PowerUp | Trello.PowerUp.IFrame;\n}\n\nexport class LeanCoffeeBase {\n  w: Window;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n  memberStorage: MemberStorage;\n  config: Config;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    this.w = w;\n    this.config = config;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n    this.memberStorage = new MemberStorage();\n  }\n\n  isRunningInProduction = (): boolean =>\n    (process.env.NODE_ENV as Environment) === \"production\";\n}\n","import formatDuration from \"format-duration\";\n\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Discussion from \"../utils/Discussion\";\n\nclass ElapsedCardBadge implements ElapsedCardBadge {\n  discussion: Discussion;\n\n  constructor(discussion: Discussion) {\n    this.discussion = discussion;\n    this.render = this.render.bind(this);\n  }\n\n  getText = async (\n    t: Trello.PowerUp.IFrame,\n    elapsed: number,\n  ): Promise<string> => formatDuration(elapsed);\n\n  getColor = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.Colors> => {\n    const isOngoing = await this.discussion.isOngoingFor(t);\n\n    if (isOngoing) {\n      return \"orange\";\n    }\n\n    return (await this.discussion.isPausedFor(t)) ? \"yellow\" : \"light-gray\";\n  };\n\n  // Unable to use class properties here because in subclasses\n  // I need to user `super`, and it wouldn't be possible. See:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#accessing_super_in_class_field_declaration\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const elapsed = await this.discussion.getElapsed(t);\n    if (!elapsed) {\n      return null;\n    }\n\n    return {\n      text: await this.getText(t, elapsed),\n      color: await this.getColor(t),\n    };\n  }\n}\n\nexport default ElapsedCardBadge;\n","import ElapsedCardBadge from \"./ElapsedCardBadge\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass ElapsedCardDetailBadge extends ElapsedCardBadge {\n  render = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const discussionStatus: DiscussionStatus =\n      await this.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus !== \"ENDED\") {\n      return null;\n    }\n\n    const badge = (await super.render(t)) as Trello.PowerUp.CardDetailBadge;\n    badge.title = t.localizeKey(\"discussionDurationTitle\");\n    return badge;\n  };\n}\n\nexport default ElapsedCardDetailBadge;\n","import BoardStorage from \"../storage/BoardStorage\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Voting from \"../utils/Voting\";\n\nclass VotingCardBadge {\n  w: Window;\n  baseUrl: string;\n  voting: Voting;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n\n  constructor(\n    w: Window,\n    baseUrl: string,\n    voting: Voting,\n    boardStorage: BoardStorage,\n    cardStorage: CardStorage,\n  ) {\n    this.w = w;\n    this.baseUrl = baseUrl;\n    this.voting = voting;\n    this.boardStorage = boardStorage;\n    this.cardStorage = cardStorage;\n    this.render = this.render.bind(this);\n  }\n\n  getVoters = async (t: Trello.PowerUp.IFrame): Promise<{ text: string }[]> => {\n    const votes: Votes = (await this.voting.getVotes(t)) || {};\n\n    return Object.values(votes).reduce(\n      (knownVoters: { text: string; avatar: string }[], vote) => {\n        if (vote.username) {\n          knownVoters.push({\n            text: `${vote.fullName} (${vote.username})`,\n            avatar: vote.avatar,\n          });\n        }\n\n        return knownVoters;\n      },\n      [],\n    );\n  };\n\n  // Unable to use class properties here because in subclasses\n  // I need to user `super`, and it wouldn't be possible. See:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#accessing_super_in_class_field_declaration\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const voters = await this.getVoters(t);\n\n    if (!voters.length) {\n      return null;\n    }\n\n    const hasVoted = await this.voting.hasCurrentMemberVoted(t);\n\n    return {\n      text: voters.length.toString(),\n      color: hasVoted ? \"blue\" : null,\n      icon: `${this.baseUrl}/assets/powerup/${hasVoted ? \"heart_white.svg\" : \"heart.svg\"}`,\n    };\n  }\n}\n\nexport default VotingCardBadge;\n","import VotingCardBadge from \"./VotingCardBadge\";\nimport { Trello } from \"../types/TrelloPowerUp\";\nimport Analytics from \"../utils/Analytics\";\nimport { I18nConfig } from \"../utils/I18nConfig\";\n\nclass VotingCardDetailBadge extends VotingCardBadge {\n  clearVoters = async (t: Trello.PowerUp.IFrame) => {\n    const totalVoters = await this.getVoters(t);\n\n    await this.cardStorage.deleteVotes(t);\n    await Analytics.event(this.w, \"votesCleared\", {\n      total: totalVoters.length,\n    });\n  };\n\n  showVoters = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const items = await this.getVoters(t);\n\n    if (!items.length) {\n      return;\n    }\n\n    await t.popup({\n      title: t.localizeKey(\"voters\"),\n      url: `./voters.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n      args: {\n        items,\n        localization: I18nConfig,\n      },\n      callback: this.clearVoters,\n    });\n  };\n\n  render = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const commonData = (await super.render(\n      t,\n    )) as Trello.PowerUp.CardDetailBadge;\n\n    if (commonData) {\n      commonData.title = t.localizeKey(\"voters\");\n      delete commonData.icon;\n      commonData.callback = this.showVoters;\n    }\n\n    return commonData;\n  };\n}\n\nexport default VotingCardDetailBadge;\n","export type NotificationType = {\n  [key in \"audio\" | \"text\"]: string;\n};\n\nclass Notifications {\n  w: Window;\n  baseUrl: string;\n  audioContext: AudioContext;\n\n  constructor(window: Window, baseUrl: string) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n  }\n\n  async load(url: string): Promise<AudioBufferSourceNode> {\n    const remoteAudioFile = await fetch(url);\n    const audioData = await remoteAudioFile.arrayBuffer();\n    const audioBuffer = await this.audioContext.decodeAudioData(audioData);\n    const sourceNode = this.audioContext.createBufferSource();\n    sourceNode.buffer = audioBuffer;\n    sourceNode.connect(this.audioContext.destination);\n    return sourceNode;\n  }\n\n  async play(type: NotificationType): Promise<void> {\n    this.audioContext =\n      this.audioContext || new (AudioContext || this.w.webkitAudioContext)();\n    const audio = await this.load(`${this.baseUrl}/${type.audio}`);\n    audio.start();\n  }\n\n  open(type: NotificationType, cardName: string): void {\n    new Notification(cardName, {\n      body: type.text,\n      icon: `${this.baseUrl}/assets/timer.png`,\n    });\n  }\n\n  show(type: NotificationType, cardName: string): void {\n    if (!(\"Notification\" in this.w) || Notification.permission === \"denied\") {\n      return;\n    }\n\n    if (Notification.permission === \"granted\") {\n      this.open(type, cardName);\n    } else {\n      Notification.requestPermission((permission) => {\n        if (permission === \"granted\") {\n          this.open(type, cardName);\n        }\n      });\n    }\n  }\n}\n\nexport default Notifications;\n","import Analytics from \"./Analytics\";\nimport Notifications, { NotificationType } from \"./Notifications\";\nimport BoardStorage from \"../storage/BoardStorage\";\nimport CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass Discussion {\n  w: Window;\n  p: Trello.PowerUp.Plugin;\n  baseUrl: string;\n  maxDiscussionDuration: number;\n  notifications: Notifications;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n\n  constructor(window: Window, baseUrl: string, maxDiscussionDuration: number) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n    this.notifications = new Notifications(this.w, this.baseUrl);\n    this.maxDiscussionDuration = maxDiscussionDuration;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n  }\n\n  init = (p: Trello.PowerUp.Plugin): void => {\n    this.p = p;\n  };\n\n  getElapsedNotification = (): NotificationType => ({\n    audio: \"assets/looking_down.mp3\",\n    text: this.p.localizeKey(\"elapsedNotification\"),\n  });\n\n  isOngoingOrPausedForAnotherCard = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<boolean> => {\n    const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n    return (\n      [\"ONGOING\", \"PAUSED\"].includes(boardStatus) &&\n      cardId !== t.getContext().card\n    );\n  };\n\n  hasEverBeenDiscussed = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus !== undefined;\n  };\n\n  hasNotBeenArchived = async (\n    t: Trello.PowerUp.IFrame,\n    cardId: string,\n  ): Promise<boolean> => {\n    const allCards = await t.cards(\"id\", \"name\");\n    return !!allCards.find((card) => card.id === cardId);\n  };\n\n  isOngoingFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === \"ONGOING\";\n  };\n\n  isPausedFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === \"PAUSED\";\n  };\n\n  getElapsed = (t: Trello.PowerUp.IFrame): PromiseLike<number> =>\n    this.cardStorage.getDiscussionElapsed(t);\n\n  updateElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const elapsed = Date.now() - startedAt;\n\n    await this.saveElapsed(t);\n\n    if (elapsed > this.maxDiscussionDuration) {\n      await this.pause(t, true);\n      await Analytics.event(this.w, \"discussionStatusChanged\", {\n        newStatus: \"ended\",\n      });\n    }\n  };\n\n  saveElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const previousElapsed =\n      (await this.boardStorage.getDiscussionPreviousElapsed(t)) || 0;\n    const elapsed = startedAt ? Date.now() - startedAt : 0;\n\n    await this.cardStorage.saveDiscussionElapsed(\n      t,\n      elapsed + previousElapsed,\n      cardId,\n    );\n  };\n\n  start = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: \"ONGOING\",\n      [BoardStorage.DISCUSSION_CARD_ID]: t.getContext().card,\n      [BoardStorage.DISCUSSION_STARTED_AT]: Date.now(),\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: setInterval(\n        this.updateElapsed,\n        5000,\n        t,\n      ),\n    });\n\n    await this.cardStorage.saveDiscussionStatus(t, \"ONGOING\");\n    await this.cardStorage.deleteDiscussionThumbs(t);\n  };\n\n  pause = async (t: Trello.PowerUp.IFrame, notify = false): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const cardName = (await t.cards(\"id\", \"name\")).find(\n      (card) => card.id === cardId,\n    ).name;\n\n    clearInterval(intervalId);\n\n    await this.cardStorage.saveDiscussionStatus(t, \"PAUSED\");\n    await this.saveElapsed(t);\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: \"PAUSED\",\n      [BoardStorage.DISCUSSION_STARTED_AT]: null,\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: null,\n    });\n\n    if (notify) {\n      const elapsedNotification = this.getElapsedNotification();\n      await this.notifications.play(elapsedNotification);\n      this.notifications.show(elapsedNotification, cardName);\n    }\n  };\n\n  end = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    clearInterval(intervalId);\n\n    try {\n      await this.cardStorage.saveDiscussionStatus(t, \"ENDED\", cardId);\n      await this.saveElapsed(t);\n      await this.cardStorage.deleteMultiple(\n        t,\n        [CardStorage.DISCUSSION_THUMBS],\n        cardId,\n      );\n      await this.boardStorage.deleteMultiple(t, [\n        BoardStorage.DISCUSSION_STATUS,\n        BoardStorage.DISCUSSION_CARD_ID,\n        BoardStorage.DISCUSSION_STARTED_AT,\n        BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n        BoardStorage.DISCUSSION_INTERVAL_ID,\n      ]);\n    } catch (err) {\n      throw new Error(\n        err instanceof Error && err.message\n          ? err.message\n          : \"Error while ending a discussion\",\n      );\n    }\n  };\n\n  reset = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (await this.hasEverBeenDiscussed(t)) {\n      await this.cardStorage.deleteMultiple(\n        t,\n        [\n          CardStorage.DISCUSSION_STATUS,\n          CardStorage.DISCUSSION_ELAPSED,\n          CardStorage.DISCUSSION_THUMBS,\n        ],\n        t.getContext().card,\n      );\n    }\n  };\n}\n\nexport default Discussion;\n","// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\nexport async function digestMessage(message: string) {\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\"); // convert bytes to hex string\n  return hashHex;\n}\n","/**\n * common.js\n */\n\n/* constants */\nconst TYPE_FROM = 8;\nconst TYPE_TO = -1;\n\n/**\n * get type\n * @param {*} o - object to check\n * @returns {string} - type of object\n */\nexport const getType = o =>\n  Object.prototype.toString.call(o).slice(TYPE_FROM, TYPE_TO);\n\n/**\n * is string\n * @param {*} o - object to check\n * @returns {boolean} - result\n */\nexport const isString = o => typeof o === 'string' || o instanceof String;\n","/**\n * semver.js\n * @see {@link http://semver.org/|Semantic Versioning}\n * @see {@link https://github.com/mojombo/semver/|mojombo/semver}\n */\n\n/* api */\nimport { getType, isString } from './common.js';\n\n/* constants */\nconst BASE = 10;\nconst INT = '0|[1-9]\\\\d*';\nconst ALPHA_NUM = '\\\\d*[A-Z-][A-Z\\\\d-]*';\nconst PRE_PART = `(?:${ALPHA_NUM}|${INT})`;\nconst PRE = `${PRE_PART}(?:\\\\.${PRE_PART})*`;\nconst BUILD_PART = `(?:${ALPHA_NUM}|\\\\d+)`;\nconst BUILD = `${BUILD_PART}(?:\\\\.${BUILD_PART})*`;\nconst SEMVER =\n  `((?:${INT})(?:\\\\.(?:${INT})){2})(?:-(${PRE}))?(?:\\\\+(${BUILD}))?`;\nconst REGEXP_INT = new RegExp(`^(?:${INT})$`);\nconst REGEXP_SEMVER = new RegExp(`^v?${SEMVER}$`, 'i');\nconst REGEXP_SEMVER_STRICT = new RegExp(`^${SEMVER}$`, 'i');\n\n/**\n * parsed SemVer object\n * @typedef {object} SemVerObject\n * @property {string} version - version string\n * @property {boolean} matches - matches SemVer format\n * @property {number|undefined} major - major version\n * @property {number|undefined} minor - minor version\n * @property {number|undefined} patch - patch version\n * @property {Array<string|number>|undefined} pre - pre-release version in array\n * @property {Array<string|number>|undefined} build - build ID in array\n */\n\n/**\n * is valid SemVer string\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {boolean} - result\n */\nexport const isValidSemVer = (version, strict = false) => {\n  if (!isString(version)) {\n    throw new TypeError(`Expected String but got ${getType(version)}.`);\n  }\n  const reg = strict ? REGEXP_SEMVER_STRICT : REGEXP_SEMVER;\n  return reg.test(version);\n};\n\n/**\n * parse version part\n * @param {string} part - version part\n * @param {boolean} [nonPosInt] - accept non positive integer\n * @returns {string|number} - parsed version part\n */\nexport const parseVersionPart = (part, nonPosInt = false) => {\n  if (!isString(part)) {\n    throw new TypeError(`Expected String but got ${getType(part)}.`);\n  }\n  if (!(nonPosInt || REGEXP_INT.test(part))) {\n    throw new Error(`${part} is not a stringified positive integer.`);\n  }\n  let parsedPart;\n  if (REGEXP_INT.test(part)) {\n    parsedPart = parseInt(part, BASE);\n    if (!Number.isSafeInteger(parsedPart)) {\n      throw new RangeError(`${parsedPart} exceeds ${Number.MAX_SAFE_INTEGER}.`);\n    }\n  } else {\n    parsedPart = part;\n  }\n  return parsedPart;\n};\n\n/**\n * compare SemVer\n * @param {string} version - version string\n * @param {string} base - base version string to compare from\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {number}\n *   - -1 or negative number, if version is less than base version\n *     0, if version is equal to base version\n *     1 or positive number, if version is greater than base version\n */\nexport const compareSemVer = (version, base, strict = false) => {\n  if (!isString(version)) {\n    throw new TypeError(`Expected String but got ${getType(version)}.`);\n  }\n  if (!isString(base)) {\n    throw new TypeError(`Expected String but got ${getType(base)}.`);\n  }\n  if (!isValidSemVer(version, !!strict)) {\n    throw new Error(`Invalid version string: ${version}`);\n  }\n  if (!isValidSemVer(base, !!strict)) {\n    throw new Error(`Invalid version string: ${base}`);\n  }\n  let result;\n  if (version === base) {\n    result = 0;\n  } else {\n    const reg = strict ? REGEXP_SEMVER_STRICT : REGEXP_SEMVER;\n    const [, vRel, vPre] = version.match(reg);\n    const [, bRel, bPre] = base.match(reg);\n    const [vMajor, vMinor, vPatch] =\n      vRel.split('.').map(part => parseVersionPart(part));\n    const [bMajor, bMinor, bPatch] =\n      bRel.split('.').map(part => parseVersionPart(part));\n    if (vMajor > bMajor) {\n      result = 1;\n    } else if (vMajor < bMajor) {\n      result = -1;\n    } else if (vMinor > bMinor) {\n      result = 1;\n    } else if (vMinor < bMinor) {\n      result = -1;\n    } else if (vPatch > bPatch) {\n      result = 1;\n    } else if (vPatch < bPatch) {\n      result = -1;\n    } else if (vPre === bPre) {\n      result = 0;\n    } else if (!vPre && bPre) {\n      result = 1;\n    } else if (vPre && !bPre) {\n      result = -1;\n    } else {\n      const vPreParts = vPre.split('.').map(part =>\n        parseVersionPart(part, true)\n      );\n      const bPreParts = bPre.split('.').map(part =>\n        parseVersionPart(part, true)\n      );\n      const l = Math.max(vPreParts.length, bPreParts.length);\n      let i = 0;\n      while (i < l) {\n        const vPart = vPreParts[i];\n        const bPart = bPreParts[i];\n        if ((vPart && !bPart) || (isString(vPart) && Number.isInteger(bPart))) {\n          result = 1;\n        } else if ((!vPart && bPart) ||\n                   (Number.isInteger(vPart) && isString(bPart))) {\n          result = -1;\n        } else if (vPart !== bPart && isString(vPart) && isString(bPart)) {\n          result = vPart.localeCompare(bPart);\n        } else if (Number.isInteger(vPart) && Number.isInteger(bPart)) {\n          if (vPart > bPart) {\n            result = 1;\n          } else if (vPart < bPart) {\n            result = -1;\n          }\n        }\n        if (Number.isInteger(result)) {\n          break;\n        }\n        i++;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * parse SemVer string\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {SemVerObject} - result\n */\nexport const parseSemVer = (version, strict = false) => {\n  if (!isString(version)) {\n    throw new TypeError(`Expected String but got ${getType(version)}.`);\n  }\n  const matches = isValidSemVer(version, !!strict);\n  let major, minor, patch, pre, build;\n  if (matches) {\n    const reg = strict ? REGEXP_SEMVER_STRICT : REGEXP_SEMVER;\n    const [, vRel, vPre, vBuild] = version.match(reg);\n    [major, minor, patch] = vRel.split('.').map(part => parseVersionPart(part));\n    if (vPre) {\n      pre = vPre.split('.').map(part => parseVersionPart(part, true));\n    }\n    if (vBuild) {\n      build = vBuild.split('.').map(part => parseVersionPart(part, true));\n    }\n  }\n  return {\n    version, matches, major, minor, patch, pre, build\n  };\n};\n\n/* async wrappers */\n/**\n * compare SemVer (async)\n * @param {string} version - version string\n * @param {string} base - base version string to compare from\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {Promise.<number>}\n *   - -1 or negative number, if version is less than base version\n *     0, if version is equal to base version\n *     1 or positive number, if version is greater than base version\n */\nconst compareSemVerAsync = async (version, base, strict = false) => {\n  const res = compareSemVer(version, base, strict);\n  return res;\n};\n\n/**\n * is valid SemVer string (async)\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {Promise.<boolean>} - result\n */\nconst isValidSemVerAsync = async (version, strict = false) => {\n  const res = isValidSemVer(version, strict);\n  return res;\n};\n\n/**\n * parse SemVer string (async)\n * @param {string} version - version string\n * @param {boolean} [strict] - reject 'v' prefixed\n * @returns {Promise.<SemVerObject>} - result\n */\nconst parseSemVerAsync = async (version, strict = false) => {\n  const res = parseSemVer(version, strict);\n  return res;\n};\n\n/* export async functions */\nexport const promises = {\n  compareSemVer: compareSemVerAsync,\n  isValidSemVer: isValidSemVerAsync,\n  parseSemVer: parseSemVerAsync\n};\n","import { parseSemVer } from \"semver-parser\";\n\nimport Analytics from \"./Analytics\";\nimport { I18nConfig } from \"./I18nConfig\";\nimport BoardStorage from \"../storage/BoardStorage\";\nimport MemberStorage from \"../storage/MemberStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass VersionChecker {\n  boardStorage: BoardStorage;\n  memberStorage: MemberStorage;\n\n  constructor(boardStorage: BoardStorage, memberStorage: MemberStorage) {\n    this.boardStorage = boardStorage;\n    this.memberStorage = memberStorage;\n  }\n\n  isThereANewMinorOrMajor = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<boolean> => {\n    const storedVersionRaw = await this.memberStorage.read(\n      t,\n      MemberStorage.POWER_UP_VERSION,\n    );\n\n    if (!storedVersionRaw) {\n      return true;\n    }\n\n    const storedVersion = parseSemVer(storedVersionRaw);\n    const newVersion = parseSemVer(__BUILDTIME_VERSION__);\n\n    const isNewer =\n      newVersion.major > storedVersion.major ||\n      newVersion.minor > storedVersion.minor;\n\n    return !storedVersion || isNewer;\n  };\n\n  showMenu = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const storedVersion = await this.memberStorage.read(\n      t,\n      MemberStorage.POWER_UP_VERSION,\n    );\n    const title = storedVersion\n      ? t.localizeKey(\"boardButtonPopupTitle\", {\n          oldVersion: storedVersion,\n          newVersion: __BUILDTIME_VERSION__,\n        })\n      : t.localizeKey(\"boardButtonPopupTitleMissingVersion\", {\n          newVersion: __BUILDTIME_VERSION__,\n        });\n\n    return t.popup({\n      title: title,\n      url: `./release-notes.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n      args: { version: __BUILDTIME_VERSION__, localization: I18nConfig },\n      callback: this.storeNewVersion,\n      height: 65,\n    });\n  };\n\n  storeNewVersion = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.memberStorage.write(\n      t,\n      MemberStorage.POWER_UP_VERSION,\n      __BUILDTIME_VERSION__,\n    );\n  };\n}\n\nexport default VersionChecker;\n","import CardStorage from \"../storage/CardStorage\";\nimport { Trello } from \"../types/TrelloPowerUp\";\n\nclass Voting {\n  cardStorage: CardStorage;\n\n  constructor() {\n    this.cardStorage = new CardStorage();\n  }\n\n  hasCurrentMemberVoted = async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<boolean> => {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES);\n    if (!votes) {\n      return false;\n    }\n\n    const currentMember = t.getContext().member;\n    return !!votes[currentMember];\n  };\n\n  getVotes = async (t: Trello.PowerUp.IFrame): Promise<Votes> =>\n    this.cardStorage.read(t, CardStorage.VOTES);\n\n  countVotesByCard = async (\n    t: Trello.PowerUp.IFrame,\n    cardId: string,\n  ): Promise<number> => {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n\n    if (!votes) {\n      return 0;\n    }\n\n    return Object.keys(votes).filter((key) => votes[key]).length;\n  };\n\n  getMaxVotes = async (t: Trello.PowerUp.IFrame): Promise<number> => {\n    const currentList = await t.list(\"cards\");\n\n    // https://www.talcottridge.com/multi-voting-math-or-n3\n    return Math.ceil(currentList.cards.length / 3);\n  };\n\n  canCurrentMemberVote = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    if (await this.hasCurrentMemberVoted(t)) {\n      return true;\n    }\n\n    const currentList = await t.list(\"cards\");\n    const cardIds = currentList.cards.map((card) => card.id);\n    const currentMemberVotes = await this.countVotesByMember(t, cardIds);\n    const maxVotes = await this.getMaxVotes(t);\n\n    return currentMemberVotes < maxVotes;\n  };\n\n  countVotesByMember = async (\n    t: Trello.PowerUp.IFrame,\n    cardIds: string[],\n  ): Promise<number> => {\n    const listVotes: number[] = await Promise.all(\n      cardIds.map(async (cardId): Promise<number> => {\n        const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n        if (!votes) {\n          return 0;\n        }\n\n        const currentMember = t.getContext().member;\n        return votes[currentMember] ? 1 : 0;\n      }),\n    );\n\n    return listVotes.reduce((total, vote): number => total + vote, 0);\n  };\n}\n\nexport default Voting;\n","import { CapabilityHandlers } from \"./CapabilityHandlers\";\nimport { LeanCoffeeBase, LeanCoffeeBaseParams } from \"./LeanCoffeeBase\";\nimport ElapsedCardBadge from \"./badges/ElapsedCardBadge\";\nimport ElapsedCardDetailBadge from \"./badges/ElapsedCardDetailBadge\";\nimport VotingCardBadge from \"./badges/VotingCardBadge\";\nimport VotingCardDetailBadge from \"./badges/VotingCardDetailBadge\";\nimport BoardStorage from \"./storage/BoardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport Analytics from \"./utils/Analytics\";\nimport Discussion from \"./utils/Discussion\";\nimport { digestMessage } from \"./utils/Hashing\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\nimport VersionChecker from \"./utils/VersionChecker\";\nimport Voting from \"./utils/Voting\";\n\nclass LeanCoffeePowerUp extends LeanCoffeeBase {\n  t: Trello.PowerUp;\n  baseUrl: string;\n  discussion: Discussion;\n  voting: Voting;\n  elapsedCardBadge: ElapsedCardBadge;\n  elapsedCardDetailBadge: ElapsedCardDetailBadge;\n  votingCardBadge: VotingCardBadge;\n  votingCardDetailBadge: VotingCardDetailBadge;\n  versionChecker: VersionChecker;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    super({ w, config });\n    this.t = w.TrelloPowerUp;\n\n    const { hostname, port, defaultDuration } =\n      this.config[process.env.NODE_ENV as Environment];\n    this.baseUrl = `${hostname}${port ? `:${port}` : \"\"}`;\n\n    this.discussion = new Discussion(this.w, this.baseUrl, defaultDuration);\n    this.voting = new Voting();\n    this.versionChecker = new VersionChecker(\n      this.boardStorage,\n      this.memberStorage,\n    );\n\n    this.elapsedCardBadge = new ElapsedCardBadge(this.discussion);\n    this.elapsedCardDetailBadge = new ElapsedCardDetailBadge(this.discussion);\n    this.votingCardBadge = new VotingCardBadge(\n      this.w,\n      this.baseUrl,\n      this.voting,\n      this.boardStorage,\n      this.cardStorage,\n    );\n    this.votingCardDetailBadge = new VotingCardDetailBadge(\n      this.w,\n      this.baseUrl,\n      this.voting,\n      this.boardStorage,\n      this.cardStorage,\n    );\n  }\n\n  handleVoting = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (!(await this.voting.canCurrentMemberVote(t))) {\n      return t.popup({\n        title: \"Leaner Coffee\",\n        url: `${this.baseUrl}/too_many_votes.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n        args: {\n          maxVotes: await this.voting.getMaxVotes(t),\n          localization: I18nConfig,\n        },\n        height: 98,\n      });\n    }\n\n    const votes = (await this.voting.getVotes(t)) || {};\n    const currentMember = await t.member(\n      \"id\",\n      \"username\",\n      \"fullName\",\n      \"avatar\",\n    );\n\n    let outcome: string;\n\n    if (votes[currentMember.id]) {\n      delete votes[currentMember.id];\n      outcome = \"removed\";\n    } else {\n      votes[currentMember.id] = {\n        username: currentMember.username,\n        fullName: currentMember.fullName,\n        avatar: currentMember.avatar, // currently unused\n      };\n      outcome = \"added\";\n    }\n\n    await this.cardStorage.saveVotes(t, votes);\n    await Analytics.event(this.w, \"voted\", { outcome: outcome });\n  };\n\n  stopAndStart = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await Analytics.event(this.w, \"discussionStatusOverridden\");\n\n    await this.discussion.end(t);\n    await Analytics.event(this.w, \"discussionStatusChanged\", {\n      newStatus: \"stopped\",\n    });\n\n    await this.discussion.start(t);\n    await Analytics.event(this.w, \"discussionStatusChanged\", {\n      newStatus: \"started\",\n    });\n  };\n\n  handleDiscussion = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (await this.discussion.isOngoingOrPausedForAnotherCard(t)) {\n      const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n      const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n      // https://github.com/tatablack/leaner-coffee-powerup/issues/12\n      if (await this.discussion.hasNotBeenArchived(t, cardId)) {\n        const allCards = await t.cards(\"id\", \"name\");\n        const cardBeingDiscussed = allCards.find((card) => card.id === cardId);\n\n        return t.popup({\n          callback: this.stopAndStart,\n          title: \"Leaner Coffee\",\n          url: `${this.baseUrl}/ongoing_or_paused.html?${await Analytics.getOverrides(this.boardStorage, t)}`,\n          args: {\n            currentCardBeingDiscussed: cardBeingDiscussed.name,\n            currentDiscussionStatus: boardStatus,\n            localization: I18nConfig,\n          },\n          height: 120,\n        });\n      }\n\n      console.warn(\n        `Card with id ${cardId} not found in current board, most likely archived. Cleaning up.`,\n      );\n\n      await Analytics.event(this.w, \"discussionMenuOpened\", {\n        status: \"ongoing other\",\n      });\n\n      await this.boardStorage.deleteMultiple(t, [\n        BoardStorage.DISCUSSION_STATUS,\n        BoardStorage.DISCUSSION_CARD_ID,\n        BoardStorage.DISCUSSION_STARTED_AT,\n        BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n        BoardStorage.DISCUSSION_INTERVAL_ID,\n      ]);\n    }\n\n    let items: Trello.PowerUp.PopupOptionsItem[] = [];\n    let status: string;\n\n    switch (true) {\n      case await this.discussion.isOngoingFor(t):\n        items = [\n          {\n            text: t.localizeKey(\"pauseTimer\", { symbol: \"❙ ❙\" }), // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"paused\",\n              });\n              await this.discussion.pause(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"pausingTimer\", { symbol: \"❙ ❙\" }), // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n              );\n            },\n          },\n          {\n            text: t.localizeKey(\"endDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"stopped\",\n              });\n              await this.discussion.end(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"endingDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n              );\n            },\n          },\n        ];\n        status = \"ongoing\";\n        break;\n      case await this.discussion.isPausedFor(t):\n        items = [\n          {\n            text: t.localizeKey(\"resumeDiscussion\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"resumed\",\n              });\n              await this.discussion.start(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"resumingDiscussion\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n              );\n            },\n          },\n          {\n            text: t.localizeKey(\"endDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"stopped\",\n              });\n              await this.discussion.end(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"endingDiscussion\", { symbol: \"■\" }), // BLACK SQUARE\n              );\n            },\n          },\n        ];\n        status = \"paused\";\n        break;\n      default:\n        items = [\n          {\n            text: t.localizeKey(\"startTimer\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"started\",\n              });\n              await this.discussion.start(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"startingTimer\", { symbol: \"▶\" }), // BLACK RIGHT-POINTING TRIANGLE\n              );\n            },\n          },\n        ];\n\n        if (await this.discussion.hasEverBeenDiscussed(t)) {\n          items.push({\n            text: t.localizeKey(\"resetDiscussion\", { symbol: \"↺\" }), // ANTICLOCKWISE OPEN CIRCLE ARROW\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await Analytics.event(this.w, \"discussionStatusChanged\", {\n                newStatus: \"reset\",\n              });\n              await this.discussion.reset(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey(\"resettingDiscussion\", { symbol: \"↺\" }), // ANTICLOCKWISE OPEN CIRCLE ARROW\n              );\n            },\n          });\n          status = \"discussed before\";\n        } else {\n          status = \"never discussed\";\n        }\n    }\n\n    await Analytics.event(this.w, \"discussionMenuOpened\", { status });\n\n    return t.popup({\n      title: \"Leaner Coffee\",\n      items,\n    });\n  };\n\n  getButtonLabel = async (t: Trello.PowerUp.IFrame): Promise<string> => {\n    let label = await this.discussion.cardStorage.getDiscussionButtonLabel(t);\n\n    if (label) {\n      setTimeout(() => {\n        this.discussion.cardStorage.saveDiscussionButtonLabel(t);\n      }, 2000);\n    }\n\n    label = label || t.localizeKey(\"discussion\");\n\n    return label;\n  };\n\n  handlePowerupEnabled = async (t: Trello.PowerUp.AnonymousHostHandlers) => {\n    const organisation = await t.organization(\"id\");\n    const board = await t.board(\"id\");\n    const organisationIdHash = await digestMessage(organisation.id);\n    const boardIdHash = await digestMessage(board.id);\n\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.POWER_UP_INSTALLATION_DATE]: new Date().toISOString(),\n      [BoardStorage.ORGANISATION_HASH]: organisationIdHash,\n      [BoardStorage.BOARD_HASH]: boardIdHash,\n    });\n  };\n\n  async start(): Promise<void> {\n    const trelloPlugin = this.t.initialize(CapabilityHandlers(this), {\n      localization: I18nConfig,\n      helpfulStacks: !this.isRunningInProduction(),\n    }) as Trello.PowerUp.Plugin;\n\n    this.discussion.init(trelloPlugin);\n\n    // There can be a race condition between the power-up starting\n    // and the on-enable event being triggered.\n    await navigator.locks.request(\n      \"powerup_init\",\n      { ifAvailable: true },\n      async (lock) => {\n        // if the lock is null, it means the on-enable handler is taking care of initialisation\n        if (lock === null) {\n          return;\n        }\n\n        if (!(await this.boardStorage.getInitialised(trelloPlugin))) {\n          await this.handlePowerupEnabled(trelloPlugin);\n        }\n      },\n    );\n\n    const organisationIdHash =\n      await this.boardStorage.getOrganisationIdHash(trelloPlugin);\n    const boardIdHash = await this.boardStorage.getBoardIdHash(trelloPlugin);\n\n    this.w.LeanerCoffeeAnalyticsReferrer = \"https://\" + organisationIdHash;\n    this.w.LeanerCoffeeAnalyticsHostname = boardIdHash;\n    this.w.LeanerCoffeeAnalyticsBeforeSend = Analytics.beforeSend;\n\n    setTimeout(async () => {\n      await Analytics.pageview(this.w);\n    }, 0);\n  }\n}\n\nexport default LeanCoffeePowerUp;\n","import LeanCoffeePowerUp from \"./LeanCoffeePowerUp\";\nimport CardStorage from \"./storage/CardStorage\";\nimport { Trello } from \"./types/TrelloPowerUp\";\nimport Analytics from \"./utils/Analytics\";\nimport { I18nConfig } from \"./utils/I18nConfig\";\n\nexport const CapabilityHandlers = (\n  powerUp: LeanCoffeePowerUp,\n): Trello.PowerUp.CapabilityHandlers => ({\n  \"board-buttons\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.BoardButtonCallback[]> => {\n    // We don't want to show the board button for the release notes\n    // if there is a new patch version: only for minor and major updates.\n    if (!(await powerUp.versionChecker.isThereANewMinorOrMajor(t))) {\n      return [];\n    }\n\n    return [\n      {\n        icon: {\n          dark: `${powerUp.baseUrl}/assets/moka_white.svg`,\n          light: `${powerUp.baseUrl}/assets/moka.svg`,\n        },\n        text: t.localizeKey(\"boardButtonLabel\"),\n        callback: powerUp.versionChecker.showMenu,\n      },\n    ];\n  },\n\n  \"card-back-section\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardBackSection> => {\n    const discussionStatus =\n      await powerUp.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus === undefined) {\n      return null;\n    }\n\n    return {\n      title: t.localizeKey(\"discussion\"),\n      icon: `${powerUp.baseUrl}/assets/powerup/timer.svg`,\n      content: {\n        type: \"iframe\",\n        url: t.signUrl(\n          `${powerUp.baseUrl}/discussion-ui.html?${await Analytics.getOverrides(powerUp.boardStorage, t)}`,\n        ),\n      },\n    };\n  },\n\n  \"card-badges\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardBadge[]> => {\n    const badges = [\n      await powerUp.elapsedCardBadge.render(t),\n      await powerUp.votingCardBadge.render(t),\n    ];\n\n    return badges.filter((badge) => badge);\n  },\n\n  \"card-buttons\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardButton[]> => [\n    {\n      icon: `${powerUp.baseUrl}/assets/powerup/timer.svg`,\n      text: await powerUp.getButtonLabel(t),\n      callback: powerUp.handleDiscussion,\n    },\n    {\n      icon: `${powerUp.baseUrl}/assets/powerup/heart.svg`,\n      text: t.localizeKey(\"vote\", {\n        symbol: (await powerUp.voting.hasCurrentMemberVoted(t)) ? \"☑\" : \"☐\",\n      }),\n      callback: powerUp.handleVoting,\n    },\n  ],\n\n  \"card-detail-badges\": async (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.CardDetailBadge[]> => {\n    const badges = [\n      await powerUp.elapsedCardDetailBadge.render(t),\n      await powerUp.votingCardDetailBadge.render(t),\n    ];\n\n    return badges.filter((badge) => badge);\n  },\n\n  \"list-actions\": (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.ListAction[]> =>\n    Promise.resolve([\n      {\n        text: t.localizeKey(\"clearVotesFromList\"),\n        callback: async (t2): Promise<void> => {\n          const result = await t2.list(\"cards\");\n          result.cards.forEach(({ id }) => {\n            powerUp.cardStorage.deleteMultiple(t2, [CardStorage.VOTES], id);\n          });\n          await Analytics.event(window, \"listVotesCleared\");\n        },\n      },\n    ]),\n\n  \"list-sorters\": (\n    t: Trello.PowerUp.IFrame,\n  ): Promise<Trello.PowerUp.ListSorter[]> =>\n    Promise.resolve([\n      {\n        text: t.localizeKey(\"sortByVote\"),\n        callback: async (t2, opts): Promise<{ sortedIds: string[] }> => {\n          const votingData = await Promise.all(\n            opts.cards.map(\n              async (\n                card,\n              ): Promise<{ leanCoffeeVotes: number; id: string }> => {\n                const leanCoffeeVotes = await powerUp.voting.countVotesByCard(\n                  t2,\n                  card.id,\n                );\n                return { leanCoffeeVotes, id: card.id };\n              },\n            ),\n          );\n\n          const sortedCards = votingData.sort((cardA, cardB) => {\n            if (cardA.leanCoffeeVotes < cardB.leanCoffeeVotes) {\n              return 1;\n            }\n            if (cardB.leanCoffeeVotes < cardA.leanCoffeeVotes) {\n              return -1;\n            }\n            return 0;\n          });\n\n          await Analytics.event(window, \"listVotesSorted\");\n\n          return {\n            sortedIds: sortedCards.map((card) => card.id),\n          };\n        },\n      },\n    ]),\n\n  \"on-enable\": async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    // There can be a race condition between the power-up starting\n    // and the on-enable event being triggered.\n    await navigator.locks.request(\n      \"powerup_init\",\n      { ifAvailable: true },\n      async (lock) => {\n        const isInitialised = await powerUp.boardStorage.getInitialised(t);\n        // if the lock is null, it means LeanCoffeePowerup::start is taking care of initialisation\n        if (lock === null || isInitialised) {\n          return;\n        }\n\n        if (!isInitialised) {\n          await powerUp.handlePowerupEnabled(t);\n        }\n      },\n    );\n\n    await Analytics.event(window, \"enabled\");\n  },\n\n  \"on-disable\": async (): Promise<void> => {\n    await Analytics.event(window, \"disabled\");\n  },\n\n  \"show-settings\": async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    return t.popup({\n      title: `Leaner Coffee ${__BUILDTIME_VERSION__}`,\n      url: `${powerUp.baseUrl}/settings.html?${await Analytics.getOverrides(powerUp.boardStorage, t)}`,\n      height: 184,\n      args: {\n        localization: I18nConfig,\n      },\n    });\n  },\n});\n","import LeanCoffeePowerUp from \"./LeanCoffeePowerUp\";\n\ndeclare global {\n  interface Window {\n    webkitAudioContext?: typeof AudioContext;\n  }\n}\n\nconst config: Config = process.env.CONFIG as unknown as Config;\n\nconst instance = new LeanCoffeePowerUp({\n  w: window,\n  config,\n});\n\ninstance.start();\n"],"names":["addZero","value","digits","str","toString","size","length","Array","join","concat","module","exports","ms","options","leading","showMs","unsignedMs","sign","duration","getSign","t","TypeError","days","Math","trunc","hours","minutes","seconds","parseMs","output","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","constructor","scope","visibility","assign","this","read","cardId","write","set","writeMultiple","entries","remove","deleteMultiple","CardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionElapsed","DISCUSSION_ELAPSED","getDiscussionThumbs","DISCUSSION_THUMBS","getDiscussionButtonLabel","DISCUSSION_BUTTON_LABEL","saveDiscussionStatus","newStatus","saveDiscussionElapsed","newElapsed","saveDiscussionThumbs","newThumbs","saveVotes","newVotes","VOTES","deleteVotes","delete","saveDiscussionButtonLabel","newLabel","deleteDiscussionThumbs","sanitiseUrl","urlString","url","URL","protocol","hostname","port","pathname","beforeSend","event","payload","referrer","window","LeanerCoffeeAnalyticsReferrer","LeanerCoffeeAnalyticsHostname","pageview","async","eventData","umami","track","props","console","warn","eventName","getOverrides","boardStorage","organisationIdHash","getOrganisationIdHash","boardIdHash","getBoardIdHash","encodeURIComponent","supportedLocales","I18nConfig","defaultLocale","resourceUrl","BoardStorage","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpInstallationDate","POWER_UP_INSTALLATION_DATE","ORGANISATION_HASH","setOrganisationIdHash","BOARD_HASH","setBoardIdHash","getInitialised","setPowerUpInstallationDate","installationDate","MemberStorage","POWER_UP_VERSION","LeanCoffeeBase","w","config","isRunningInProduction","cardStorage","memberStorage","discussion","getText","elapsed","getColor","isOngoingFor","isPausedFor","render","bind","getElapsed","text","color","badge","title","localizeKey","baseUrl","voting","getVoters","votes","getVotes","values","reduce","knownVoters","vote","username","push","fullName","avatar","voters","hasVoted","hasCurrentMemberVoted","icon","clearVoters","totalVoters","total","showVoters","items","popup","args","localization","callback","commonData","load","remoteAudioFile","fetch","audioData","arrayBuffer","audioBuffer","audioContext","decodeAudioData","sourceNode","createBufferSource","buffer","connect","destination","play","type","AudioContext","webkitAudioContext","audio","start","open","cardName","Notification","body","show","permission","requestPermission","maxDiscussionDuration","init","p","getElapsedNotification","isOngoingOrPausedForAnotherCard","boardStatus","includes","getContext","card","hasEverBeenDiscussed","hasNotBeenArchived","cards","find","id","updateElapsed","startedAt","Date","now","saveElapsed","pause","previousElapsed","setInterval","notify","intervalId","name","clearInterval","elapsedNotification","notifications","end","err","Error","message","reset","digestMessage","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","from","Uint8Array","map","b","padStart","getType","slice","isString","String","INT","ALPHA_NUM","PRE_PART","BUILD_PART","SEMVER","REGEXP_INT","RegExp","REGEXP_SEMVER","REGEXP_SEMVER_STRICT","isValidSemVer","version","strict","test","parseVersionPart","part","nonPosInt","parsedPart","parseInt","Number","isSafeInteger","RangeError","MAX_SAFE_INTEGER","parseSemVer","matches","major","minor","patch","pre","build","reg","vRel","vPre","vBuild","match","split","isThereANewMinorOrMajor","storedVersionRaw","storedVersion","newVersion","isNewer","showMenu","oldVersion","storeNewVersion","height","member","countVotesByCard","keys","filter","getMaxVotes","currentList","list","ceil","canCurrentMemberVote","cardIds","countVotesByMember","Promise","all","handleVoting","maxVotes","currentMember","outcome","stopAndStart","handleDiscussion","cardBeingDiscussed","currentCardBeingDiscussed","currentDiscussionStatus","status","symbol","t2","closePopup","getButtonLabel","label","setTimeout","handlePowerupEnabled","organisation","organization","board","toISOString","TrelloPowerUp","defaultDuration","versionChecker","elapsedCardBadge","elapsedCardDetailBadge","votingCardBadge","votingCardDetailBadge","trelloPlugin","initialize","powerUp","dark","light","content","signUrl","resolve","forEach","opts","sortedCards","leanCoffeeVotes","sort","cardA","cardB","sortedIds","navigator","locks","request","ifAvailable","lock","isInitialised","helpfulStacks","LeanerCoffeeAnalyticsBeforeSend"],"sourceRoot":""}