{"version":3,"file":"main.5fde22772a19fd424286.js","mappings":"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","sources":["webpack://leancoffee-powerup/./node_modules/format-duration/format-duration.js","webpack://leancoffee-powerup/webpack/bootstrap","webpack://leancoffee-powerup/webpack/runtime/compat get default export","webpack://leancoffee-powerup/webpack/runtime/define property getters","webpack://leancoffee-powerup/webpack/runtime/hasOwnProperty shorthand","webpack://leancoffee-powerup/./src/storage/Storage.ts","webpack://leancoffee-powerup/./src/storage/BoardStorage.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardBadge.ts","webpack://leancoffee-powerup/./src/badges/ElapsedCardDetailBadge.ts","webpack://leancoffee-powerup/./src/badges/VotingCardBadge.ts","webpack://leancoffee-powerup/./src/utils/I18nConfig.ts","webpack://leancoffee-powerup/./src/badges/VotingCardDetailBadge.ts","webpack://leancoffee-powerup/./src/storage/CardStorage.ts","webpack://leancoffee-powerup/./src/utils/Notifications.ts","webpack://leancoffee-powerup/./src/utils/Discussion.ts","webpack://leancoffee-powerup/./src/utils/Voting.ts","webpack://leancoffee-powerup/./src/utils/UpdateChecker.ts","webpack://leancoffee-powerup/./src/LeanCoffeeBase.ts","webpack://leancoffee-powerup/./src/LeanCoffeePowerUp.ts","webpack://leancoffee-powerup/./src/CapabilityHandlers.ts","webpack://leancoffee-powerup/./src/index.ts"],"sourcesContent":["// adapted from https://github.com/sindresorhus/parse-ms.\n// moved to internal function because parse-ms is now pure ESM.\nfunction parseMs (ms) {\n  if (typeof ms !== 'number') {\n    throw new TypeError('Expected a number')\n  }\n\n  return {\n    days: Math.trunc(ms / 86400000),\n    hours: Math.trunc(ms / 3600000) % 24,\n    minutes: Math.trunc(ms / 60000) % 60,\n    seconds: Math.trunc(ms / 1000) % 60,\n    ms: Math.trunc(ms) % 1000\n  }\n}\n\n// adapted from https://github.com/rafaelrinaldi/add-zero.\n// moved to internal function b/c addZero is unmaintained (7+ years).\n// stripped out negative sign logic since we're already doing it elsewhere.\nfunction addZero (value, digits) {\n  digits = digits || 2\n\n  let str = value.toString()\n  let size = 0\n\n  size = digits - str.length + 1\n  str = new Array(size).join('0').concat(str)\n\n  return str\n}\n\nfunction getSign (duration, showMs) {\n  if (showMs) return duration < 0 ? '-' : ''\n  return duration <= -1000 ? '-' : ''\n}\n\n/**\n * Convert a number in milliseconds to a standard duration string.\n * @param {number} ms - duration in milliseconds\n * @param {object} options - formatDuration options object\n * @param {boolean} [options.leading=false] - add leading zero\n * @param {boolean} [options.milliseconds=false] - add milliseconds\n * @returns string - formatted duration string\n */\nfunction formatDuration (ms, options) {\n  const leading = options && options.leading\n  const showMs = options && options.ms\n  const unsignedMs = ms < 0 ? -ms : ms\n  const sign = getSign(ms, showMs)\n  const t = parseMs(unsignedMs)\n  const seconds = addZero(t.seconds)\n  let output = ''\n\n  if (t.days && !output) output = sign + t.days + ':' + addZero(t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (t.hours && !output) output = sign + (leading ? addZero(t.hours) : t.hours) + ':' + addZero(t.minutes) + ':' + seconds\n  if (!output) output = sign + (leading ? addZero(t.minutes) : t.minutes) + ':' + seconds\n\n  if (showMs) output += '.' + addZero(t.ms, 3)\n  return output\n}\n\nmodule.exports = formatDuration\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { Trello } from '../types/TrelloPowerUp';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass Storage {\n  scope: Trello.PowerUp.Scope;\n  visibility: Trello.PowerUp.Visibility;\n\n  constructor(scope: Trello.PowerUp.Scope = 'member', visibility: Trello.PowerUp.Visibility = 'private') {\n    Object.assign(this, { scope, visibility });\n  }\n\n  read(t: Trello.PowerUp.IFrame, key: string, cardId?: string): PromiseLike<any> {\n    return t.get(cardId ?? this.scope, this.visibility, key);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  write(t: Trello.PowerUp.IFrame, key: string, value: any, cardId?: string): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, key, value);\n  }\n\n  writeMultiple(t: Trello.PowerUp.IFrame, entries: {\n    [ key: string]: any;\n  }, cardId?: string): PromiseLike<void> {\n    return t.set(cardId ?? this.scope, this.visibility, entries);\n  }\n\n  delete(t: Trello.PowerUp.IFrame, key: string, cardId?: string): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, key);\n  }\n\n  deleteMultiple(t: Trello.PowerUp.IFrame, entries: string[], cardId?: string): PromiseLike<void> {\n    return t.remove(cardId ?? this.scope, this.visibility, entries);\n  }\n}\n\nexport default Storage;\n","import { Trello } from '../types/TrelloPowerUp';\nimport Storage from './Storage';\n\nclass BoardStorage extends Storage {\n    static DISCUSSION_STATUS = 'leancoffeeDiscussionStatus';\n    static DISCUSSION_CARD_ID = 'leancoffeeDiscussionCardId';\n    static DISCUSSION_STARTED_AT = 'leancoffeeDiscussionStartedAt';\n    static DISCUSSION_PREVIOUS_ELAPSED = 'leancoffeeDiscussionPreviousElapsed';\n    static DISCUSSION_INTERVAL_ID = 'leancoffeeDiscussionIntervalId';\n    static POWER_UP_VERSION = 'powerUpVersion';\n\n    constructor() {\n      super('board', 'shared');\n    }\n\n    async getDiscussionStatus(t: Trello.PowerUp.IFrame): Promise<DiscussionStatus> {\n      return super.read(t, BoardStorage.DISCUSSION_STATUS);\n    }\n\n    async getDiscussionCardId(t: Trello.PowerUp.IFrame): Promise<string> {\n      return super.read(t, BoardStorage.DISCUSSION_CARD_ID);\n    }\n\n    async getDiscussionStartedAt(t: Trello.PowerUp.IFrame): Promise<DiscussionStartedAt> {\n      return super.read(t, BoardStorage.DISCUSSION_STARTED_AT);\n    }\n\n    async getDiscussionPreviousElapsed(t: Trello.PowerUp.IFrame): Promise<DiscussionPreviousElapsed> {\n      return super.read(t, BoardStorage.DISCUSSION_PREVIOUS_ELAPSED);\n    }\n\n    async getDiscussionIntervalId(t: Trello.PowerUp.IFrame): Promise<DiscussionIntervalId> {\n      return super.read(t, BoardStorage.DISCUSSION_INTERVAL_ID);\n    }\n\n    async getPowerUpVersion(t: Trello.PowerUp.IFrame): Promise<string> {\n      return super.read(t, BoardStorage.POWER_UP_VERSION);\n    }\n\n    setPowerUpVersion(t: Trello.PowerUp.IFrame, version: string): PromiseLike<void> {\n      return super.write(t, BoardStorage.POWER_UP_VERSION, version);\n    }\n}\n\nexport default BoardStorage;\n","import formatDuration from 'format-duration';\nimport { Trello } from '../types/TrelloPowerUp';\nimport Discussion from '../utils/Discussion';\n\nclass ElapsedCardBadge implements ElapsedCardBadge {\n  discussion: Discussion;\n\n  constructor(discussion: Discussion) {\n    this.discussion = discussion;\n    this.render = this.render.bind(this);\n  }\n\n  getText = async (t: Trello.PowerUp.IFrame, elapsed: number): Promise<string> => formatDuration(elapsed);\n\n  getColor = async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.Colors> => {\n    const isOngoing = await this.discussion.isOngoingFor(t);\n\n    if (isOngoing) { return 'orange'; }\n\n    return await this.discussion.isPausedFor(t) ? 'yellow' : 'light-gray';\n  };\n\n  // Unable to use class properties here because I need to call\n  // it from a subclass, and it's currently broken - see:\n  // https://github.com/babel/babel/issues/5104\n  //\n  // Upgrading to Babel 7.x should solve it.\n  // NOTE: CHECK whether this is still relevant for ts-loader\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const elapsed = await this.discussion.getElapsed(t);\n    if (!elapsed) { return null; }\n\n    return {\n      text: await this.getText(t, elapsed),\n      color: await this.getColor(t)\n    };\n  }\n}\n\nexport default ElapsedCardBadge;\n","import { Trello } from '../types/TrelloPowerUp';\nimport ElapsedCardBadge from './ElapsedCardBadge';\n\nclass ElapsedCardDetailBadge extends ElapsedCardBadge {\n  render = async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const discussionStatus: DiscussionStatus = await this.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus !== 'ENDED') { return null; }\n\n    const badge = await super.render(t) as Trello.PowerUp.CardDetailBadge;\n    badge.title = t.localizeKey('discussionDurationTitle');\n    return badge;\n  };\n}\n\nexport default ElapsedCardDetailBadge;\n","import { Trello } from '../types/TrelloPowerUp';\nimport Voting from '../utils/Voting';\nimport CardStorage from '../storage/CardStorage';\n\nclass VotingCardBadge {\n  baseUrl: string;\n  voting: Voting;\n  storage: CardStorage;\n\n  constructor(baseUrl: string, voting: Voting, storage: CardStorage) {\n    this.baseUrl = baseUrl;\n    this.voting = voting;\n    this.storage = storage;\n    this.render = this.render.bind(this);\n  }\n\n  getVoters = async (t: Trello.PowerUp.IFrame): Promise<{ text: string }[]> => {\n    const votes: Votes = await this.voting.getVotes(t) || {};\n\n    return Object.values(votes).reduce((knownVoters: { text: string, avatar: string }[], vote) => {\n      if (vote.username) {\n        knownVoters.push({ text: `${vote.fullName} (${vote.username})`, avatar: vote.avatar });\n      }\n\n      return knownVoters;\n    }, []);\n  };\n\n  // Unable to use class properties here because I need to call\n  // it from a subclass, and it's currently broken - see:\n  // https://github.com/babel/babel/issues/5104\n  //\n  // Upgrading to Babel 7.x should solve it.\n  async render(t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge> {\n    const voters = await this.getVoters(t);\n\n    if (!voters.length) { return null; }\n\n    const hasVoted = await this.voting.hasCurrentMemberVoted(t);\n\n    return {\n      text: voters.length.toString(),\n      color: hasVoted ? 'blue' : null,\n      icon: `${this.baseUrl}/assets/powerup/${hasVoted ? 'heart_white.svg' : 'heart.svg'}`,\n    };\n  }\n}\n\nexport default VotingCardBadge;\n","import { Trello } from '../types/TrelloPowerUp';\n\nconst config: Config = process.env.CONFIG as unknown as Config;\nconst { supportedLocales } = config[process.env.NODE_ENV as Environment];\n\nexport const I18nConfig: Trello.PowerUp.Localization = {\n  defaultLocale: 'en',\n  supportedLocales,\n  resourceUrl: '/i18n/{locale}.json'\n};\n","import { Trello } from '../types/TrelloPowerUp';\nimport VotingCardBadge from './VotingCardBadge';\nimport { I18nConfig } from '../utils/I18nConfig';\n\nclass VotingCardDetailBadge extends VotingCardBadge {\n  clearVoters = async (t: Trello.PowerUp.IFrame) => {\n    await this.storage.deleteVotes(t);\n  };\n\n  showVoters = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const items = await this.getVoters(t);\n\n    if (!items.length) { return; }\n\n    await t.popup({\n      title: t.localizeKey('voters'),\n      url: './voters.html',\n      args: { items, localization: I18nConfig },\n      callback: this.clearVoters\n    });\n  };\n\n  render = async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardDetailBadge> => {\n    const commonData = await super.render(t) as Trello.PowerUp.CardDetailBadge;\n\n    if (commonData) {\n      commonData.title = t.localizeKey('voters');\n      delete commonData.icon;\n      commonData.callback = this.showVoters;\n    }\n\n    return commonData;\n  };\n}\n\nexport default VotingCardDetailBadge;\n","import { Trello } from '../types/TrelloPowerUp';\nimport Storage from './Storage';\n\nclass CardStorage extends Storage {\n  static DISCUSSION_STATUS = 'leancoffeeDiscussionStatus';\n  static DISCUSSION_ELAPSED = 'leancoffeeDiscussionElapsed';\n  static DISCUSSION_THUMBS = 'leancoffeeDiscussionThumbs';\n  static VOTES = 'leancoffeeVotes';\n  static DISCUSSION_BUTTON_LABEL = 'discussionButtonLabel';\n\n  constructor() {\n    super('card', 'shared');\n  }\n\n  getDiscussionStatus(t: Trello.PowerUp.IFrame): PromiseLike<DiscussionStatus> {\n    return super.read(t, CardStorage.DISCUSSION_STATUS);\n  }\n\n  getDiscussionElapsed(t: Trello.PowerUp.IFrame): PromiseLike<number> {\n    return super.read(t, CardStorage.DISCUSSION_ELAPSED);\n  }\n\n  getDiscussionThumbs(t: Trello.PowerUp.IFrame): PromiseLike<Thumbs> {\n    return super.read(t, CardStorage.DISCUSSION_THUMBS);\n  }\n\n  getDiscussionButtonLabel(t: Trello.PowerUp.IFrame): PromiseLike<string> {\n    return super.read(t, CardStorage.DISCUSSION_BUTTON_LABEL);\n  }\n\n  saveDiscussionStatus(t: Trello.PowerUp.IFrame, newStatus: DiscussionStatus, cardId?: string): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_STATUS, newStatus, cardId);\n  }\n\n  saveDiscussionElapsed(t: Trello.PowerUp.IFrame, newElapsed: number, cardId?: string): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_ELAPSED, newElapsed, cardId);\n  }\n\n  saveDiscussionThumbs(t: Trello.PowerUp.IFrame, newThumbs: Thumbs): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_THUMBS, newThumbs);\n  }\n\n  saveVotes(t: Trello.PowerUp.IFrame, newVotes: Votes): PromiseLike<void> {\n    return super.write(t, CardStorage.VOTES, newVotes);\n  }\n\n  deleteVotes(t: Trello.PowerUp.IFrame): PromiseLike<void> {\n    return super.delete(t, CardStorage.VOTES);\n  }\n\n  saveDiscussionButtonLabel(t: Trello.PowerUp.IFrame, newLabel?: string): PromiseLike<void> {\n    return super.write(t, CardStorage.DISCUSSION_BUTTON_LABEL, newLabel);\n  }\n\n  deleteDiscussionThumbs(t: Trello.PowerUp.IFrame): PromiseLike<void> {\n    return super.delete(t, CardStorage.DISCUSSION_THUMBS);\n  }\n}\n\nexport default CardStorage;\n","export type NotificationType = {\n  [key in 'audio' | 'text']: string;\n};\n\nclass Notifications {\n  w: Window;\n  baseUrl: string;\n  audioContext: AudioContext;\n\n  constructor(window: Window, baseUrl: string) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n  }\n\n  async load(url: string): Promise<AudioBufferSourceNode> {\n    const remoteAudioFile = await fetch(url);\n    const audioData = await remoteAudioFile.arrayBuffer();\n    const audioBuffer = await this.audioContext.decodeAudioData(audioData);\n    const sourceNode = this.audioContext.createBufferSource();\n    sourceNode.buffer = audioBuffer;\n    sourceNode.connect(this.audioContext.destination);\n    return sourceNode;\n  }\n\n  async play(type: NotificationType): Promise<void> {\n    this.audioContext = this.audioContext || new (AudioContext || this.w.webkitAudioContext)();\n    const audio = await this.load(`${this.baseUrl}/${type.audio}`);\n    audio.start();\n  }\n\n  open(type: NotificationType, cardName: string): void {\n    // eslint-disable-next-line no-new\n    new Notification(cardName, {\n      body: type.text,\n      icon: `${this.baseUrl}/assets/timer.png`\n    });\n  }\n\n  show(type: NotificationType, cardName: string): void {\n    if ((!('Notification' in this.w)) || Notification.permission === 'denied') { return; }\n\n    if (Notification.permission === 'granted') {\n      this.open(type, cardName);\n    } else {\n      Notification.requestPermission((permission) => {\n        if (permission === 'granted') {\n          this.open(type, cardName);\n        }\n      });\n    }\n  }\n}\n\nexport default Notifications;\n","import { Trello } from '../types/TrelloPowerUp';\nimport BoardStorage from '../storage/BoardStorage';\nimport CardStorage from '../storage/CardStorage';\nimport Notifications, { NotificationType } from './Notifications';\n\nclass Discussion {\n  w: Window;\n  p: Trello.PowerUp.Plugin;\n  baseUrl: string;\n  maxDiscussionDuration: number;\n  notifications: Notifications;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n\n  constructor(window: Window, baseUrl: string, maxDiscussionDuration: number) {\n    this.w = window;\n    this.baseUrl = baseUrl;\n    this.notifications = new Notifications(this.w, this.baseUrl);\n    this.maxDiscussionDuration = maxDiscussionDuration;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n  }\n\n  init = (p: Trello.PowerUp.Plugin): void => {\n    this.p = p;\n  };\n\n  getElapsedNotification = (): NotificationType => ({\n    audio: 'assets/looking_down.mp3',\n    text: this.p.localizeKey('elapsedNotification')\n  });\n\n  isOngoingOrPausedForAnotherCard = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n    return ['ONGOING', 'PAUSED'].includes(boardStatus) && cardId !== t.getContext().card;\n  };\n\n  hasEverBeenDiscussed = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus !== undefined;\n  };\n\n  hasNotBeenArchived = async (t: Trello.PowerUp.IFrame, cardId: string): Promise<boolean> => {\n    const allCards = await t.cards('id', 'name');\n    return !!allCards.find((card) => card.id === cardId);\n  };\n\n  isOngoingFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === 'ONGOING';\n  };\n\n  isPausedFor = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const cardStatus = await this.cardStorage.getDiscussionStatus(t);\n    return cardStatus === 'PAUSED';\n  };\n\n  getElapsed = (t: Trello.PowerUp.IFrame): PromiseLike<number> => this.cardStorage.getDiscussionElapsed(t);\n\n  updateElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const elapsed = Date.now() - startedAt;\n\n    if (elapsed > this.maxDiscussionDuration) {\n      await this.pause(t, true);\n    } else {\n      await this.saveElapsed(t);\n    }\n  };\n\n  saveElapsed = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const startedAt = await this.boardStorage.getDiscussionStartedAt(t);\n    const previousElapsed = await this.boardStorage.getDiscussionPreviousElapsed(t) || 0;\n    const elapsed = startedAt ? Date.now() - startedAt : 0;\n\n    await this.cardStorage.saveDiscussionElapsed(t, (elapsed + previousElapsed), cardId);\n  };\n\n  start = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: 'ONGOING',\n      [BoardStorage.DISCUSSION_CARD_ID]: t.getContext().card,\n      [BoardStorage.DISCUSSION_STARTED_AT]: Date.now(),\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: setInterval(this.updateElapsed, 5000, t)\n    });\n\n    await this.cardStorage.saveDiscussionStatus(t, 'ONGOING');\n    await this.cardStorage.deleteDiscussionThumbs(t);\n  };\n\n  pause = async (t: Trello.PowerUp.IFrame, notify = false): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    const cardName = (await t.cards('id', 'name')).find((card) => card.id === cardId).name;\n\n    clearInterval(intervalId);\n\n    await this.cardStorage.saveDiscussionStatus(t, 'PAUSED');\n    await this.saveElapsed(t);\n    await this.boardStorage.writeMultiple(t, {\n      [BoardStorage.DISCUSSION_STATUS]: 'PAUSED',\n      [BoardStorage.DISCUSSION_STARTED_AT]: null,\n      [BoardStorage.DISCUSSION_PREVIOUS_ELAPSED]: await this.getElapsed(t),\n      [BoardStorage.DISCUSSION_INTERVAL_ID]: null\n    });\n\n    if (notify) {\n      const elapsedNotification = this.getElapsedNotification();\n      await this.notifications.play(elapsedNotification);\n      this.notifications.show(elapsedNotification, cardName);\n    }\n  };\n\n  end = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const intervalId = await this.boardStorage.getDiscussionIntervalId(t);\n    const cardId = await this.boardStorage.getDiscussionCardId(t);\n    clearInterval(intervalId);\n\n    try {\n      await this.cardStorage.saveDiscussionStatus(t, 'ENDED', cardId);\n      await this.saveElapsed(t);\n      await this.cardStorage.deleteMultiple(t, [CardStorage.DISCUSSION_THUMBS], cardId);\n      await this.boardStorage.deleteMultiple(t, [\n        BoardStorage.DISCUSSION_STATUS,\n        BoardStorage.DISCUSSION_CARD_ID,\n        BoardStorage.DISCUSSION_STARTED_AT,\n        BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n        BoardStorage.DISCUSSION_INTERVAL_ID\n      ]);\n    } catch (err) {\n      throw new Error(err instanceof Error && err.message ? err.message : 'Error while ending a discussion');\n    }\n  };\n\n  reset = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (await this.hasEverBeenDiscussed(t)) {\n      await this.cardStorage.deleteMultiple(t, [\n        CardStorage.DISCUSSION_STATUS,\n        CardStorage.DISCUSSION_ELAPSED,\n        CardStorage.DISCUSSION_THUMBS\n      ], t.getContext().card);\n    }\n  };\n}\n\nexport default Discussion;\n","import { Trello } from '../types/TrelloPowerUp';\nimport CardStorage from '../storage/CardStorage';\n\nclass Voting {\n  cardStorage: CardStorage;\n\n  constructor() {\n    this.cardStorage = new CardStorage();\n  }\n\n  hasCurrentMemberVoted = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES);\n    if (!votes) { return false; }\n\n    const currentMember = t.getContext().member;\n    return !!votes[currentMember];\n  };\n\n  getVotes = async (t: Trello.PowerUp.IFrame): Promise<Votes> => this.cardStorage.read(t, CardStorage.VOTES);\n\n  countVotesByCard = async (t: Trello.PowerUp.IFrame, cardId: string): Promise<number> => {\n    const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n\n    if (!votes) { return 0; }\n\n    return Object.keys(votes).filter((key) => votes[key]).length;\n  };\n\n  getMaxVotes = async (t: Trello.PowerUp.IFrame): Promise<number> => {\n    const currentList = await t.list('cards');\n\n    // http://www.leanmath.com/blog-entry/multi-voting-math-or-n3\n    return Math.ceil(currentList.cards.length / 3);\n  };\n\n  canCurrentMemberVote = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    if (await this.hasCurrentMemberVoted(t)) { return true; }\n\n    const currentList = await t.list('cards');\n    const cardIds = currentList.cards.map((card) => card.id);\n    const currentMemberVotes = await this.countVotesByMember(t, cardIds);\n    const maxVotes = await this.getMaxVotes(t);\n\n    return currentMemberVotes < maxVotes;\n  };\n\n  countVotesByMember = async (t: Trello.PowerUp.IFrame, cardIds: string[]): Promise<number> => {\n    const listVotes: number[] = await Promise.all(cardIds.map(async (cardId): Promise<number> => {\n      const votes = await this.cardStorage.read(t, CardStorage.VOTES, cardId);\n      if (!votes) { return 0; }\n\n      const currentMember = t.getContext().member;\n      return votes[currentMember] ? 1 : 0;\n    }));\n\n    return listVotes.reduce((total, vote): number => total + vote, 0);\n  };\n}\n\nexport default Voting;\n","import { Trello } from '../types/TrelloPowerUp';\nimport BoardStorage from '../storage/BoardStorage';\nimport { I18nConfig } from './I18nConfig';\n\nconst LAST_UNCHECKED_VERSION = '0.6.2';\n\nclass UpdateChecker {\n  storage: BoardStorage;\n  storedVersion: string;\n\n  constructor(storage: BoardStorage) {\n    this.storage = storage;\n  }\n\n  hasBeenUpdated = async (t: Trello.PowerUp.IFrame): Promise<boolean> => {\n    this.storedVersion = await this.storage.getPowerUpVersion(t);\n    return !this.storedVersion || (this.storedVersion !== process.env.VERSION);\n  };\n\n  showMenu = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    const storedVersion = await this.storage.getPowerUpVersion(t);\n    return t.popup({\n      title: t.localizeKey('boardButtonPopupTitle', {\n        oldVersion: storedVersion || LAST_UNCHECKED_VERSION,\n        newVersion: process.env.VERSION\n      }),\n      url: './release-notes.html',\n      args: { version: process.env.VERSION, localization: I18nConfig },\n      callback: this.storeNewVersion,\n      height: 65\n    });\n  };\n\n  storeNewVersion = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.storage.setPowerUpVersion(t, process.env.VERSION);\n  };\n}\n\nexport default UpdateChecker;\n","import { Trello } from './types/TrelloPowerUp';\nimport BoardStorage from './storage/BoardStorage';\nimport CardStorage from './storage/CardStorage';\n\nexport interface LeanCoffeeBaseParams {\n  w: Window;\n  config: Config;\n  t?: Trello.PowerUp | Trello.PowerUp.IFrame;\n}\n\nexport class LeanCoffeeBase {\n  w: Window;\n  boardStorage: BoardStorage;\n  cardStorage: CardStorage;\n  config: Config;\n\n  constructor({ w, config }: LeanCoffeeBaseParams) {\n    this.w = w;\n    this.config = config;\n    this.boardStorage = new BoardStorage();\n    this.cardStorage = new CardStorage();\n  }\n\n  isRunningInProduction = (): boolean => (process.env.NODE_ENV as Environment) === 'production';\n}\n","import { Trello } from './types/TrelloPowerUp';\nimport BoardStorage from './storage/BoardStorage';\nimport ElapsedCardBadge from './badges/ElapsedCardBadge';\nimport ElapsedCardDetailBadge from './badges/ElapsedCardDetailBadge';\nimport VotingCardBadge from './badges/VotingCardBadge';\nimport VotingCardDetailBadge from './badges/VotingCardDetailBadge';\nimport Discussion from './utils/Discussion';\nimport Voting from './utils/Voting';\nimport UpdateChecker from './utils/UpdateChecker';\nimport { LeanCoffeeBase, LeanCoffeeBaseParams } from './LeanCoffeeBase';\nimport { CapabilityHandlers } from './CapabilityHandlers';\nimport { I18nConfig } from './utils/I18nConfig';\n\nclass LeanCoffeePowerUp extends LeanCoffeeBase {\n  t: Trello.PowerUp;\n  baseUrl: string;\n  discussion: Discussion;\n  voting: Voting;\n  elapsedCardBadge: ElapsedCardBadge;\n  elapsedCardDetailBadge: ElapsedCardDetailBadge;\n  votingCardBadge: VotingCardBadge;\n  votingCardDetailBadge: VotingCardDetailBadge;\n  updateChecker: UpdateChecker;\n\n  constructor({\n    w, config\n  }: LeanCoffeeBaseParams) {\n    super({ w, config });\n    this.t = w.TrelloPowerUp;\n\n    const { hostname, port, defaultDuration } = this.config[process.env.NODE_ENV as Environment];\n    this.baseUrl = `${hostname}${port ? `:${port}` : ''}`;\n\n    this.discussion = new Discussion(this.w, this.baseUrl, defaultDuration);\n    this.voting = new Voting();\n    this.updateChecker = new UpdateChecker(this.boardStorage);\n\n    this.elapsedCardBadge = new ElapsedCardBadge(this.discussion);\n    this.elapsedCardDetailBadge = new ElapsedCardDetailBadge(this.discussion);\n    this.votingCardBadge = new VotingCardBadge(this.baseUrl, this.voting, this.cardStorage);\n    this.votingCardDetailBadge = new VotingCardDetailBadge(this.baseUrl, this.voting, this.cardStorage);\n  }\n\n  handleVoting = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (!await this.voting.canCurrentMemberVote(t)) {\n      return t.popup({\n        title: 'Leaner Coffee',\n        url: `${this.baseUrl}/too_many_votes.html`,\n        args: {\n          maxVotes: await this.voting.getMaxVotes(t),\n          localization: I18nConfig\n        },\n        height: 98\n      });\n    }\n\n    const votes = await this.voting.getVotes(t) || {};\n    const currentMember = await t.member('id', 'username', 'fullName', 'avatar');\n\n    if (votes[currentMember.id]) {\n      delete votes[currentMember.id];\n    } else {\n      votes[currentMember.id] = {\n        username: currentMember.username,\n        fullName: currentMember.fullName,\n        avatar: currentMember.avatar // currently unused\n      };\n    }\n\n    return this.cardStorage.saveVotes(t, votes);\n  };\n\n  stopAndStart = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    await this.discussion.end(t);\n    await this.discussion.start(t);\n  };\n\n  handleDiscussion = async (t: Trello.PowerUp.IFrame): Promise<void> => {\n    if (await this.discussion.isOngoingOrPausedForAnotherCard(t)) {\n      const boardStatus = await this.boardStorage.getDiscussionStatus(t);\n      const cardId = await this.boardStorage.getDiscussionCardId(t);\n\n      // https://github.com/tatablack/leaner-coffee-powerup/issues/12\n      if (await this.discussion.hasNotBeenArchived(t, cardId)) {\n        const allCards = await t.cards('id', 'name');\n        const cardBeingDiscussed = allCards.find((card) => card.id === cardId);\n\n        return t.popup({\n          callback: this.stopAndStart,\n          title: 'Leaner Coffee',\n          url: `${this.baseUrl}/ongoing_or_paused.html`,\n          args: {\n            currentCardBeingDiscussed: cardBeingDiscussed.name,\n            currentDiscussionStatus: boardStatus,\n            localization: I18nConfig,\n          },\n          height: 120\n        });\n      }\n\n      // eslint-disable-next-line no-console\n      console.warn(`Card with id ${cardId} not found in current board, most likely archived. Cleaning up.`);\n\n      await this.boardStorage.deleteMultiple(t, [\n        BoardStorage.DISCUSSION_STATUS,\n        BoardStorage.DISCUSSION_CARD_ID,\n        BoardStorage.DISCUSSION_STARTED_AT,\n        BoardStorage.DISCUSSION_PREVIOUS_ELAPSED,\n        BoardStorage.DISCUSSION_INTERVAL_ID\n      ]);\n    }\n\n    let items;\n\n    switch (true) {\n      case await this.discussion.isOngoingFor(t):\n        items = [{\n          // eslint-disable-next-line no-irregular-whitespace\n          text: t.localizeKey('pauseTimer', { symbol: '❙ ❙' }), // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n          callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n            await this.discussion.pause(t2);\n            await t2.closePopup();\n            await this.discussion.cardStorage.saveDiscussionButtonLabel(\n              t2,\n              t2.localizeKey('pausingTimer', { symbol: '❙ ❙' }) // MEDIUM VERTICAL BAR + NARROW NO-BREAK SPACE\n            );\n          }\n        }, {\n          text: t.localizeKey('endDiscussion', { symbol: '■' }), // BLACK SQUARE\n          callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n            await this.discussion.end(t2);\n            await t2.closePopup();\n            await this.discussion.cardStorage.saveDiscussionButtonLabel(\n              t2,\n              t2.localizeKey('endingDiscussion', { symbol: '■' }) // BLACK SQUARE\n            );\n          }\n        }];\n        break;\n      case await this.discussion.isPausedFor(t):\n        items = [{\n          text: t.localizeKey('resumeDiscussion', { symbol: '▶' }), // BLACK RIGHT-POINTING TRIANGLE\n          callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n            await this.discussion.start(t2);\n            await t2.closePopup();\n            await this.discussion.cardStorage.saveDiscussionButtonLabel(\n              t2,\n              t2.localizeKey('resumingDiscussion', { symbol: '▶' }) // BLACK RIGHT-POINTING TRIANGLE\n            );\n          }\n        }, {\n          text: t.localizeKey('endDiscussion', { symbol: '■' }), // BLACK SQUARE\n          callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n            await this.discussion.end(t2);\n            await t2.closePopup();\n            await this.discussion.cardStorage.saveDiscussionButtonLabel(\n              t2,\n              t2.localizeKey('endingDiscussion', { symbol: '■' }) // BLACK SQUARE\n            );\n          }\n        }];\n        break;\n      default:\n        items = [{\n          text: t.localizeKey('startTimer', { symbol: '▶' }), // BLACK RIGHT-POINTING TRIANGLE\n          callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n            await this.discussion.start(t2);\n            await t2.closePopup();\n            await this.discussion.cardStorage.saveDiscussionButtonLabel(\n              t2,\n              t2.localizeKey('startingTimer', { symbol: '▶' }) // BLACK RIGHT-POINTING TRIANGLE\n            );\n          }\n        }];\n\n        if (await this.discussion.hasEverBeenDiscussed(t)) {\n          items.push({\n            text: t.localizeKey('resetDiscussion', { symbol: '↺' }), // ANTICLOCKWISE OPEN CIRCLE ARROW\n            callback: async (t2: Trello.PowerUp.IFrame): Promise<void> => {\n              await this.discussion.reset(t2);\n              await t2.closePopup();\n              await this.discussion.cardStorage.saveDiscussionButtonLabel(\n                t2,\n                t2.localizeKey('resettingDiscussion', { symbol: '↺' }) // ANTICLOCKWISE OPEN CIRCLE ARROW\n              );\n            }\n          });\n        }\n    }\n\n    return t.popup({\n      title: 'Leaner Coffee',\n      items\n    });\n  };\n\n  getButtonLabel = async (t: Trello.PowerUp.IFrame): Promise<string> => {\n    let label = await this.discussion.cardStorage.getDiscussionButtonLabel(t);\n\n    if (label) {\n      setTimeout(() => {\n        this.discussion.cardStorage.saveDiscussionButtonLabel(t);\n      }, 2000);\n    }\n\n    label = label || t.localizeKey('discussion');\n\n    return label;\n  };\n\n  start(): void {\n    const trelloPlugin = this.t.initialize(CapabilityHandlers(this), {\n      localization: I18nConfig,\n      helpfulStacks: !this.isRunningInProduction()\n    }) as Trello.PowerUp.Plugin;\n\n    this.discussion.init(trelloPlugin);\n  }\n}\n\nexport default LeanCoffeePowerUp;\n","import { Trello } from './types/TrelloPowerUp';\nimport CardStorage from './storage/CardStorage';\nimport { I18nConfig } from './utils/I18nConfig';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport const CapabilityHandlers = (powerUp: any): Trello.PowerUp.CapabilityHandlers => ({\n  'board-buttons': async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.BoardButtonCallback[]> => {\n    if (!await powerUp.updateChecker.hasBeenUpdated(t)) {\n      return [];\n    }\n\n    return [{\n      icon: {\n        dark: `${powerUp.baseUrl}/assets/moka_white.svg`,\n        light: `${powerUp.baseUrl}/assets/moka.svg`\n      },\n      text: t.localizeKey('boardButtonLabel'),\n      callback: powerUp.updateChecker.showMenu\n    }];\n  },\n\n  'card-back-section': async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBackSection> => {\n    const discussionStatus = await powerUp.discussion.cardStorage.getDiscussionStatus(t);\n    if (discussionStatus === undefined) { return null; }\n\n    return {\n      title: t.localizeKey('discussion'),\n      icon: `${powerUp.baseUrl}/assets/powerup/timer.svg`,\n      content: {\n        type: 'iframe',\n        url: t.signUrl(`${powerUp.baseUrl}/discussion-ui.html`)\n      }\n    };\n  },\n\n  'card-badges': async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardBadge[]> => {\n    const badges = [\n      await powerUp.elapsedCardBadge.render(t),\n      await powerUp.votingCardBadge.render(t)\n    ];\n\n    return badges.filter((badge) => badge);\n  },\n\n  'card-buttons': async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardButton[]> => [{\n    icon: `${powerUp.baseUrl}/assets/powerup/timer.svg`,\n    text: await powerUp.getButtonLabel(t),\n    callback: powerUp.handleDiscussion\n  }, {\n    icon: `${powerUp.baseUrl}/assets/powerup/heart.svg`,\n    text: t.localizeKey('vote', {\n      symbol: await powerUp.voting.hasCurrentMemberVoted(t) ? '☑' : '☐'\n    }),\n    callback: powerUp.handleVoting\n  }],\n\n  'card-detail-badges': async (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.CardDetailBadge[]> => {\n    const badges = [\n      await powerUp.elapsedCardDetailBadge.render(t),\n      await powerUp.votingCardDetailBadge.render(t)\n    ];\n\n    return badges.filter((badge) => badge);\n  },\n\n  'list-actions': (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.ListAction[]> => Promise.resolve([{\n    text: t.localizeKey('clearVotesFromList'),\n    callback: async (t2): Promise<void> => {\n      const result = await t2.list('cards');\n      result.cards.forEach(({ id }) => {\n        powerUp.cardStorage.deleteMultiple(t2, [CardStorage.VOTES], id);\n      });\n      return t2.closePopup();\n    }\n  }]),\n\n  'list-sorters': (t: Trello.PowerUp.IFrame): Promise<Trello.PowerUp.ListSorter[]> => Promise.resolve([{\n    text: t.localizeKey('sortByVote'),\n    callback: async (t2, opts): Promise<{ sortedIds: string[] }> => {\n      const votingData = await Promise.all(opts.cards.map(\n        async (card): Promise<{ leanCoffeeVotes: number; id: string }> => {\n          const leanCoffeeVotes = await powerUp.voting.countVotesByCard(t2, card.id);\n          return { leanCoffeeVotes, id: card.id };\n        }\n      ));\n\n      const sortedCards = votingData.sort((cardA, cardB) => {\n        if (cardA.leanCoffeeVotes < cardB.leanCoffeeVotes) { return 1; }\n        if (cardB.leanCoffeeVotes < cardA.leanCoffeeVotes) { return -1; }\n        return 0;\n      });\n\n      return {\n        sortedIds: sortedCards.map((card) => card.id)\n      };\n    }\n  }]),\n\n  'on-enable': (t: Trello.PowerUp.IFrame): PromiseLike<void> => powerUp.boardStorage.setPowerUpVersion(t, process.env.VERSION),\n\n  'show-settings': (t: Trello.PowerUp.IFrame): PromiseLike<void> => t.popup({\n    title: `Leaner Coffee v${process.env.VERSION}`,\n    url: `${powerUp.baseUrl}/settings.html`,\n    height: 184,\n    args: {\n      localization: I18nConfig\n    }\n  })\n});\n","import LeanCoffeePowerUp from './LeanCoffeePowerUp';\n\ndeclare global {\n  interface Window {\n    webkitAudioContext?: typeof AudioContext;\n  }\n}\n\nconst config: Config = process.env.CONFIG as unknown as Config;\n\n/* eslint-disable prefer-template */\nconst instance = new LeanCoffeePowerUp({\n  w: window,\n  config\n});\n\ninstance.start();\n"],"names":["addZero","value","digits","str","toString","size","length","Array","join","concat","module","exports","ms","options","leading","showMs","unsignedMs","sign","duration","getSign","t","TypeError","days","Math","trunc","hours","minutes","seconds","parseMs","output","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","constructor","scope","visibility","assign","this","read","cardId","write","set","writeMultiple","entries","remove","deleteMultiple","BoardStorage","super","getDiscussionStatus","DISCUSSION_STATUS","getDiscussionCardId","DISCUSSION_CARD_ID","getDiscussionStartedAt","DISCUSSION_STARTED_AT","getDiscussionPreviousElapsed","DISCUSSION_PREVIOUS_ELAPSED","getDiscussionIntervalId","DISCUSSION_INTERVAL_ID","getPowerUpVersion","POWER_UP_VERSION","setPowerUpVersion","version","discussion","getText","async","elapsed","getColor","isOngoingFor","isPausedFor","render","bind","getElapsed","text","color","cardStorage","badge","title","localizeKey","baseUrl","voting","storage","getVoters","votes","getVotes","values","reduce","knownVoters","vote","username","push","fullName","avatar","voters","hasVoted","hasCurrentMemberVoted","icon","supportedLocales","I18nConfig","defaultLocale","resourceUrl","clearVoters","deleteVotes","showVoters","items","popup","url","args","localization","callback","commonData","CardStorage","getDiscussionElapsed","DISCUSSION_ELAPSED","getDiscussionThumbs","DISCUSSION_THUMBS","getDiscussionButtonLabel","DISCUSSION_BUTTON_LABEL","saveDiscussionStatus","newStatus","saveDiscussionElapsed","newElapsed","saveDiscussionThumbs","newThumbs","saveVotes","newVotes","VOTES","delete","saveDiscussionButtonLabel","newLabel","deleteDiscussionThumbs","window","w","load","remoteAudioFile","fetch","audioData","arrayBuffer","audioBuffer","audioContext","decodeAudioData","sourceNode","createBufferSource","buffer","connect","destination","play","type","AudioContext","webkitAudioContext","audio","start","open","cardName","Notification","body","show","permission","requestPermission","maxDiscussionDuration","init","p","getElapsedNotification","isOngoingOrPausedForAnotherCard","boardStatus","boardStorage","includes","getContext","card","hasEverBeenDiscussed","hasNotBeenArchived","cards","find","id","updateElapsed","startedAt","Date","now","pause","saveElapsed","previousElapsed","setInterval","notify","intervalId","name","clearInterval","elapsedNotification","notifications","end","err","Error","message","reset","member","countVotesByCard","keys","filter","getMaxVotes","currentList","list","ceil","canCurrentMemberVote","cardIds","map","countVotesByMember","Promise","all","total","hasBeenUpdated","storedVersion","showMenu","oldVersion","newVersion","storeNewVersion","height","LeanCoffeeBase","config","isRunningInProduction","handleVoting","maxVotes","currentMember","stopAndStart","handleDiscussion","cardBeingDiscussed","currentCardBeingDiscussed","currentDiscussionStatus","console","warn","symbol","t2","closePopup","getButtonLabel","label","setTimeout","TrelloPowerUp","hostname","port","defaultDuration","updateChecker","elapsedCardBadge","elapsedCardDetailBadge","votingCardBadge","votingCardDetailBadge","trelloPlugin","initialize","powerUp","dark","light","content","signUrl","resolve","forEach","opts","sortedIds","leanCoffeeVotes","sort","cardA","cardB","helpfulStacks"],"sourceRoot":""}